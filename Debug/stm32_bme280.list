
stm32_bme280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003f18  08003f18  00013f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f90  08003f90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f90  08003f90  00013f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f98  08003f98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f98  08003f98  00013f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f9c  08003f9c  00013f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  08003fac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003fac  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b475  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e9  00000000  00000000  0002b4a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0002ce98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  0002d780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fb3d  00000000  00000000  0002dfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2e9  00000000  00000000  0003dafd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005df3e  00000000  00000000  00049de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a7d24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002064  00000000  00000000  000a7d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003f00 	.word	0x08003f00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003f00 	.word	0x08003f00

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_ldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d115      	bne.n	8000250 <__aeabi_ldivmod+0x30>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d113      	bne.n	8000250 <__aeabi_ldivmod+0x30>
 8000228:	2900      	cmp	r1, #0
 800022a:	db06      	blt.n	800023a <__aeabi_ldivmod+0x1a>
 800022c:	dc01      	bgt.n	8000232 <__aeabi_ldivmod+0x12>
 800022e:	2800      	cmp	r0, #0
 8000230:	d006      	beq.n	8000240 <__aeabi_ldivmod+0x20>
 8000232:	2000      	movs	r0, #0
 8000234:	43c0      	mvns	r0, r0
 8000236:	0841      	lsrs	r1, r0, #1
 8000238:	e002      	b.n	8000240 <__aeabi_ldivmod+0x20>
 800023a:	2180      	movs	r1, #128	; 0x80
 800023c:	0609      	lsls	r1, r1, #24
 800023e:	2000      	movs	r0, #0
 8000240:	b407      	push	{r0, r1, r2}
 8000242:	4802      	ldr	r0, [pc, #8]	; (800024c <__aeabi_ldivmod+0x2c>)
 8000244:	a101      	add	r1, pc, #4	; (adr r1, 800024c <__aeabi_ldivmod+0x2c>)
 8000246:	1840      	adds	r0, r0, r1
 8000248:	9002      	str	r0, [sp, #8]
 800024a:	bd03      	pop	{r0, r1, pc}
 800024c:	ffffffd1 	.word	0xffffffd1
 8000250:	b403      	push	{r0, r1}
 8000252:	4668      	mov	r0, sp
 8000254:	b501      	push	{r0, lr}
 8000256:	9802      	ldr	r0, [sp, #8]
 8000258:	f000 f82e 	bl	80002b8 <__gnu_ldivmod_helper>
 800025c:	9b01      	ldr	r3, [sp, #4]
 800025e:	469e      	mov	lr, r3
 8000260:	b002      	add	sp, #8
 8000262:	bc0c      	pop	{r2, r3}
 8000264:	4770      	bx	lr
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <__aeabi_lmul>:
 8000268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800026a:	0415      	lsls	r5, r2, #16
 800026c:	0c2d      	lsrs	r5, r5, #16
 800026e:	000f      	movs	r7, r1
 8000270:	0001      	movs	r1, r0
 8000272:	002e      	movs	r6, r5
 8000274:	46c6      	mov	lr, r8
 8000276:	4684      	mov	ip, r0
 8000278:	0400      	lsls	r0, r0, #16
 800027a:	0c14      	lsrs	r4, r2, #16
 800027c:	0c00      	lsrs	r0, r0, #16
 800027e:	0c09      	lsrs	r1, r1, #16
 8000280:	4346      	muls	r6, r0
 8000282:	434d      	muls	r5, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	1940      	adds	r0, r0, r5
 800028a:	0c34      	lsrs	r4, r6, #16
 800028c:	1824      	adds	r4, r4, r0
 800028e:	b500      	push	{lr}
 8000290:	42a5      	cmp	r5, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x34>
 8000294:	2080      	movs	r0, #128	; 0x80
 8000296:	0240      	lsls	r0, r0, #9
 8000298:	4680      	mov	r8, r0
 800029a:	4441      	add	r1, r8
 800029c:	0c25      	lsrs	r5, r4, #16
 800029e:	186d      	adds	r5, r5, r1
 80002a0:	4661      	mov	r1, ip
 80002a2:	4359      	muls	r1, r3
 80002a4:	437a      	muls	r2, r7
 80002a6:	0430      	lsls	r0, r6, #16
 80002a8:	1949      	adds	r1, r1, r5
 80002aa:	0424      	lsls	r4, r4, #16
 80002ac:	0c00      	lsrs	r0, r0, #16
 80002ae:	1820      	adds	r0, r4, r0
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bc80      	pop	{r7}
 80002b4:	46b8      	mov	r8, r7
 80002b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b8 <__gnu_ldivmod_helper>:
 80002b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ba:	46ce      	mov	lr, r9
 80002bc:	4647      	mov	r7, r8
 80002be:	b580      	push	{r7, lr}
 80002c0:	4691      	mov	r9, r2
 80002c2:	4698      	mov	r8, r3
 80002c4:	0004      	movs	r4, r0
 80002c6:	000d      	movs	r5, r1
 80002c8:	f000 fbf8 	bl	8000abc <__divdi3>
 80002cc:	0007      	movs	r7, r0
 80002ce:	000e      	movs	r6, r1
 80002d0:	0002      	movs	r2, r0
 80002d2:	000b      	movs	r3, r1
 80002d4:	4648      	mov	r0, r9
 80002d6:	4641      	mov	r1, r8
 80002d8:	f7ff ffc6 	bl	8000268 <__aeabi_lmul>
 80002dc:	1a24      	subs	r4, r4, r0
 80002de:	418d      	sbcs	r5, r1
 80002e0:	9b08      	ldr	r3, [sp, #32]
 80002e2:	0038      	movs	r0, r7
 80002e4:	0031      	movs	r1, r6
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	bcc0      	pop	{r6, r7}
 80002ec:	46b9      	mov	r9, r7
 80002ee:	46b0      	mov	r8, r6
 80002f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002f2:	46c0      	nop			; (mov r8, r8)

080002f4 <__aeabi_ddiv>:
 80002f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002f6:	4657      	mov	r7, sl
 80002f8:	464e      	mov	r6, r9
 80002fa:	4645      	mov	r5, r8
 80002fc:	46de      	mov	lr, fp
 80002fe:	b5e0      	push	{r5, r6, r7, lr}
 8000300:	4681      	mov	r9, r0
 8000302:	0005      	movs	r5, r0
 8000304:	030c      	lsls	r4, r1, #12
 8000306:	0048      	lsls	r0, r1, #1
 8000308:	4692      	mov	sl, r2
 800030a:	001f      	movs	r7, r3
 800030c:	b085      	sub	sp, #20
 800030e:	0b24      	lsrs	r4, r4, #12
 8000310:	0d40      	lsrs	r0, r0, #21
 8000312:	0fce      	lsrs	r6, r1, #31
 8000314:	2800      	cmp	r0, #0
 8000316:	d059      	beq.n	80003cc <__aeabi_ddiv+0xd8>
 8000318:	4b87      	ldr	r3, [pc, #540]	; (8000538 <__aeabi_ddiv+0x244>)
 800031a:	4298      	cmp	r0, r3
 800031c:	d100      	bne.n	8000320 <__aeabi_ddiv+0x2c>
 800031e:	e098      	b.n	8000452 <__aeabi_ddiv+0x15e>
 8000320:	0f6b      	lsrs	r3, r5, #29
 8000322:	00e4      	lsls	r4, r4, #3
 8000324:	431c      	orrs	r4, r3
 8000326:	2380      	movs	r3, #128	; 0x80
 8000328:	041b      	lsls	r3, r3, #16
 800032a:	4323      	orrs	r3, r4
 800032c:	4698      	mov	r8, r3
 800032e:	4b83      	ldr	r3, [pc, #524]	; (800053c <__aeabi_ddiv+0x248>)
 8000330:	00ed      	lsls	r5, r5, #3
 8000332:	469b      	mov	fp, r3
 8000334:	2300      	movs	r3, #0
 8000336:	4699      	mov	r9, r3
 8000338:	4483      	add	fp, r0
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	033c      	lsls	r4, r7, #12
 800033e:	007b      	lsls	r3, r7, #1
 8000340:	4650      	mov	r0, sl
 8000342:	0b24      	lsrs	r4, r4, #12
 8000344:	0d5b      	lsrs	r3, r3, #21
 8000346:	0fff      	lsrs	r7, r7, #31
 8000348:	2b00      	cmp	r3, #0
 800034a:	d067      	beq.n	800041c <__aeabi_ddiv+0x128>
 800034c:	4a7a      	ldr	r2, [pc, #488]	; (8000538 <__aeabi_ddiv+0x244>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d018      	beq.n	8000384 <__aeabi_ddiv+0x90>
 8000352:	497a      	ldr	r1, [pc, #488]	; (800053c <__aeabi_ddiv+0x248>)
 8000354:	0f42      	lsrs	r2, r0, #29
 8000356:	468c      	mov	ip, r1
 8000358:	00e4      	lsls	r4, r4, #3
 800035a:	4659      	mov	r1, fp
 800035c:	4314      	orrs	r4, r2
 800035e:	2280      	movs	r2, #128	; 0x80
 8000360:	4463      	add	r3, ip
 8000362:	0412      	lsls	r2, r2, #16
 8000364:	1acb      	subs	r3, r1, r3
 8000366:	4314      	orrs	r4, r2
 8000368:	469b      	mov	fp, r3
 800036a:	00c2      	lsls	r2, r0, #3
 800036c:	2000      	movs	r0, #0
 800036e:	0033      	movs	r3, r6
 8000370:	407b      	eors	r3, r7
 8000372:	469a      	mov	sl, r3
 8000374:	464b      	mov	r3, r9
 8000376:	2b0f      	cmp	r3, #15
 8000378:	d900      	bls.n	800037c <__aeabi_ddiv+0x88>
 800037a:	e0ef      	b.n	800055c <__aeabi_ddiv+0x268>
 800037c:	4970      	ldr	r1, [pc, #448]	; (8000540 <__aeabi_ddiv+0x24c>)
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	58cb      	ldr	r3, [r1, r3]
 8000382:	469f      	mov	pc, r3
 8000384:	4b6f      	ldr	r3, [pc, #444]	; (8000544 <__aeabi_ddiv+0x250>)
 8000386:	4652      	mov	r2, sl
 8000388:	469c      	mov	ip, r3
 800038a:	4322      	orrs	r2, r4
 800038c:	44e3      	add	fp, ip
 800038e:	2a00      	cmp	r2, #0
 8000390:	d000      	beq.n	8000394 <__aeabi_ddiv+0xa0>
 8000392:	e095      	b.n	80004c0 <__aeabi_ddiv+0x1cc>
 8000394:	4649      	mov	r1, r9
 8000396:	2302      	movs	r3, #2
 8000398:	4319      	orrs	r1, r3
 800039a:	4689      	mov	r9, r1
 800039c:	2400      	movs	r4, #0
 800039e:	2002      	movs	r0, #2
 80003a0:	e7e5      	b.n	800036e <__aeabi_ddiv+0x7a>
 80003a2:	2300      	movs	r3, #0
 80003a4:	2400      	movs	r4, #0
 80003a6:	2500      	movs	r5, #0
 80003a8:	4652      	mov	r2, sl
 80003aa:	051b      	lsls	r3, r3, #20
 80003ac:	4323      	orrs	r3, r4
 80003ae:	07d2      	lsls	r2, r2, #31
 80003b0:	4313      	orrs	r3, r2
 80003b2:	0028      	movs	r0, r5
 80003b4:	0019      	movs	r1, r3
 80003b6:	b005      	add	sp, #20
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	46bb      	mov	fp, r7
 80003bc:	46b2      	mov	sl, r6
 80003be:	46a9      	mov	r9, r5
 80003c0:	46a0      	mov	r8, r4
 80003c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003c4:	2400      	movs	r4, #0
 80003c6:	2500      	movs	r5, #0
 80003c8:	4b5b      	ldr	r3, [pc, #364]	; (8000538 <__aeabi_ddiv+0x244>)
 80003ca:	e7ed      	b.n	80003a8 <__aeabi_ddiv+0xb4>
 80003cc:	464b      	mov	r3, r9
 80003ce:	4323      	orrs	r3, r4
 80003d0:	4698      	mov	r8, r3
 80003d2:	d100      	bne.n	80003d6 <__aeabi_ddiv+0xe2>
 80003d4:	e089      	b.n	80004ea <__aeabi_ddiv+0x1f6>
 80003d6:	2c00      	cmp	r4, #0
 80003d8:	d100      	bne.n	80003dc <__aeabi_ddiv+0xe8>
 80003da:	e1e0      	b.n	800079e <__aeabi_ddiv+0x4aa>
 80003dc:	0020      	movs	r0, r4
 80003de:	f000 fb4f 	bl	8000a80 <__clzsi2>
 80003e2:	0001      	movs	r1, r0
 80003e4:	0002      	movs	r2, r0
 80003e6:	390b      	subs	r1, #11
 80003e8:	231d      	movs	r3, #29
 80003ea:	1a5b      	subs	r3, r3, r1
 80003ec:	4649      	mov	r1, r9
 80003ee:	0010      	movs	r0, r2
 80003f0:	40d9      	lsrs	r1, r3
 80003f2:	3808      	subs	r0, #8
 80003f4:	4084      	lsls	r4, r0
 80003f6:	000b      	movs	r3, r1
 80003f8:	464d      	mov	r5, r9
 80003fa:	4323      	orrs	r3, r4
 80003fc:	4698      	mov	r8, r3
 80003fe:	4085      	lsls	r5, r0
 8000400:	4851      	ldr	r0, [pc, #324]	; (8000548 <__aeabi_ddiv+0x254>)
 8000402:	033c      	lsls	r4, r7, #12
 8000404:	1a83      	subs	r3, r0, r2
 8000406:	469b      	mov	fp, r3
 8000408:	2300      	movs	r3, #0
 800040a:	4699      	mov	r9, r3
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	007b      	lsls	r3, r7, #1
 8000410:	4650      	mov	r0, sl
 8000412:	0b24      	lsrs	r4, r4, #12
 8000414:	0d5b      	lsrs	r3, r3, #21
 8000416:	0fff      	lsrs	r7, r7, #31
 8000418:	2b00      	cmp	r3, #0
 800041a:	d197      	bne.n	800034c <__aeabi_ddiv+0x58>
 800041c:	4652      	mov	r2, sl
 800041e:	4322      	orrs	r2, r4
 8000420:	d055      	beq.n	80004ce <__aeabi_ddiv+0x1da>
 8000422:	2c00      	cmp	r4, #0
 8000424:	d100      	bne.n	8000428 <__aeabi_ddiv+0x134>
 8000426:	e1ca      	b.n	80007be <__aeabi_ddiv+0x4ca>
 8000428:	0020      	movs	r0, r4
 800042a:	f000 fb29 	bl	8000a80 <__clzsi2>
 800042e:	0002      	movs	r2, r0
 8000430:	3a0b      	subs	r2, #11
 8000432:	231d      	movs	r3, #29
 8000434:	0001      	movs	r1, r0
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	4652      	mov	r2, sl
 800043a:	3908      	subs	r1, #8
 800043c:	40da      	lsrs	r2, r3
 800043e:	408c      	lsls	r4, r1
 8000440:	4314      	orrs	r4, r2
 8000442:	4652      	mov	r2, sl
 8000444:	408a      	lsls	r2, r1
 8000446:	4b41      	ldr	r3, [pc, #260]	; (800054c <__aeabi_ddiv+0x258>)
 8000448:	4458      	add	r0, fp
 800044a:	469b      	mov	fp, r3
 800044c:	4483      	add	fp, r0
 800044e:	2000      	movs	r0, #0
 8000450:	e78d      	b.n	800036e <__aeabi_ddiv+0x7a>
 8000452:	464b      	mov	r3, r9
 8000454:	4323      	orrs	r3, r4
 8000456:	4698      	mov	r8, r3
 8000458:	d140      	bne.n	80004dc <__aeabi_ddiv+0x1e8>
 800045a:	2308      	movs	r3, #8
 800045c:	4699      	mov	r9, r3
 800045e:	3b06      	subs	r3, #6
 8000460:	2500      	movs	r5, #0
 8000462:	4683      	mov	fp, r0
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	e769      	b.n	800033c <__aeabi_ddiv+0x48>
 8000468:	46b2      	mov	sl, r6
 800046a:	9b00      	ldr	r3, [sp, #0]
 800046c:	2b02      	cmp	r3, #2
 800046e:	d0a9      	beq.n	80003c4 <__aeabi_ddiv+0xd0>
 8000470:	2b03      	cmp	r3, #3
 8000472:	d100      	bne.n	8000476 <__aeabi_ddiv+0x182>
 8000474:	e211      	b.n	800089a <__aeabi_ddiv+0x5a6>
 8000476:	2b01      	cmp	r3, #1
 8000478:	d093      	beq.n	80003a2 <__aeabi_ddiv+0xae>
 800047a:	4a35      	ldr	r2, [pc, #212]	; (8000550 <__aeabi_ddiv+0x25c>)
 800047c:	445a      	add	r2, fp
 800047e:	2a00      	cmp	r2, #0
 8000480:	dc00      	bgt.n	8000484 <__aeabi_ddiv+0x190>
 8000482:	e13c      	b.n	80006fe <__aeabi_ddiv+0x40a>
 8000484:	076b      	lsls	r3, r5, #29
 8000486:	d000      	beq.n	800048a <__aeabi_ddiv+0x196>
 8000488:	e1a7      	b.n	80007da <__aeabi_ddiv+0x4e6>
 800048a:	08ed      	lsrs	r5, r5, #3
 800048c:	4643      	mov	r3, r8
 800048e:	01db      	lsls	r3, r3, #7
 8000490:	d506      	bpl.n	80004a0 <__aeabi_ddiv+0x1ac>
 8000492:	4642      	mov	r2, r8
 8000494:	4b2f      	ldr	r3, [pc, #188]	; (8000554 <__aeabi_ddiv+0x260>)
 8000496:	401a      	ands	r2, r3
 8000498:	4690      	mov	r8, r2
 800049a:	2280      	movs	r2, #128	; 0x80
 800049c:	00d2      	lsls	r2, r2, #3
 800049e:	445a      	add	r2, fp
 80004a0:	4b2d      	ldr	r3, [pc, #180]	; (8000558 <__aeabi_ddiv+0x264>)
 80004a2:	429a      	cmp	r2, r3
 80004a4:	dc8e      	bgt.n	80003c4 <__aeabi_ddiv+0xd0>
 80004a6:	4643      	mov	r3, r8
 80004a8:	0552      	lsls	r2, r2, #21
 80004aa:	0758      	lsls	r0, r3, #29
 80004ac:	025c      	lsls	r4, r3, #9
 80004ae:	4305      	orrs	r5, r0
 80004b0:	0b24      	lsrs	r4, r4, #12
 80004b2:	0d53      	lsrs	r3, r2, #21
 80004b4:	e778      	b.n	80003a8 <__aeabi_ddiv+0xb4>
 80004b6:	46ba      	mov	sl, r7
 80004b8:	46a0      	mov	r8, r4
 80004ba:	0015      	movs	r5, r2
 80004bc:	9000      	str	r0, [sp, #0]
 80004be:	e7d4      	b.n	800046a <__aeabi_ddiv+0x176>
 80004c0:	464a      	mov	r2, r9
 80004c2:	2303      	movs	r3, #3
 80004c4:	431a      	orrs	r2, r3
 80004c6:	4691      	mov	r9, r2
 80004c8:	2003      	movs	r0, #3
 80004ca:	4652      	mov	r2, sl
 80004cc:	e74f      	b.n	800036e <__aeabi_ddiv+0x7a>
 80004ce:	4649      	mov	r1, r9
 80004d0:	2301      	movs	r3, #1
 80004d2:	4319      	orrs	r1, r3
 80004d4:	4689      	mov	r9, r1
 80004d6:	2400      	movs	r4, #0
 80004d8:	2001      	movs	r0, #1
 80004da:	e748      	b.n	800036e <__aeabi_ddiv+0x7a>
 80004dc:	230c      	movs	r3, #12
 80004de:	4699      	mov	r9, r3
 80004e0:	3b09      	subs	r3, #9
 80004e2:	46a0      	mov	r8, r4
 80004e4:	4683      	mov	fp, r0
 80004e6:	9300      	str	r3, [sp, #0]
 80004e8:	e728      	b.n	800033c <__aeabi_ddiv+0x48>
 80004ea:	2304      	movs	r3, #4
 80004ec:	4699      	mov	r9, r3
 80004ee:	2300      	movs	r3, #0
 80004f0:	469b      	mov	fp, r3
 80004f2:	3301      	adds	r3, #1
 80004f4:	2500      	movs	r5, #0
 80004f6:	9300      	str	r3, [sp, #0]
 80004f8:	e720      	b.n	800033c <__aeabi_ddiv+0x48>
 80004fa:	2300      	movs	r3, #0
 80004fc:	2480      	movs	r4, #128	; 0x80
 80004fe:	469a      	mov	sl, r3
 8000500:	2500      	movs	r5, #0
 8000502:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <__aeabi_ddiv+0x244>)
 8000504:	0324      	lsls	r4, r4, #12
 8000506:	e74f      	b.n	80003a8 <__aeabi_ddiv+0xb4>
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	4641      	mov	r1, r8
 800050c:	031b      	lsls	r3, r3, #12
 800050e:	4219      	tst	r1, r3
 8000510:	d008      	beq.n	8000524 <__aeabi_ddiv+0x230>
 8000512:	421c      	tst	r4, r3
 8000514:	d106      	bne.n	8000524 <__aeabi_ddiv+0x230>
 8000516:	431c      	orrs	r4, r3
 8000518:	0324      	lsls	r4, r4, #12
 800051a:	46ba      	mov	sl, r7
 800051c:	0015      	movs	r5, r2
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <__aeabi_ddiv+0x244>)
 8000520:	0b24      	lsrs	r4, r4, #12
 8000522:	e741      	b.n	80003a8 <__aeabi_ddiv+0xb4>
 8000524:	2480      	movs	r4, #128	; 0x80
 8000526:	4643      	mov	r3, r8
 8000528:	0324      	lsls	r4, r4, #12
 800052a:	431c      	orrs	r4, r3
 800052c:	0324      	lsls	r4, r4, #12
 800052e:	46b2      	mov	sl, r6
 8000530:	4b01      	ldr	r3, [pc, #4]	; (8000538 <__aeabi_ddiv+0x244>)
 8000532:	0b24      	lsrs	r4, r4, #12
 8000534:	e738      	b.n	80003a8 <__aeabi_ddiv+0xb4>
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	000007ff 	.word	0x000007ff
 800053c:	fffffc01 	.word	0xfffffc01
 8000540:	08003f38 	.word	0x08003f38
 8000544:	fffff801 	.word	0xfffff801
 8000548:	fffffc0d 	.word	0xfffffc0d
 800054c:	000003f3 	.word	0x000003f3
 8000550:	000003ff 	.word	0x000003ff
 8000554:	feffffff 	.word	0xfeffffff
 8000558:	000007fe 	.word	0x000007fe
 800055c:	4544      	cmp	r4, r8
 800055e:	d200      	bcs.n	8000562 <__aeabi_ddiv+0x26e>
 8000560:	e116      	b.n	8000790 <__aeabi_ddiv+0x49c>
 8000562:	d100      	bne.n	8000566 <__aeabi_ddiv+0x272>
 8000564:	e111      	b.n	800078a <__aeabi_ddiv+0x496>
 8000566:	2301      	movs	r3, #1
 8000568:	425b      	negs	r3, r3
 800056a:	469c      	mov	ip, r3
 800056c:	002e      	movs	r6, r5
 800056e:	4640      	mov	r0, r8
 8000570:	2500      	movs	r5, #0
 8000572:	44e3      	add	fp, ip
 8000574:	0223      	lsls	r3, r4, #8
 8000576:	0e14      	lsrs	r4, r2, #24
 8000578:	431c      	orrs	r4, r3
 800057a:	0c1b      	lsrs	r3, r3, #16
 800057c:	4699      	mov	r9, r3
 800057e:	0423      	lsls	r3, r4, #16
 8000580:	0c1f      	lsrs	r7, r3, #16
 8000582:	0212      	lsls	r2, r2, #8
 8000584:	4649      	mov	r1, r9
 8000586:	9200      	str	r2, [sp, #0]
 8000588:	9701      	str	r7, [sp, #4]
 800058a:	f7ff fe43 	bl	8000214 <__aeabi_uidivmod>
 800058e:	0002      	movs	r2, r0
 8000590:	437a      	muls	r2, r7
 8000592:	040b      	lsls	r3, r1, #16
 8000594:	0c31      	lsrs	r1, r6, #16
 8000596:	4680      	mov	r8, r0
 8000598:	4319      	orrs	r1, r3
 800059a:	428a      	cmp	r2, r1
 800059c:	d90b      	bls.n	80005b6 <__aeabi_ddiv+0x2c2>
 800059e:	2301      	movs	r3, #1
 80005a0:	425b      	negs	r3, r3
 80005a2:	469c      	mov	ip, r3
 80005a4:	1909      	adds	r1, r1, r4
 80005a6:	44e0      	add	r8, ip
 80005a8:	428c      	cmp	r4, r1
 80005aa:	d804      	bhi.n	80005b6 <__aeabi_ddiv+0x2c2>
 80005ac:	428a      	cmp	r2, r1
 80005ae:	d902      	bls.n	80005b6 <__aeabi_ddiv+0x2c2>
 80005b0:	1e83      	subs	r3, r0, #2
 80005b2:	4698      	mov	r8, r3
 80005b4:	1909      	adds	r1, r1, r4
 80005b6:	1a88      	subs	r0, r1, r2
 80005b8:	4649      	mov	r1, r9
 80005ba:	f7ff fe2b 	bl	8000214 <__aeabi_uidivmod>
 80005be:	0409      	lsls	r1, r1, #16
 80005c0:	468c      	mov	ip, r1
 80005c2:	0431      	lsls	r1, r6, #16
 80005c4:	4666      	mov	r6, ip
 80005c6:	9a01      	ldr	r2, [sp, #4]
 80005c8:	0c09      	lsrs	r1, r1, #16
 80005ca:	4342      	muls	r2, r0
 80005cc:	0003      	movs	r3, r0
 80005ce:	4331      	orrs	r1, r6
 80005d0:	428a      	cmp	r2, r1
 80005d2:	d904      	bls.n	80005de <__aeabi_ddiv+0x2ea>
 80005d4:	1909      	adds	r1, r1, r4
 80005d6:	3b01      	subs	r3, #1
 80005d8:	428c      	cmp	r4, r1
 80005da:	d800      	bhi.n	80005de <__aeabi_ddiv+0x2ea>
 80005dc:	e111      	b.n	8000802 <__aeabi_ddiv+0x50e>
 80005de:	1a89      	subs	r1, r1, r2
 80005e0:	4642      	mov	r2, r8
 80005e2:	9e00      	ldr	r6, [sp, #0]
 80005e4:	0412      	lsls	r2, r2, #16
 80005e6:	431a      	orrs	r2, r3
 80005e8:	0c33      	lsrs	r3, r6, #16
 80005ea:	001f      	movs	r7, r3
 80005ec:	0c10      	lsrs	r0, r2, #16
 80005ee:	4690      	mov	r8, r2
 80005f0:	9302      	str	r3, [sp, #8]
 80005f2:	0413      	lsls	r3, r2, #16
 80005f4:	0432      	lsls	r2, r6, #16
 80005f6:	0c16      	lsrs	r6, r2, #16
 80005f8:	0032      	movs	r2, r6
 80005fa:	0c1b      	lsrs	r3, r3, #16
 80005fc:	435a      	muls	r2, r3
 80005fe:	9603      	str	r6, [sp, #12]
 8000600:	437b      	muls	r3, r7
 8000602:	4346      	muls	r6, r0
 8000604:	4378      	muls	r0, r7
 8000606:	0c17      	lsrs	r7, r2, #16
 8000608:	46bc      	mov	ip, r7
 800060a:	199b      	adds	r3, r3, r6
 800060c:	4463      	add	r3, ip
 800060e:	429e      	cmp	r6, r3
 8000610:	d903      	bls.n	800061a <__aeabi_ddiv+0x326>
 8000612:	2680      	movs	r6, #128	; 0x80
 8000614:	0276      	lsls	r6, r6, #9
 8000616:	46b4      	mov	ip, r6
 8000618:	4460      	add	r0, ip
 800061a:	0c1e      	lsrs	r6, r3, #16
 800061c:	1830      	adds	r0, r6, r0
 800061e:	0416      	lsls	r6, r2, #16
 8000620:	041b      	lsls	r3, r3, #16
 8000622:	0c36      	lsrs	r6, r6, #16
 8000624:	199e      	adds	r6, r3, r6
 8000626:	4281      	cmp	r1, r0
 8000628:	d200      	bcs.n	800062c <__aeabi_ddiv+0x338>
 800062a:	e09c      	b.n	8000766 <__aeabi_ddiv+0x472>
 800062c:	d100      	bne.n	8000630 <__aeabi_ddiv+0x33c>
 800062e:	e097      	b.n	8000760 <__aeabi_ddiv+0x46c>
 8000630:	1bae      	subs	r6, r5, r6
 8000632:	1a09      	subs	r1, r1, r0
 8000634:	42b5      	cmp	r5, r6
 8000636:	4180      	sbcs	r0, r0
 8000638:	4240      	negs	r0, r0
 800063a:	1a08      	subs	r0, r1, r0
 800063c:	4284      	cmp	r4, r0
 800063e:	d100      	bne.n	8000642 <__aeabi_ddiv+0x34e>
 8000640:	e111      	b.n	8000866 <__aeabi_ddiv+0x572>
 8000642:	4649      	mov	r1, r9
 8000644:	f7ff fde6 	bl	8000214 <__aeabi_uidivmod>
 8000648:	9a01      	ldr	r2, [sp, #4]
 800064a:	040b      	lsls	r3, r1, #16
 800064c:	4342      	muls	r2, r0
 800064e:	0c31      	lsrs	r1, r6, #16
 8000650:	0005      	movs	r5, r0
 8000652:	4319      	orrs	r1, r3
 8000654:	428a      	cmp	r2, r1
 8000656:	d907      	bls.n	8000668 <__aeabi_ddiv+0x374>
 8000658:	1909      	adds	r1, r1, r4
 800065a:	3d01      	subs	r5, #1
 800065c:	428c      	cmp	r4, r1
 800065e:	d803      	bhi.n	8000668 <__aeabi_ddiv+0x374>
 8000660:	428a      	cmp	r2, r1
 8000662:	d901      	bls.n	8000668 <__aeabi_ddiv+0x374>
 8000664:	1e85      	subs	r5, r0, #2
 8000666:	1909      	adds	r1, r1, r4
 8000668:	1a88      	subs	r0, r1, r2
 800066a:	4649      	mov	r1, r9
 800066c:	f7ff fdd2 	bl	8000214 <__aeabi_uidivmod>
 8000670:	0409      	lsls	r1, r1, #16
 8000672:	468c      	mov	ip, r1
 8000674:	0431      	lsls	r1, r6, #16
 8000676:	4666      	mov	r6, ip
 8000678:	9a01      	ldr	r2, [sp, #4]
 800067a:	0c09      	lsrs	r1, r1, #16
 800067c:	4342      	muls	r2, r0
 800067e:	0003      	movs	r3, r0
 8000680:	4331      	orrs	r1, r6
 8000682:	428a      	cmp	r2, r1
 8000684:	d907      	bls.n	8000696 <__aeabi_ddiv+0x3a2>
 8000686:	1909      	adds	r1, r1, r4
 8000688:	3b01      	subs	r3, #1
 800068a:	428c      	cmp	r4, r1
 800068c:	d803      	bhi.n	8000696 <__aeabi_ddiv+0x3a2>
 800068e:	428a      	cmp	r2, r1
 8000690:	d901      	bls.n	8000696 <__aeabi_ddiv+0x3a2>
 8000692:	1e83      	subs	r3, r0, #2
 8000694:	1909      	adds	r1, r1, r4
 8000696:	9e03      	ldr	r6, [sp, #12]
 8000698:	1a89      	subs	r1, r1, r2
 800069a:	0032      	movs	r2, r6
 800069c:	042d      	lsls	r5, r5, #16
 800069e:	431d      	orrs	r5, r3
 80006a0:	9f02      	ldr	r7, [sp, #8]
 80006a2:	042b      	lsls	r3, r5, #16
 80006a4:	0c1b      	lsrs	r3, r3, #16
 80006a6:	435a      	muls	r2, r3
 80006a8:	437b      	muls	r3, r7
 80006aa:	469c      	mov	ip, r3
 80006ac:	0c28      	lsrs	r0, r5, #16
 80006ae:	4346      	muls	r6, r0
 80006b0:	0c13      	lsrs	r3, r2, #16
 80006b2:	44b4      	add	ip, r6
 80006b4:	4463      	add	r3, ip
 80006b6:	4378      	muls	r0, r7
 80006b8:	429e      	cmp	r6, r3
 80006ba:	d903      	bls.n	80006c4 <__aeabi_ddiv+0x3d0>
 80006bc:	2680      	movs	r6, #128	; 0x80
 80006be:	0276      	lsls	r6, r6, #9
 80006c0:	46b4      	mov	ip, r6
 80006c2:	4460      	add	r0, ip
 80006c4:	0c1e      	lsrs	r6, r3, #16
 80006c6:	0412      	lsls	r2, r2, #16
 80006c8:	041b      	lsls	r3, r3, #16
 80006ca:	0c12      	lsrs	r2, r2, #16
 80006cc:	1830      	adds	r0, r6, r0
 80006ce:	189b      	adds	r3, r3, r2
 80006d0:	4281      	cmp	r1, r0
 80006d2:	d306      	bcc.n	80006e2 <__aeabi_ddiv+0x3ee>
 80006d4:	d002      	beq.n	80006dc <__aeabi_ddiv+0x3e8>
 80006d6:	2301      	movs	r3, #1
 80006d8:	431d      	orrs	r5, r3
 80006da:	e6ce      	b.n	800047a <__aeabi_ddiv+0x186>
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d100      	bne.n	80006e2 <__aeabi_ddiv+0x3ee>
 80006e0:	e6cb      	b.n	800047a <__aeabi_ddiv+0x186>
 80006e2:	1861      	adds	r1, r4, r1
 80006e4:	1e6e      	subs	r6, r5, #1
 80006e6:	42a1      	cmp	r1, r4
 80006e8:	d200      	bcs.n	80006ec <__aeabi_ddiv+0x3f8>
 80006ea:	e0a4      	b.n	8000836 <__aeabi_ddiv+0x542>
 80006ec:	4281      	cmp	r1, r0
 80006ee:	d200      	bcs.n	80006f2 <__aeabi_ddiv+0x3fe>
 80006f0:	e0c9      	b.n	8000886 <__aeabi_ddiv+0x592>
 80006f2:	d100      	bne.n	80006f6 <__aeabi_ddiv+0x402>
 80006f4:	e0d9      	b.n	80008aa <__aeabi_ddiv+0x5b6>
 80006f6:	0035      	movs	r5, r6
 80006f8:	e7ed      	b.n	80006d6 <__aeabi_ddiv+0x3e2>
 80006fa:	2501      	movs	r5, #1
 80006fc:	426d      	negs	r5, r5
 80006fe:	2101      	movs	r1, #1
 8000700:	1a89      	subs	r1, r1, r2
 8000702:	2938      	cmp	r1, #56	; 0x38
 8000704:	dd00      	ble.n	8000708 <__aeabi_ddiv+0x414>
 8000706:	e64c      	b.n	80003a2 <__aeabi_ddiv+0xae>
 8000708:	291f      	cmp	r1, #31
 800070a:	dc00      	bgt.n	800070e <__aeabi_ddiv+0x41a>
 800070c:	e07f      	b.n	800080e <__aeabi_ddiv+0x51a>
 800070e:	231f      	movs	r3, #31
 8000710:	425b      	negs	r3, r3
 8000712:	1a9a      	subs	r2, r3, r2
 8000714:	4643      	mov	r3, r8
 8000716:	40d3      	lsrs	r3, r2
 8000718:	2920      	cmp	r1, #32
 800071a:	d004      	beq.n	8000726 <__aeabi_ddiv+0x432>
 800071c:	4644      	mov	r4, r8
 800071e:	4a65      	ldr	r2, [pc, #404]	; (80008b4 <__aeabi_ddiv+0x5c0>)
 8000720:	445a      	add	r2, fp
 8000722:	4094      	lsls	r4, r2
 8000724:	4325      	orrs	r5, r4
 8000726:	1e6a      	subs	r2, r5, #1
 8000728:	4195      	sbcs	r5, r2
 800072a:	2207      	movs	r2, #7
 800072c:	432b      	orrs	r3, r5
 800072e:	0015      	movs	r5, r2
 8000730:	2400      	movs	r4, #0
 8000732:	401d      	ands	r5, r3
 8000734:	421a      	tst	r2, r3
 8000736:	d100      	bne.n	800073a <__aeabi_ddiv+0x446>
 8000738:	e0a1      	b.n	800087e <__aeabi_ddiv+0x58a>
 800073a:	220f      	movs	r2, #15
 800073c:	2400      	movs	r4, #0
 800073e:	401a      	ands	r2, r3
 8000740:	2a04      	cmp	r2, #4
 8000742:	d100      	bne.n	8000746 <__aeabi_ddiv+0x452>
 8000744:	e098      	b.n	8000878 <__aeabi_ddiv+0x584>
 8000746:	1d1a      	adds	r2, r3, #4
 8000748:	429a      	cmp	r2, r3
 800074a:	419b      	sbcs	r3, r3
 800074c:	425b      	negs	r3, r3
 800074e:	18e4      	adds	r4, r4, r3
 8000750:	0013      	movs	r3, r2
 8000752:	0222      	lsls	r2, r4, #8
 8000754:	d400      	bmi.n	8000758 <__aeabi_ddiv+0x464>
 8000756:	e08f      	b.n	8000878 <__aeabi_ddiv+0x584>
 8000758:	2301      	movs	r3, #1
 800075a:	2400      	movs	r4, #0
 800075c:	2500      	movs	r5, #0
 800075e:	e623      	b.n	80003a8 <__aeabi_ddiv+0xb4>
 8000760:	42b5      	cmp	r5, r6
 8000762:	d300      	bcc.n	8000766 <__aeabi_ddiv+0x472>
 8000764:	e764      	b.n	8000630 <__aeabi_ddiv+0x33c>
 8000766:	4643      	mov	r3, r8
 8000768:	1e5a      	subs	r2, r3, #1
 800076a:	9b00      	ldr	r3, [sp, #0]
 800076c:	469c      	mov	ip, r3
 800076e:	4465      	add	r5, ip
 8000770:	001f      	movs	r7, r3
 8000772:	429d      	cmp	r5, r3
 8000774:	419b      	sbcs	r3, r3
 8000776:	425b      	negs	r3, r3
 8000778:	191b      	adds	r3, r3, r4
 800077a:	18c9      	adds	r1, r1, r3
 800077c:	428c      	cmp	r4, r1
 800077e:	d23a      	bcs.n	80007f6 <__aeabi_ddiv+0x502>
 8000780:	4288      	cmp	r0, r1
 8000782:	d863      	bhi.n	800084c <__aeabi_ddiv+0x558>
 8000784:	d060      	beq.n	8000848 <__aeabi_ddiv+0x554>
 8000786:	4690      	mov	r8, r2
 8000788:	e752      	b.n	8000630 <__aeabi_ddiv+0x33c>
 800078a:	42aa      	cmp	r2, r5
 800078c:	d900      	bls.n	8000790 <__aeabi_ddiv+0x49c>
 800078e:	e6ea      	b.n	8000566 <__aeabi_ddiv+0x272>
 8000790:	4643      	mov	r3, r8
 8000792:	07de      	lsls	r6, r3, #31
 8000794:	0858      	lsrs	r0, r3, #1
 8000796:	086b      	lsrs	r3, r5, #1
 8000798:	431e      	orrs	r6, r3
 800079a:	07ed      	lsls	r5, r5, #31
 800079c:	e6ea      	b.n	8000574 <__aeabi_ddiv+0x280>
 800079e:	4648      	mov	r0, r9
 80007a0:	f000 f96e 	bl	8000a80 <__clzsi2>
 80007a4:	0001      	movs	r1, r0
 80007a6:	0002      	movs	r2, r0
 80007a8:	3115      	adds	r1, #21
 80007aa:	3220      	adds	r2, #32
 80007ac:	291c      	cmp	r1, #28
 80007ae:	dc00      	bgt.n	80007b2 <__aeabi_ddiv+0x4be>
 80007b0:	e61a      	b.n	80003e8 <__aeabi_ddiv+0xf4>
 80007b2:	464b      	mov	r3, r9
 80007b4:	3808      	subs	r0, #8
 80007b6:	4083      	lsls	r3, r0
 80007b8:	2500      	movs	r5, #0
 80007ba:	4698      	mov	r8, r3
 80007bc:	e620      	b.n	8000400 <__aeabi_ddiv+0x10c>
 80007be:	f000 f95f 	bl	8000a80 <__clzsi2>
 80007c2:	0003      	movs	r3, r0
 80007c4:	001a      	movs	r2, r3
 80007c6:	3215      	adds	r2, #21
 80007c8:	3020      	adds	r0, #32
 80007ca:	2a1c      	cmp	r2, #28
 80007cc:	dc00      	bgt.n	80007d0 <__aeabi_ddiv+0x4dc>
 80007ce:	e630      	b.n	8000432 <__aeabi_ddiv+0x13e>
 80007d0:	4654      	mov	r4, sl
 80007d2:	3b08      	subs	r3, #8
 80007d4:	2200      	movs	r2, #0
 80007d6:	409c      	lsls	r4, r3
 80007d8:	e635      	b.n	8000446 <__aeabi_ddiv+0x152>
 80007da:	230f      	movs	r3, #15
 80007dc:	402b      	ands	r3, r5
 80007de:	2b04      	cmp	r3, #4
 80007e0:	d100      	bne.n	80007e4 <__aeabi_ddiv+0x4f0>
 80007e2:	e652      	b.n	800048a <__aeabi_ddiv+0x196>
 80007e4:	2305      	movs	r3, #5
 80007e6:	425b      	negs	r3, r3
 80007e8:	42ab      	cmp	r3, r5
 80007ea:	419b      	sbcs	r3, r3
 80007ec:	3504      	adds	r5, #4
 80007ee:	425b      	negs	r3, r3
 80007f0:	08ed      	lsrs	r5, r5, #3
 80007f2:	4498      	add	r8, r3
 80007f4:	e64a      	b.n	800048c <__aeabi_ddiv+0x198>
 80007f6:	428c      	cmp	r4, r1
 80007f8:	d1c5      	bne.n	8000786 <__aeabi_ddiv+0x492>
 80007fa:	42af      	cmp	r7, r5
 80007fc:	d9c0      	bls.n	8000780 <__aeabi_ddiv+0x48c>
 80007fe:	4690      	mov	r8, r2
 8000800:	e716      	b.n	8000630 <__aeabi_ddiv+0x33c>
 8000802:	428a      	cmp	r2, r1
 8000804:	d800      	bhi.n	8000808 <__aeabi_ddiv+0x514>
 8000806:	e6ea      	b.n	80005de <__aeabi_ddiv+0x2ea>
 8000808:	1e83      	subs	r3, r0, #2
 800080a:	1909      	adds	r1, r1, r4
 800080c:	e6e7      	b.n	80005de <__aeabi_ddiv+0x2ea>
 800080e:	4a2a      	ldr	r2, [pc, #168]	; (80008b8 <__aeabi_ddiv+0x5c4>)
 8000810:	0028      	movs	r0, r5
 8000812:	445a      	add	r2, fp
 8000814:	4643      	mov	r3, r8
 8000816:	4095      	lsls	r5, r2
 8000818:	4093      	lsls	r3, r2
 800081a:	40c8      	lsrs	r0, r1
 800081c:	1e6a      	subs	r2, r5, #1
 800081e:	4195      	sbcs	r5, r2
 8000820:	4644      	mov	r4, r8
 8000822:	4303      	orrs	r3, r0
 8000824:	432b      	orrs	r3, r5
 8000826:	40cc      	lsrs	r4, r1
 8000828:	075a      	lsls	r2, r3, #29
 800082a:	d092      	beq.n	8000752 <__aeabi_ddiv+0x45e>
 800082c:	220f      	movs	r2, #15
 800082e:	401a      	ands	r2, r3
 8000830:	2a04      	cmp	r2, #4
 8000832:	d188      	bne.n	8000746 <__aeabi_ddiv+0x452>
 8000834:	e78d      	b.n	8000752 <__aeabi_ddiv+0x45e>
 8000836:	0035      	movs	r5, r6
 8000838:	4281      	cmp	r1, r0
 800083a:	d000      	beq.n	800083e <__aeabi_ddiv+0x54a>
 800083c:	e74b      	b.n	80006d6 <__aeabi_ddiv+0x3e2>
 800083e:	9a00      	ldr	r2, [sp, #0]
 8000840:	4293      	cmp	r3, r2
 8000842:	d000      	beq.n	8000846 <__aeabi_ddiv+0x552>
 8000844:	e747      	b.n	80006d6 <__aeabi_ddiv+0x3e2>
 8000846:	e618      	b.n	800047a <__aeabi_ddiv+0x186>
 8000848:	42ae      	cmp	r6, r5
 800084a:	d99c      	bls.n	8000786 <__aeabi_ddiv+0x492>
 800084c:	2302      	movs	r3, #2
 800084e:	425b      	negs	r3, r3
 8000850:	469c      	mov	ip, r3
 8000852:	9b00      	ldr	r3, [sp, #0]
 8000854:	44e0      	add	r8, ip
 8000856:	469c      	mov	ip, r3
 8000858:	4465      	add	r5, ip
 800085a:	429d      	cmp	r5, r3
 800085c:	419b      	sbcs	r3, r3
 800085e:	425b      	negs	r3, r3
 8000860:	191b      	adds	r3, r3, r4
 8000862:	18c9      	adds	r1, r1, r3
 8000864:	e6e4      	b.n	8000630 <__aeabi_ddiv+0x33c>
 8000866:	4a15      	ldr	r2, [pc, #84]	; (80008bc <__aeabi_ddiv+0x5c8>)
 8000868:	445a      	add	r2, fp
 800086a:	2a00      	cmp	r2, #0
 800086c:	dc00      	bgt.n	8000870 <__aeabi_ddiv+0x57c>
 800086e:	e744      	b.n	80006fa <__aeabi_ddiv+0x406>
 8000870:	2301      	movs	r3, #1
 8000872:	2500      	movs	r5, #0
 8000874:	4498      	add	r8, r3
 8000876:	e609      	b.n	800048c <__aeabi_ddiv+0x198>
 8000878:	0765      	lsls	r5, r4, #29
 800087a:	0264      	lsls	r4, r4, #9
 800087c:	0b24      	lsrs	r4, r4, #12
 800087e:	08db      	lsrs	r3, r3, #3
 8000880:	431d      	orrs	r5, r3
 8000882:	2300      	movs	r3, #0
 8000884:	e590      	b.n	80003a8 <__aeabi_ddiv+0xb4>
 8000886:	9e00      	ldr	r6, [sp, #0]
 8000888:	3d02      	subs	r5, #2
 800088a:	0072      	lsls	r2, r6, #1
 800088c:	42b2      	cmp	r2, r6
 800088e:	41bf      	sbcs	r7, r7
 8000890:	427f      	negs	r7, r7
 8000892:	193c      	adds	r4, r7, r4
 8000894:	1909      	adds	r1, r1, r4
 8000896:	9200      	str	r2, [sp, #0]
 8000898:	e7ce      	b.n	8000838 <__aeabi_ddiv+0x544>
 800089a:	2480      	movs	r4, #128	; 0x80
 800089c:	4643      	mov	r3, r8
 800089e:	0324      	lsls	r4, r4, #12
 80008a0:	431c      	orrs	r4, r3
 80008a2:	0324      	lsls	r4, r4, #12
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <__aeabi_ddiv+0x5cc>)
 80008a6:	0b24      	lsrs	r4, r4, #12
 80008a8:	e57e      	b.n	80003a8 <__aeabi_ddiv+0xb4>
 80008aa:	9a00      	ldr	r2, [sp, #0]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d3ea      	bcc.n	8000886 <__aeabi_ddiv+0x592>
 80008b0:	0035      	movs	r5, r6
 80008b2:	e7c4      	b.n	800083e <__aeabi_ddiv+0x54a>
 80008b4:	0000043e 	.word	0x0000043e
 80008b8:	0000041e 	.word	0x0000041e
 80008bc:	000003ff 	.word	0x000003ff
 80008c0:	000007ff 	.word	0x000007ff

080008c4 <__aeabi_i2d>:
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d016      	beq.n	80008f8 <__aeabi_i2d+0x34>
 80008ca:	17c3      	asrs	r3, r0, #31
 80008cc:	18c5      	adds	r5, r0, r3
 80008ce:	405d      	eors	r5, r3
 80008d0:	0fc4      	lsrs	r4, r0, #31
 80008d2:	0028      	movs	r0, r5
 80008d4:	f000 f8d4 	bl	8000a80 <__clzsi2>
 80008d8:	4a11      	ldr	r2, [pc, #68]	; (8000920 <__aeabi_i2d+0x5c>)
 80008da:	1a12      	subs	r2, r2, r0
 80008dc:	280a      	cmp	r0, #10
 80008de:	dc16      	bgt.n	800090e <__aeabi_i2d+0x4a>
 80008e0:	0003      	movs	r3, r0
 80008e2:	002e      	movs	r6, r5
 80008e4:	3315      	adds	r3, #21
 80008e6:	409e      	lsls	r6, r3
 80008e8:	230b      	movs	r3, #11
 80008ea:	1a18      	subs	r0, r3, r0
 80008ec:	40c5      	lsrs	r5, r0
 80008ee:	0553      	lsls	r3, r2, #21
 80008f0:	032d      	lsls	r5, r5, #12
 80008f2:	0b2d      	lsrs	r5, r5, #12
 80008f4:	0d5b      	lsrs	r3, r3, #21
 80008f6:	e003      	b.n	8000900 <__aeabi_i2d+0x3c>
 80008f8:	2400      	movs	r4, #0
 80008fa:	2300      	movs	r3, #0
 80008fc:	2500      	movs	r5, #0
 80008fe:	2600      	movs	r6, #0
 8000900:	051b      	lsls	r3, r3, #20
 8000902:	432b      	orrs	r3, r5
 8000904:	07e4      	lsls	r4, r4, #31
 8000906:	4323      	orrs	r3, r4
 8000908:	0030      	movs	r0, r6
 800090a:	0019      	movs	r1, r3
 800090c:	bd70      	pop	{r4, r5, r6, pc}
 800090e:	380b      	subs	r0, #11
 8000910:	4085      	lsls	r5, r0
 8000912:	0553      	lsls	r3, r2, #21
 8000914:	032d      	lsls	r5, r5, #12
 8000916:	2600      	movs	r6, #0
 8000918:	0b2d      	lsrs	r5, r5, #12
 800091a:	0d5b      	lsrs	r3, r3, #21
 800091c:	e7f0      	b.n	8000900 <__aeabi_i2d+0x3c>
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	0000041e 	.word	0x0000041e

08000924 <__aeabi_ui2d>:
 8000924:	b510      	push	{r4, lr}
 8000926:	1e04      	subs	r4, r0, #0
 8000928:	d010      	beq.n	800094c <__aeabi_ui2d+0x28>
 800092a:	f000 f8a9 	bl	8000a80 <__clzsi2>
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <__aeabi_ui2d+0x48>)
 8000930:	1a1b      	subs	r3, r3, r0
 8000932:	280a      	cmp	r0, #10
 8000934:	dc11      	bgt.n	800095a <__aeabi_ui2d+0x36>
 8000936:	220b      	movs	r2, #11
 8000938:	0021      	movs	r1, r4
 800093a:	1a12      	subs	r2, r2, r0
 800093c:	40d1      	lsrs	r1, r2
 800093e:	3015      	adds	r0, #21
 8000940:	030a      	lsls	r2, r1, #12
 8000942:	055b      	lsls	r3, r3, #21
 8000944:	4084      	lsls	r4, r0
 8000946:	0b12      	lsrs	r2, r2, #12
 8000948:	0d5b      	lsrs	r3, r3, #21
 800094a:	e001      	b.n	8000950 <__aeabi_ui2d+0x2c>
 800094c:	2300      	movs	r3, #0
 800094e:	2200      	movs	r2, #0
 8000950:	051b      	lsls	r3, r3, #20
 8000952:	4313      	orrs	r3, r2
 8000954:	0020      	movs	r0, r4
 8000956:	0019      	movs	r1, r3
 8000958:	bd10      	pop	{r4, pc}
 800095a:	0022      	movs	r2, r4
 800095c:	380b      	subs	r0, #11
 800095e:	4082      	lsls	r2, r0
 8000960:	055b      	lsls	r3, r3, #21
 8000962:	0312      	lsls	r2, r2, #12
 8000964:	2400      	movs	r4, #0
 8000966:	0b12      	lsrs	r2, r2, #12
 8000968:	0d5b      	lsrs	r3, r3, #21
 800096a:	e7f1      	b.n	8000950 <__aeabi_ui2d+0x2c>
 800096c:	0000041e 	.word	0x0000041e

08000970 <__aeabi_d2f>:
 8000970:	0002      	movs	r2, r0
 8000972:	004b      	lsls	r3, r1, #1
 8000974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000976:	0308      	lsls	r0, r1, #12
 8000978:	0d5b      	lsrs	r3, r3, #21
 800097a:	4e3d      	ldr	r6, [pc, #244]	; (8000a70 <__aeabi_d2f+0x100>)
 800097c:	0fcc      	lsrs	r4, r1, #31
 800097e:	0a40      	lsrs	r0, r0, #9
 8000980:	0f51      	lsrs	r1, r2, #29
 8000982:	1c5f      	adds	r7, r3, #1
 8000984:	4308      	orrs	r0, r1
 8000986:	00d5      	lsls	r5, r2, #3
 8000988:	4237      	tst	r7, r6
 800098a:	d00a      	beq.n	80009a2 <__aeabi_d2f+0x32>
 800098c:	4939      	ldr	r1, [pc, #228]	; (8000a74 <__aeabi_d2f+0x104>)
 800098e:	185e      	adds	r6, r3, r1
 8000990:	2efe      	cmp	r6, #254	; 0xfe
 8000992:	dd16      	ble.n	80009c2 <__aeabi_d2f+0x52>
 8000994:	23ff      	movs	r3, #255	; 0xff
 8000996:	2100      	movs	r1, #0
 8000998:	05db      	lsls	r3, r3, #23
 800099a:	430b      	orrs	r3, r1
 800099c:	07e0      	lsls	r0, r4, #31
 800099e:	4318      	orrs	r0, r3
 80009a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d106      	bne.n	80009b4 <__aeabi_d2f+0x44>
 80009a6:	4328      	orrs	r0, r5
 80009a8:	d027      	beq.n	80009fa <__aeabi_d2f+0x8a>
 80009aa:	2105      	movs	r1, #5
 80009ac:	0189      	lsls	r1, r1, #6
 80009ae:	0a49      	lsrs	r1, r1, #9
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	e7f1      	b.n	8000998 <__aeabi_d2f+0x28>
 80009b4:	4305      	orrs	r5, r0
 80009b6:	d0ed      	beq.n	8000994 <__aeabi_d2f+0x24>
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	03c9      	lsls	r1, r1, #15
 80009bc:	23ff      	movs	r3, #255	; 0xff
 80009be:	4301      	orrs	r1, r0
 80009c0:	e7ea      	b.n	8000998 <__aeabi_d2f+0x28>
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	dd1c      	ble.n	8000a00 <__aeabi_d2f+0x90>
 80009c6:	0192      	lsls	r2, r2, #6
 80009c8:	0011      	movs	r1, r2
 80009ca:	1e4a      	subs	r2, r1, #1
 80009cc:	4191      	sbcs	r1, r2
 80009ce:	00c0      	lsls	r0, r0, #3
 80009d0:	0f6d      	lsrs	r5, r5, #29
 80009d2:	4301      	orrs	r1, r0
 80009d4:	4329      	orrs	r1, r5
 80009d6:	074b      	lsls	r3, r1, #29
 80009d8:	d048      	beq.n	8000a6c <__aeabi_d2f+0xfc>
 80009da:	230f      	movs	r3, #15
 80009dc:	400b      	ands	r3, r1
 80009de:	2b04      	cmp	r3, #4
 80009e0:	d000      	beq.n	80009e4 <__aeabi_d2f+0x74>
 80009e2:	3104      	adds	r1, #4
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	04db      	lsls	r3, r3, #19
 80009e8:	400b      	ands	r3, r1
 80009ea:	d03f      	beq.n	8000a6c <__aeabi_d2f+0xfc>
 80009ec:	1c72      	adds	r2, r6, #1
 80009ee:	2efe      	cmp	r6, #254	; 0xfe
 80009f0:	d0d0      	beq.n	8000994 <__aeabi_d2f+0x24>
 80009f2:	0189      	lsls	r1, r1, #6
 80009f4:	0a49      	lsrs	r1, r1, #9
 80009f6:	b2d3      	uxtb	r3, r2
 80009f8:	e7ce      	b.n	8000998 <__aeabi_d2f+0x28>
 80009fa:	2300      	movs	r3, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	e7cb      	b.n	8000998 <__aeabi_d2f+0x28>
 8000a00:	0032      	movs	r2, r6
 8000a02:	3217      	adds	r2, #23
 8000a04:	db22      	blt.n	8000a4c <__aeabi_d2f+0xdc>
 8000a06:	2180      	movs	r1, #128	; 0x80
 8000a08:	221e      	movs	r2, #30
 8000a0a:	0409      	lsls	r1, r1, #16
 8000a0c:	4308      	orrs	r0, r1
 8000a0e:	1b92      	subs	r2, r2, r6
 8000a10:	2a1f      	cmp	r2, #31
 8000a12:	dd1d      	ble.n	8000a50 <__aeabi_d2f+0xe0>
 8000a14:	2102      	movs	r1, #2
 8000a16:	4249      	negs	r1, r1
 8000a18:	1b8e      	subs	r6, r1, r6
 8000a1a:	0001      	movs	r1, r0
 8000a1c:	40f1      	lsrs	r1, r6
 8000a1e:	000e      	movs	r6, r1
 8000a20:	2a20      	cmp	r2, #32
 8000a22:	d004      	beq.n	8000a2e <__aeabi_d2f+0xbe>
 8000a24:	4a14      	ldr	r2, [pc, #80]	; (8000a78 <__aeabi_d2f+0x108>)
 8000a26:	4694      	mov	ip, r2
 8000a28:	4463      	add	r3, ip
 8000a2a:	4098      	lsls	r0, r3
 8000a2c:	4305      	orrs	r5, r0
 8000a2e:	0029      	movs	r1, r5
 8000a30:	1e4d      	subs	r5, r1, #1
 8000a32:	41a9      	sbcs	r1, r5
 8000a34:	4331      	orrs	r1, r6
 8000a36:	2600      	movs	r6, #0
 8000a38:	074b      	lsls	r3, r1, #29
 8000a3a:	d1ce      	bne.n	80009da <__aeabi_d2f+0x6a>
 8000a3c:	2080      	movs	r0, #128	; 0x80
 8000a3e:	000b      	movs	r3, r1
 8000a40:	04c0      	lsls	r0, r0, #19
 8000a42:	2201      	movs	r2, #1
 8000a44:	4003      	ands	r3, r0
 8000a46:	4201      	tst	r1, r0
 8000a48:	d1d3      	bne.n	80009f2 <__aeabi_d2f+0x82>
 8000a4a:	e7af      	b.n	80009ac <__aeabi_d2f+0x3c>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	e7ac      	b.n	80009aa <__aeabi_d2f+0x3a>
 8000a50:	490a      	ldr	r1, [pc, #40]	; (8000a7c <__aeabi_d2f+0x10c>)
 8000a52:	468c      	mov	ip, r1
 8000a54:	0029      	movs	r1, r5
 8000a56:	4463      	add	r3, ip
 8000a58:	40d1      	lsrs	r1, r2
 8000a5a:	409d      	lsls	r5, r3
 8000a5c:	000a      	movs	r2, r1
 8000a5e:	0029      	movs	r1, r5
 8000a60:	4098      	lsls	r0, r3
 8000a62:	1e4d      	subs	r5, r1, #1
 8000a64:	41a9      	sbcs	r1, r5
 8000a66:	4301      	orrs	r1, r0
 8000a68:	4311      	orrs	r1, r2
 8000a6a:	e7e4      	b.n	8000a36 <__aeabi_d2f+0xc6>
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	e79d      	b.n	80009ac <__aeabi_d2f+0x3c>
 8000a70:	000007fe 	.word	0x000007fe
 8000a74:	fffffc80 	.word	0xfffffc80
 8000a78:	fffffca2 	.word	0xfffffca2
 8000a7c:	fffffc82 	.word	0xfffffc82

08000a80 <__clzsi2>:
 8000a80:	211c      	movs	r1, #28
 8000a82:	2301      	movs	r3, #1
 8000a84:	041b      	lsls	r3, r3, #16
 8000a86:	4298      	cmp	r0, r3
 8000a88:	d301      	bcc.n	8000a8e <__clzsi2+0xe>
 8000a8a:	0c00      	lsrs	r0, r0, #16
 8000a8c:	3910      	subs	r1, #16
 8000a8e:	0a1b      	lsrs	r3, r3, #8
 8000a90:	4298      	cmp	r0, r3
 8000a92:	d301      	bcc.n	8000a98 <__clzsi2+0x18>
 8000a94:	0a00      	lsrs	r0, r0, #8
 8000a96:	3908      	subs	r1, #8
 8000a98:	091b      	lsrs	r3, r3, #4
 8000a9a:	4298      	cmp	r0, r3
 8000a9c:	d301      	bcc.n	8000aa2 <__clzsi2+0x22>
 8000a9e:	0900      	lsrs	r0, r0, #4
 8000aa0:	3904      	subs	r1, #4
 8000aa2:	a202      	add	r2, pc, #8	; (adr r2, 8000aac <__clzsi2+0x2c>)
 8000aa4:	5c10      	ldrb	r0, [r2, r0]
 8000aa6:	1840      	adds	r0, r0, r1
 8000aa8:	4770      	bx	lr
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	02020304 	.word	0x02020304
 8000ab0:	01010101 	.word	0x01010101
	...

08000abc <__divdi3>:
 8000abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000abe:	4657      	mov	r7, sl
 8000ac0:	464e      	mov	r6, r9
 8000ac2:	4645      	mov	r5, r8
 8000ac4:	46de      	mov	lr, fp
 8000ac6:	b5e0      	push	{r5, r6, r7, lr}
 8000ac8:	000f      	movs	r7, r1
 8000aca:	0019      	movs	r1, r3
 8000acc:	2300      	movs	r3, #0
 8000ace:	0006      	movs	r6, r0
 8000ad0:	4698      	mov	r8, r3
 8000ad2:	0010      	movs	r0, r2
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	2f00      	cmp	r7, #0
 8000ad8:	da07      	bge.n	8000aea <__divdi3+0x2e>
 8000ada:	0033      	movs	r3, r6
 8000adc:	003c      	movs	r4, r7
 8000ade:	2700      	movs	r7, #0
 8000ae0:	425e      	negs	r6, r3
 8000ae2:	41a7      	sbcs	r7, r4
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	425b      	negs	r3, r3
 8000ae8:	4698      	mov	r8, r3
 8000aea:	2900      	cmp	r1, #0
 8000aec:	da07      	bge.n	8000afe <__divdi3+0x42>
 8000aee:	4643      	mov	r3, r8
 8000af0:	43db      	mvns	r3, r3
 8000af2:	000c      	movs	r4, r1
 8000af4:	4698      	mov	r8, r3
 8000af6:	0003      	movs	r3, r0
 8000af8:	2100      	movs	r1, #0
 8000afa:	4258      	negs	r0, r3
 8000afc:	41a1      	sbcs	r1, r4
 8000afe:	0034      	movs	r4, r6
 8000b00:	003d      	movs	r5, r7
 8000b02:	4682      	mov	sl, r0
 8000b04:	4689      	mov	r9, r1
 8000b06:	42b9      	cmp	r1, r7
 8000b08:	d86a      	bhi.n	8000be0 <__divdi3+0x124>
 8000b0a:	d067      	beq.n	8000bdc <__divdi3+0x120>
 8000b0c:	4649      	mov	r1, r9
 8000b0e:	4650      	mov	r0, sl
 8000b10:	f000 f8ba 	bl	8000c88 <__clzdi2>
 8000b14:	4683      	mov	fp, r0
 8000b16:	0039      	movs	r1, r7
 8000b18:	0030      	movs	r0, r6
 8000b1a:	f000 f8b5 	bl	8000c88 <__clzdi2>
 8000b1e:	465b      	mov	r3, fp
 8000b20:	1a1b      	subs	r3, r3, r0
 8000b22:	469c      	mov	ip, r3
 8000b24:	3b20      	subs	r3, #32
 8000b26:	469b      	mov	fp, r3
 8000b28:	d46b      	bmi.n	8000c02 <__divdi3+0x146>
 8000b2a:	4658      	mov	r0, fp
 8000b2c:	4651      	mov	r1, sl
 8000b2e:	4081      	lsls	r1, r0
 8000b30:	4660      	mov	r0, ip
 8000b32:	000b      	movs	r3, r1
 8000b34:	4651      	mov	r1, sl
 8000b36:	4081      	lsls	r1, r0
 8000b38:	000a      	movs	r2, r1
 8000b3a:	42bb      	cmp	r3, r7
 8000b3c:	d900      	bls.n	8000b40 <__divdi3+0x84>
 8000b3e:	e072      	b.n	8000c26 <__divdi3+0x16a>
 8000b40:	42bb      	cmp	r3, r7
 8000b42:	d100      	bne.n	8000b46 <__divdi3+0x8a>
 8000b44:	e079      	b.n	8000c3a <__divdi3+0x17e>
 8000b46:	0034      	movs	r4, r6
 8000b48:	003d      	movs	r5, r7
 8000b4a:	4659      	mov	r1, fp
 8000b4c:	1aa4      	subs	r4, r4, r2
 8000b4e:	419d      	sbcs	r5, r3
 8000b50:	2900      	cmp	r1, #0
 8000b52:	da00      	bge.n	8000b56 <__divdi3+0x9a>
 8000b54:	e074      	b.n	8000c40 <__divdi3+0x184>
 8000b56:	2100      	movs	r1, #0
 8000b58:	2000      	movs	r0, #0
 8000b5a:	2601      	movs	r6, #1
 8000b5c:	9000      	str	r0, [sp, #0]
 8000b5e:	9101      	str	r1, [sp, #4]
 8000b60:	4659      	mov	r1, fp
 8000b62:	408e      	lsls	r6, r1
 8000b64:	9601      	str	r6, [sp, #4]
 8000b66:	4661      	mov	r1, ip
 8000b68:	2601      	movs	r6, #1
 8000b6a:	408e      	lsls	r6, r1
 8000b6c:	4661      	mov	r1, ip
 8000b6e:	9600      	str	r6, [sp, #0]
 8000b70:	2900      	cmp	r1, #0
 8000b72:	d05f      	beq.n	8000c34 <__divdi3+0x178>
 8000b74:	07d9      	lsls	r1, r3, #31
 8000b76:	0856      	lsrs	r6, r2, #1
 8000b78:	430e      	orrs	r6, r1
 8000b7a:	085f      	lsrs	r7, r3, #1
 8000b7c:	4661      	mov	r1, ip
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2300      	movs	r3, #0
 8000b82:	e00c      	b.n	8000b9e <__divdi3+0xe2>
 8000b84:	42af      	cmp	r7, r5
 8000b86:	d101      	bne.n	8000b8c <__divdi3+0xd0>
 8000b88:	42a6      	cmp	r6, r4
 8000b8a:	d80a      	bhi.n	8000ba2 <__divdi3+0xe6>
 8000b8c:	1ba4      	subs	r4, r4, r6
 8000b8e:	41bd      	sbcs	r5, r7
 8000b90:	1924      	adds	r4, r4, r4
 8000b92:	416d      	adcs	r5, r5
 8000b94:	3901      	subs	r1, #1
 8000b96:	18a4      	adds	r4, r4, r2
 8000b98:	415d      	adcs	r5, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d006      	beq.n	8000bac <__divdi3+0xf0>
 8000b9e:	42af      	cmp	r7, r5
 8000ba0:	d9f0      	bls.n	8000b84 <__divdi3+0xc8>
 8000ba2:	3901      	subs	r1, #1
 8000ba4:	1924      	adds	r4, r4, r4
 8000ba6:	416d      	adcs	r5, r5
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	d1f8      	bne.n	8000b9e <__divdi3+0xe2>
 8000bac:	9800      	ldr	r0, [sp, #0]
 8000bae:	9901      	ldr	r1, [sp, #4]
 8000bb0:	465b      	mov	r3, fp
 8000bb2:	1900      	adds	r0, r0, r4
 8000bb4:	4169      	adcs	r1, r5
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	db4d      	blt.n	8000c56 <__divdi3+0x19a>
 8000bba:	002e      	movs	r6, r5
 8000bbc:	002c      	movs	r4, r5
 8000bbe:	40de      	lsrs	r6, r3
 8000bc0:	4663      	mov	r3, ip
 8000bc2:	40dc      	lsrs	r4, r3
 8000bc4:	465b      	mov	r3, fp
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db55      	blt.n	8000c76 <__divdi3+0x1ba>
 8000bca:	0034      	movs	r4, r6
 8000bcc:	409c      	lsls	r4, r3
 8000bce:	0023      	movs	r3, r4
 8000bd0:	4664      	mov	r4, ip
 8000bd2:	40a6      	lsls	r6, r4
 8000bd4:	0032      	movs	r2, r6
 8000bd6:	1a80      	subs	r0, r0, r2
 8000bd8:	4199      	sbcs	r1, r3
 8000bda:	e003      	b.n	8000be4 <__divdi3+0x128>
 8000bdc:	42b0      	cmp	r0, r6
 8000bde:	d995      	bls.n	8000b0c <__divdi3+0x50>
 8000be0:	2000      	movs	r0, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	4643      	mov	r3, r8
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d004      	beq.n	8000bf4 <__divdi3+0x138>
 8000bea:	0003      	movs	r3, r0
 8000bec:	000c      	movs	r4, r1
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4258      	negs	r0, r3
 8000bf2:	41a1      	sbcs	r1, r4
 8000bf4:	b003      	add	sp, #12
 8000bf6:	bcf0      	pop	{r4, r5, r6, r7}
 8000bf8:	46bb      	mov	fp, r7
 8000bfa:	46b2      	mov	sl, r6
 8000bfc:	46a9      	mov	r9, r5
 8000bfe:	46a0      	mov	r8, r4
 8000c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c02:	4662      	mov	r2, ip
 8000c04:	4648      	mov	r0, r9
 8000c06:	2320      	movs	r3, #32
 8000c08:	4651      	mov	r1, sl
 8000c0a:	4090      	lsls	r0, r2
 8000c0c:	1a9b      	subs	r3, r3, r2
 8000c0e:	40d9      	lsrs	r1, r3
 8000c10:	0003      	movs	r3, r0
 8000c12:	9100      	str	r1, [sp, #0]
 8000c14:	9900      	ldr	r1, [sp, #0]
 8000c16:	4660      	mov	r0, ip
 8000c18:	430b      	orrs	r3, r1
 8000c1a:	4651      	mov	r1, sl
 8000c1c:	4081      	lsls	r1, r0
 8000c1e:	000a      	movs	r2, r1
 8000c20:	42bb      	cmp	r3, r7
 8000c22:	d800      	bhi.n	8000c26 <__divdi3+0x16a>
 8000c24:	e78c      	b.n	8000b40 <__divdi3+0x84>
 8000c26:	2100      	movs	r1, #0
 8000c28:	2000      	movs	r0, #0
 8000c2a:	9000      	str	r0, [sp, #0]
 8000c2c:	9101      	str	r1, [sp, #4]
 8000c2e:	4661      	mov	r1, ip
 8000c30:	2900      	cmp	r1, #0
 8000c32:	d19f      	bne.n	8000b74 <__divdi3+0xb8>
 8000c34:	9800      	ldr	r0, [sp, #0]
 8000c36:	9901      	ldr	r1, [sp, #4]
 8000c38:	e7d4      	b.n	8000be4 <__divdi3+0x128>
 8000c3a:	42b1      	cmp	r1, r6
 8000c3c:	d8f3      	bhi.n	8000c26 <__divdi3+0x16a>
 8000c3e:	e782      	b.n	8000b46 <__divdi3+0x8a>
 8000c40:	4661      	mov	r1, ip
 8000c42:	2620      	movs	r6, #32
 8000c44:	2701      	movs	r7, #1
 8000c46:	1a76      	subs	r6, r6, r1
 8000c48:	2000      	movs	r0, #0
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	40f7      	lsrs	r7, r6
 8000c4e:	9000      	str	r0, [sp, #0]
 8000c50:	9101      	str	r1, [sp, #4]
 8000c52:	9701      	str	r7, [sp, #4]
 8000c54:	e787      	b.n	8000b66 <__divdi3+0xaa>
 8000c56:	4662      	mov	r2, ip
 8000c58:	2320      	movs	r3, #32
 8000c5a:	1a9b      	subs	r3, r3, r2
 8000c5c:	002a      	movs	r2, r5
 8000c5e:	409a      	lsls	r2, r3
 8000c60:	0026      	movs	r6, r4
 8000c62:	0013      	movs	r3, r2
 8000c64:	4662      	mov	r2, ip
 8000c66:	40d6      	lsrs	r6, r2
 8000c68:	002c      	movs	r4, r5
 8000c6a:	431e      	orrs	r6, r3
 8000c6c:	4663      	mov	r3, ip
 8000c6e:	40dc      	lsrs	r4, r3
 8000c70:	465b      	mov	r3, fp
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	daa9      	bge.n	8000bca <__divdi3+0x10e>
 8000c76:	4662      	mov	r2, ip
 8000c78:	2320      	movs	r3, #32
 8000c7a:	0035      	movs	r5, r6
 8000c7c:	4094      	lsls	r4, r2
 8000c7e:	1a9b      	subs	r3, r3, r2
 8000c80:	40dd      	lsrs	r5, r3
 8000c82:	0023      	movs	r3, r4
 8000c84:	432b      	orrs	r3, r5
 8000c86:	e7a3      	b.n	8000bd0 <__divdi3+0x114>

08000c88 <__clzdi2>:
 8000c88:	b510      	push	{r4, lr}
 8000c8a:	2900      	cmp	r1, #0
 8000c8c:	d103      	bne.n	8000c96 <__clzdi2+0xe>
 8000c8e:	f7ff fef7 	bl	8000a80 <__clzsi2>
 8000c92:	3020      	adds	r0, #32
 8000c94:	e002      	b.n	8000c9c <__clzdi2+0x14>
 8000c96:	1c08      	adds	r0, r1, #0
 8000c98:	f7ff fef2 	bl	8000a80 <__clzsi2>
 8000c9c:	bd10      	pop	{r4, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)

08000ca0 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08c      	sub	sp, #48	; 0x30
 8000ca4:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000ca6:	486d      	ldr	r0, [pc, #436]	; (8000e5c <TrimRead+0x1bc>)
 8000ca8:	2301      	movs	r3, #1
 8000caa:	425b      	negs	r3, r3
 8000cac:	9302      	str	r3, [sp, #8]
 8000cae:	2319      	movs	r3, #25
 8000cb0:	9301      	str	r3, [sp, #4]
 8000cb2:	003b      	movs	r3, r7
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	2288      	movs	r2, #136	; 0x88
 8000cba:	21ec      	movs	r1, #236	; 0xec
 8000cbc:	f001 fc1a 	bl	80024f4 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8000cc0:	003b      	movs	r3, r7
 8000cc2:	3319      	adds	r3, #25
 8000cc4:	4865      	ldr	r0, [pc, #404]	; (8000e5c <TrimRead+0x1bc>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	9202      	str	r2, [sp, #8]
 8000ccc:	2207      	movs	r2, #7
 8000cce:	9201      	str	r2, [sp, #4]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	22e1      	movs	r2, #225	; 0xe1
 8000cd6:	21ec      	movs	r1, #236	; 0xec
 8000cd8:	f001 fc0c 	bl	80024f4 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8000cdc:	003b      	movs	r3, r7
 8000cde:	785b      	ldrb	r3, [r3, #1]
 8000ce0:	021b      	lsls	r3, r3, #8
 8000ce2:	b21a      	sxth	r2, r3
 8000ce4:	003b      	movs	r3, r7
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b21b      	sxth	r3, r3
 8000cea:	4313      	orrs	r3, r2
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	4b5b      	ldr	r3, [pc, #364]	; (8000e60 <TrimRead+0x1c0>)
 8000cf2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8000cf4:	003b      	movs	r3, r7
 8000cf6:	78db      	ldrb	r3, [r3, #3]
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	003b      	movs	r3, r7
 8000cfe:	789b      	ldrb	r3, [r3, #2]
 8000d00:	b21b      	sxth	r3, r3
 8000d02:	4313      	orrs	r3, r2
 8000d04:	b21a      	sxth	r2, r3
 8000d06:	4b57      	ldr	r3, [pc, #348]	; (8000e64 <TrimRead+0x1c4>)
 8000d08:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8000d0a:	003b      	movs	r3, r7
 8000d0c:	795b      	ldrb	r3, [r3, #5]
 8000d0e:	021b      	lsls	r3, r3, #8
 8000d10:	b21a      	sxth	r2, r3
 8000d12:	003b      	movs	r3, r7
 8000d14:	791b      	ldrb	r3, [r3, #4]
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	b21a      	sxth	r2, r3
 8000d1c:	4b52      	ldr	r3, [pc, #328]	; (8000e68 <TrimRead+0x1c8>)
 8000d1e:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8000d20:	003b      	movs	r3, r7
 8000d22:	79db      	ldrb	r3, [r3, #7]
 8000d24:	021b      	lsls	r3, r3, #8
 8000d26:	b21a      	sxth	r2, r3
 8000d28:	003b      	movs	r3, r7
 8000d2a:	795b      	ldrb	r3, [r3, #5]
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	b21b      	sxth	r3, r3
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	4b4d      	ldr	r3, [pc, #308]	; (8000e6c <TrimRead+0x1cc>)
 8000d36:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8000d38:	003b      	movs	r3, r7
 8000d3a:	7a5b      	ldrb	r3, [r3, #9]
 8000d3c:	021b      	lsls	r3, r3, #8
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	003b      	movs	r3, r7
 8000d42:	799b      	ldrb	r3, [r3, #6]
 8000d44:	b21b      	sxth	r3, r3
 8000d46:	4313      	orrs	r3, r2
 8000d48:	b21a      	sxth	r2, r3
 8000d4a:	4b49      	ldr	r3, [pc, #292]	; (8000e70 <TrimRead+0x1d0>)
 8000d4c:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8000d4e:	003b      	movs	r3, r7
 8000d50:	7adb      	ldrb	r3, [r3, #11]
 8000d52:	021b      	lsls	r3, r3, #8
 8000d54:	b21a      	sxth	r2, r3
 8000d56:	003b      	movs	r3, r7
 8000d58:	7a9b      	ldrb	r3, [r3, #10]
 8000d5a:	b21b      	sxth	r3, r3
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	4b44      	ldr	r3, [pc, #272]	; (8000e74 <TrimRead+0x1d4>)
 8000d62:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8000d64:	003b      	movs	r3, r7
 8000d66:	7b5b      	ldrb	r3, [r3, #13]
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	003b      	movs	r3, r7
 8000d6e:	7b1b      	ldrb	r3, [r3, #12]
 8000d70:	b21b      	sxth	r3, r3
 8000d72:	4313      	orrs	r3, r2
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	4b40      	ldr	r3, [pc, #256]	; (8000e78 <TrimRead+0x1d8>)
 8000d78:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8000d7a:	003b      	movs	r3, r7
 8000d7c:	7bdb      	ldrb	r3, [r3, #15]
 8000d7e:	021b      	lsls	r3, r3, #8
 8000d80:	b21a      	sxth	r2, r3
 8000d82:	003b      	movs	r3, r7
 8000d84:	7b9b      	ldrb	r3, [r3, #14]
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	b21a      	sxth	r2, r3
 8000d8c:	4b3b      	ldr	r3, [pc, #236]	; (8000e7c <TrimRead+0x1dc>)
 8000d8e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8000d90:	003b      	movs	r3, r7
 8000d92:	7c5b      	ldrb	r3, [r3, #17]
 8000d94:	021b      	lsls	r3, r3, #8
 8000d96:	b21a      	sxth	r2, r3
 8000d98:	003b      	movs	r3, r7
 8000d9a:	7c1b      	ldrb	r3, [r3, #16]
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	b21a      	sxth	r2, r3
 8000da2:	4b37      	ldr	r3, [pc, #220]	; (8000e80 <TrimRead+0x1e0>)
 8000da4:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8000da6:	003b      	movs	r3, r7
 8000da8:	7cdb      	ldrb	r3, [r3, #19]
 8000daa:	021b      	lsls	r3, r3, #8
 8000dac:	b21a      	sxth	r2, r3
 8000dae:	003b      	movs	r3, r7
 8000db0:	7c9b      	ldrb	r3, [r3, #18]
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	4313      	orrs	r3, r2
 8000db6:	b21a      	sxth	r2, r3
 8000db8:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <TrimRead+0x1e4>)
 8000dba:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8000dbc:	003b      	movs	r3, r7
 8000dbe:	7d5b      	ldrb	r3, [r3, #21]
 8000dc0:	021b      	lsls	r3, r3, #8
 8000dc2:	b21a      	sxth	r2, r3
 8000dc4:	003b      	movs	r3, r7
 8000dc6:	7d1b      	ldrb	r3, [r3, #20]
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	b21a      	sxth	r2, r3
 8000dce:	4b2e      	ldr	r3, [pc, #184]	; (8000e88 <TrimRead+0x1e8>)
 8000dd0:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8000dd2:	003b      	movs	r3, r7
 8000dd4:	7ddb      	ldrb	r3, [r3, #23]
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	b21a      	sxth	r2, r3
 8000dda:	003b      	movs	r3, r7
 8000ddc:	7d9b      	ldrb	r3, [r3, #22]
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b21a      	sxth	r2, r3
 8000de4:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <TrimRead+0x1ec>)
 8000de6:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8000de8:	003b      	movs	r3, r7
 8000dea:	7e1b      	ldrb	r3, [r3, #24]
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <TrimRead+0x1f0>)
 8000df0:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8000df2:	003b      	movs	r3, r7
 8000df4:	7e9b      	ldrb	r3, [r3, #26]
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	7e5b      	ldrb	r3, [r3, #25]
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b21a      	sxth	r2, r3
 8000e04:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <TrimRead+0x1f4>)
 8000e06:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8000e08:	003b      	movs	r3, r7
 8000e0a:	7edb      	ldrb	r3, [r3, #27]
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <TrimRead+0x1f8>)
 8000e10:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8000e12:	003b      	movs	r3, r7
 8000e14:	7f1b      	ldrb	r3, [r3, #28]
 8000e16:	011b      	lsls	r3, r3, #4
 8000e18:	b21a      	sxth	r2, r3
 8000e1a:	003b      	movs	r3, r7
 8000e1c:	7f5b      	ldrb	r3, [r3, #29]
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	210f      	movs	r1, #15
 8000e22:	400b      	ands	r3, r1
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <TrimRead+0x1fc>)
 8000e2c:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8000e2e:	003b      	movs	r3, r7
 8000e30:	7f9b      	ldrb	r3, [r3, #30]
 8000e32:	011b      	lsls	r3, r3, #4
 8000e34:	b21a      	sxth	r2, r3
 8000e36:	003b      	movs	r3, r7
 8000e38:	7f5b      	ldrb	r3, [r3, #29]
 8000e3a:	091b      	lsrs	r3, r3, #4
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <TrimRead+0x200>)
 8000e46:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8000e48:	003b      	movs	r3, r7
 8000e4a:	7fdb      	ldrb	r3, [r3, #31]
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <TrimRead+0x204>)
 8000e50:	801a      	strh	r2, [r3, #0]
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b008      	add	sp, #32
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	2000008c 	.word	0x2000008c
 8000e60:	2000002a 	.word	0x2000002a
 8000e64:	2000002e 	.word	0x2000002e
 8000e68:	2000004e 	.word	0x2000004e
 8000e6c:	20000040 	.word	0x20000040
 8000e70:	20000032 	.word	0x20000032
 8000e74:	20000042 	.word	0x20000042
 8000e78:	20000034 	.word	0x20000034
 8000e7c:	20000038 	.word	0x20000038
 8000e80:	20000074 	.word	0x20000074
 8000e84:	20000028 	.word	0x20000028
 8000e88:	20000044 	.word	0x20000044
 8000e8c:	2000004c 	.word	0x2000004c
 8000e90:	20000030 	.word	0x20000030
 8000e94:	2000007c 	.word	0x2000007c
 8000e98:	2000004a 	.word	0x2000004a
 8000e9c:	2000002c 	.word	0x2000002c
 8000ea0:	20000046 	.word	0x20000046
 8000ea4:	20000036 	.word	0x20000036

08000ea8 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af04      	add	r7, sp, #16
 8000eae:	0005      	movs	r5, r0
 8000eb0:	000c      	movs	r4, r1
 8000eb2:	0010      	movs	r0, r2
 8000eb4:	0019      	movs	r1, r3
 8000eb6:	1dfb      	adds	r3, r7, #7
 8000eb8:	1c2a      	adds	r2, r5, #0
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	1dbb      	adds	r3, r7, #6
 8000ebe:	1c22      	adds	r2, r4, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
 8000ec2:	1d7b      	adds	r3, r7, #5
 8000ec4:	1c02      	adds	r2, r0, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	1c0a      	adds	r2, r1, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
	// Read the Trimming parameters
	TrimRead();
 8000ece:	f7ff fee7 	bl	8000ca0 <TrimRead>


	uint8_t datatowrite = 0;
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
	uint8_t datacheck = 0;
 8000eda:	230e      	movs	r3, #14
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	22b6      	movs	r2, #182	; 0xb6
 8000ee6:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000ee8:	4864      	ldr	r0, [pc, #400]	; (800107c <BME280_Config+0x1d4>)
 8000eea:	23fa      	movs	r3, #250	; 0xfa
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	22e0      	movs	r2, #224	; 0xe0
 8000efc:	21ec      	movs	r1, #236	; 0xec
 8000efe:	f001 f9cb 	bl	8002298 <HAL_I2C_Mem_Write>
 8000f02:	1e03      	subs	r3, r0, #0
 8000f04:	d002      	beq.n	8000f0c <BME280_Config+0x64>
	{
		return -1;
 8000f06:	2301      	movs	r3, #1
 8000f08:	425b      	negs	r3, r3
 8000f0a:	e0b2      	b.n	8001072 <BME280_Config+0x1ca>
	}

	HAL_Delay (100);
 8000f0c:	2064      	movs	r0, #100	; 0x64
 8000f0e:	f000 fec7 	bl	8001ca0 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8000f12:	210f      	movs	r1, #15
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	1d7a      	adds	r2, r7, #5
 8000f18:	7812      	ldrb	r2, [r2, #0]
 8000f1a:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000f1c:	4857      	ldr	r0, [pc, #348]	; (800107c <BME280_Config+0x1d4>)
 8000f1e:	23fa      	movs	r3, #250	; 0xfa
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	9302      	str	r3, [sp, #8]
 8000f24:	2301      	movs	r3, #1
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	22f2      	movs	r2, #242	; 0xf2
 8000f30:	21ec      	movs	r1, #236	; 0xec
 8000f32:	f001 f9b1 	bl	8002298 <HAL_I2C_Mem_Write>
 8000f36:	1e03      	subs	r3, r0, #0
 8000f38:	d002      	beq.n	8000f40 <BME280_Config+0x98>
	{
		return -1;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	425b      	negs	r3, r3
 8000f3e:	e098      	b.n	8001072 <BME280_Config+0x1ca>
	}
	HAL_Delay (100);
 8000f40:	2064      	movs	r0, #100	; 0x64
 8000f42:	f000 fead 	bl	8001ca0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8000f46:	484d      	ldr	r0, [pc, #308]	; (800107c <BME280_Config+0x1d4>)
 8000f48:	23fa      	movs	r3, #250	; 0xfa
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	9302      	str	r3, [sp, #8]
 8000f4e:	2301      	movs	r3, #1
 8000f50:	9301      	str	r3, [sp, #4]
 8000f52:	240e      	movs	r4, #14
 8000f54:	193b      	adds	r3, r7, r4
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	22f2      	movs	r2, #242	; 0xf2
 8000f5c:	21ec      	movs	r1, #236	; 0xec
 8000f5e:	f001 fac9 	bl	80024f4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8000f62:	193b      	adds	r3, r7, r4
 8000f64:	781a      	ldrb	r2, [r3, #0]
 8000f66:	230f      	movs	r3, #15
 8000f68:	18fb      	adds	r3, r7, r3
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d002      	beq.n	8000f76 <BME280_Config+0xce>
	{
		return -1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	425b      	negs	r3, r3
 8000f74:	e07d      	b.n	8001072 <BME280_Config+0x1ca>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8000f76:	2320      	movs	r3, #32
 8000f78:	18fb      	adds	r3, r7, r3
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	015b      	lsls	r3, r3, #5
 8000f7e:	b25a      	sxtb	r2, r3
 8000f80:	2324      	movs	r3, #36	; 0x24
 8000f82:	18fb      	adds	r3, r7, r3
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	210f      	movs	r1, #15
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000f96:	4839      	ldr	r0, [pc, #228]	; (800107c <BME280_Config+0x1d4>)
 8000f98:	23fa      	movs	r3, #250	; 0xfa
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	22f5      	movs	r2, #245	; 0xf5
 8000faa:	21ec      	movs	r1, #236	; 0xec
 8000fac:	f001 f974 	bl	8002298 <HAL_I2C_Mem_Write>
 8000fb0:	1e03      	subs	r3, r0, #0
 8000fb2:	d002      	beq.n	8000fba <BME280_Config+0x112>
	{
		return -1;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	425b      	negs	r3, r3
 8000fb8:	e05b      	b.n	8001072 <BME280_Config+0x1ca>
	}
	HAL_Delay (100);
 8000fba:	2064      	movs	r0, #100	; 0x64
 8000fbc:	f000 fe70 	bl	8001ca0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8000fc0:	482e      	ldr	r0, [pc, #184]	; (800107c <BME280_Config+0x1d4>)
 8000fc2:	23fa      	movs	r3, #250	; 0xfa
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	9302      	str	r3, [sp, #8]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	240e      	movs	r4, #14
 8000fce:	193b      	adds	r3, r7, r4
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	22f5      	movs	r2, #245	; 0xf5
 8000fd6:	21ec      	movs	r1, #236	; 0xec
 8000fd8:	f001 fa8c 	bl	80024f4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8000fdc:	193b      	adds	r3, r7, r4
 8000fde:	781a      	ldrb	r2, [r3, #0]
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	18fb      	adds	r3, r7, r3
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d002      	beq.n	8000ff0 <BME280_Config+0x148>
	{
		return -1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	425b      	negs	r3, r3
 8000fee:	e040      	b.n	8001072 <BME280_Config+0x1ca>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8000ff0:	1dfb      	adds	r3, r7, #7
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	015b      	lsls	r3, r3, #5
 8000ff6:	b25a      	sxtb	r2, r3
 8000ff8:	1dbb      	adds	r3, r7, #6
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	b25b      	sxtb	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b25a      	sxtb	r2, r3
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b25b      	sxtb	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b25b      	sxtb	r3, r3
 800100e:	b2da      	uxtb	r2, r3
 8001010:	210f      	movs	r1, #15
 8001012:	187b      	adds	r3, r7, r1
 8001014:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001016:	4819      	ldr	r0, [pc, #100]	; (800107c <BME280_Config+0x1d4>)
 8001018:	23fa      	movs	r3, #250	; 0xfa
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	2301      	movs	r3, #1
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	187b      	adds	r3, r7, r1
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	22f4      	movs	r2, #244	; 0xf4
 800102a:	21ec      	movs	r1, #236	; 0xec
 800102c:	f001 f934 	bl	8002298 <HAL_I2C_Mem_Write>
 8001030:	1e03      	subs	r3, r0, #0
 8001032:	d002      	beq.n	800103a <BME280_Config+0x192>
	{
		return -1;
 8001034:	2301      	movs	r3, #1
 8001036:	425b      	negs	r3, r3
 8001038:	e01b      	b.n	8001072 <BME280_Config+0x1ca>
	}
	HAL_Delay (100);
 800103a:	2064      	movs	r0, #100	; 0x64
 800103c:	f000 fe30 	bl	8001ca0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8001040:	480e      	ldr	r0, [pc, #56]	; (800107c <BME280_Config+0x1d4>)
 8001042:	23fa      	movs	r3, #250	; 0xfa
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2301      	movs	r3, #1
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	240e      	movs	r4, #14
 800104e:	193b      	adds	r3, r7, r4
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	22f4      	movs	r2, #244	; 0xf4
 8001056:	21ec      	movs	r1, #236	; 0xec
 8001058:	f001 fa4c 	bl	80024f4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800105c:	193b      	adds	r3, r7, r4
 800105e:	781a      	ldrb	r2, [r3, #0]
 8001060:	230f      	movs	r3, #15
 8001062:	18fb      	adds	r3, r7, r3
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	d002      	beq.n	8001070 <BME280_Config+0x1c8>
	{
		return -1;
 800106a:	2301      	movs	r3, #1
 800106c:	425b      	negs	r3, r3
 800106e:	e000      	b.n	8001072 <BME280_Config+0x1ca>
	}

	return 0;
 8001070:	2300      	movs	r3, #0
}
 8001072:	0018      	movs	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	b004      	add	sp, #16
 8001078:	bdb0      	pop	{r4, r5, r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	2000008c 	.word	0x2000008c

08001080 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8001086:	4825      	ldr	r0, [pc, #148]	; (800111c <BMEReadRaw+0x9c>)
 8001088:	23fa      	movs	r3, #250	; 0xfa
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	2301      	movs	r3, #1
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	4b23      	ldr	r3, [pc, #140]	; (8001120 <BMEReadRaw+0xa0>)
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2301      	movs	r3, #1
 8001098:	22d0      	movs	r2, #208	; 0xd0
 800109a:	21ec      	movs	r1, #236	; 0xec
 800109c:	f001 fa2a 	bl	80024f4 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 80010a0:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <BMEReadRaw+0xa0>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b60      	cmp	r3, #96	; 0x60
 80010a6:	d132      	bne.n	800110e <BMEReadRaw+0x8e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 80010a8:	481c      	ldr	r0, [pc, #112]	; (800111c <BMEReadRaw+0x9c>)
 80010aa:	2301      	movs	r3, #1
 80010ac:	425b      	negs	r3, r3
 80010ae:	9302      	str	r3, [sp, #8]
 80010b0:	2308      	movs	r3, #8
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	003b      	movs	r3, r7
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2301      	movs	r3, #1
 80010ba:	22f7      	movs	r2, #247	; 0xf7
 80010bc:	21ec      	movs	r1, #236	; 0xec
 80010be:	f001 fa19 	bl	80024f4 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80010c2:	003b      	movs	r3, r7
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	031a      	lsls	r2, r3, #12
 80010c8:	003b      	movs	r3, r7
 80010ca:	785b      	ldrb	r3, [r3, #1]
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	4313      	orrs	r3, r2
 80010d0:	003a      	movs	r2, r7
 80010d2:	7892      	ldrb	r2, [r2, #2]
 80010d4:	0912      	lsrs	r2, r2, #4
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	431a      	orrs	r2, r3
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <BMEReadRaw+0xa4>)
 80010dc:	601a      	str	r2, [r3, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80010de:	003b      	movs	r3, r7
 80010e0:	78db      	ldrb	r3, [r3, #3]
 80010e2:	031a      	lsls	r2, r3, #12
 80010e4:	003b      	movs	r3, r7
 80010e6:	791b      	ldrb	r3, [r3, #4]
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	4313      	orrs	r3, r2
 80010ec:	003a      	movs	r2, r7
 80010ee:	7952      	ldrb	r2, [r2, #5]
 80010f0:	0912      	lsrs	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	431a      	orrs	r2, r3
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <BMEReadRaw+0xa8>)
 80010f8:	601a      	str	r2, [r3, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80010fa:	003b      	movs	r3, r7
 80010fc:	799b      	ldrb	r3, [r3, #6]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	003a      	movs	r2, r7
 8001102:	79d2      	ldrb	r2, [r2, #7]
 8001104:	431a      	orrs	r2, r3
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <BMEReadRaw+0xac>)
 8001108:	601a      	str	r2, [r3, #0]

		return 0;
 800110a:	2300      	movs	r3, #0
 800110c:	e001      	b.n	8001112 <BMEReadRaw+0x92>
	}

	else return -1;
 800110e:	2301      	movs	r3, #1
 8001110:	425b      	negs	r3, r3
}
 8001112:	0018      	movs	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	b002      	add	sp, #8
 8001118:	bd80      	pop	{r7, pc}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	2000008c 	.word	0x2000008c
 8001120:	20000048 	.word	0x20000048
 8001124:	20000078 	.word	0x20000078
 8001128:	2000003c 	.word	0x2000003c
 800112c:	20000084 	.word	0x20000084

08001130 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	10da      	asrs	r2, r3, #3
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <BME280_compensate_T_int32+0x68>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	4a15      	ldr	r2, [pc, #84]	; (800119c <BME280_compensate_T_int32+0x6c>)
 8001146:	2100      	movs	r1, #0
 8001148:	5e52      	ldrsh	r2, [r2, r1]
 800114a:	4353      	muls	r3, r2
 800114c:	12db      	asrs	r3, r3, #11
 800114e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	111b      	asrs	r3, r3, #4
 8001154:	4a10      	ldr	r2, [pc, #64]	; (8001198 <BME280_compensate_T_int32+0x68>)
 8001156:	8812      	ldrh	r2, [r2, #0]
 8001158:	1a9b      	subs	r3, r3, r2
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	1112      	asrs	r2, r2, #4
 800115e:	490e      	ldr	r1, [pc, #56]	; (8001198 <BME280_compensate_T_int32+0x68>)
 8001160:	8809      	ldrh	r1, [r1, #0]
 8001162:	1a52      	subs	r2, r2, r1
 8001164:	4353      	muls	r3, r2
 8001166:	131b      	asrs	r3, r3, #12
 8001168:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <BME280_compensate_T_int32+0x70>)
 800116a:	2100      	movs	r1, #0
 800116c:	5e52      	ldrsh	r2, [r2, r1]
 800116e:	4353      	muls	r3, r2
 8001170:	139b      	asrs	r3, r3, #14
 8001172:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	18d2      	adds	r2, r2, r3
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <BME280_compensate_T_int32+0x74>)
 800117c:	601a      	str	r2, [r3, #0]
	T = (t_fine * 5 + 128) >> 8;
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <BME280_compensate_T_int32+0x74>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	0013      	movs	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	189b      	adds	r3, r3, r2
 8001188:	3380      	adds	r3, #128	; 0x80
 800118a:	121b      	asrs	r3, r3, #8
 800118c:	60fb      	str	r3, [r7, #12]
	return T;
 800118e:	68fb      	ldr	r3, [r7, #12]
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	b006      	add	sp, #24
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2000002a 	.word	0x2000002a
 800119c:	2000002e 	.word	0x2000002e
 80011a0:	2000004e 	.word	0x2000004e
 80011a4:	20000080 	.word	0x20000080

080011a8 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 80011a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011aa:	b0ad      	sub	sp, #180	; 0xb4
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	2394      	movs	r3, #148	; 0x94
 80011b0:	18fb      	adds	r3, r7, r3
 80011b2:	6018      	str	r0, [r3, #0]
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80011b4:	4bc6      	ldr	r3, [pc, #792]	; (80014d0 <BME280_compensate_P_int64+0x328>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	001c      	movs	r4, r3
 80011ba:	17db      	asrs	r3, r3, #31
 80011bc:	001d      	movs	r5, r3
 80011be:	4ac5      	ldr	r2, [pc, #788]	; (80014d4 <BME280_compensate_P_int64+0x32c>)
 80011c0:	2301      	movs	r3, #1
 80011c2:	425b      	negs	r3, r3
 80011c4:	1912      	adds	r2, r2, r4
 80011c6:	416b      	adcs	r3, r5
 80011c8:	24a8      	movs	r4, #168	; 0xa8
 80011ca:	1939      	adds	r1, r7, r4
 80011cc:	600a      	str	r2, [r1, #0]
 80011ce:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t)dig_P6;
 80011d0:	193b      	adds	r3, r7, r4
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	1939      	adds	r1, r7, r4
 80011d8:	6808      	ldr	r0, [r1, #0]
 80011da:	6849      	ldr	r1, [r1, #4]
 80011dc:	f7ff f844 	bl	8000268 <__aeabi_lmul>
 80011e0:	0002      	movs	r2, r0
 80011e2:	000b      	movs	r3, r1
 80011e4:	0010      	movs	r0, r2
 80011e6:	0019      	movs	r1, r3
 80011e8:	4bbb      	ldr	r3, [pc, #748]	; (80014d8 <BME280_compensate_P_int64+0x330>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	5e9b      	ldrsh	r3, [r3, r2]
 80011ee:	653b      	str	r3, [r7, #80]	; 0x50
 80011f0:	17db      	asrs	r3, r3, #31
 80011f2:	657b      	str	r3, [r7, #84]	; 0x54
 80011f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80011f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011f8:	f7ff f836 	bl	8000268 <__aeabi_lmul>
 80011fc:	0002      	movs	r2, r0
 80011fe:	000b      	movs	r3, r1
 8001200:	25a0      	movs	r5, #160	; 0xa0
 8001202:	1979      	adds	r1, r7, r5
 8001204:	600a      	str	r2, [r1, #0]
 8001206:	604b      	str	r3, [r1, #4]
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001208:	4bb4      	ldr	r3, [pc, #720]	; (80014dc <BME280_compensate_P_int64+0x334>)
 800120a:	2200      	movs	r2, #0
 800120c:	5e9b      	ldrsh	r3, [r3, r2]
 800120e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001210:	17db      	asrs	r3, r3, #31
 8001212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001214:	193b      	adds	r3, r7, r4
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800121c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800121e:	f7ff f823 	bl	8000268 <__aeabi_lmul>
 8001222:	0002      	movs	r2, r0
 8001224:	000b      	movs	r3, r1
 8001226:	0bd1      	lsrs	r1, r2, #15
 8001228:	468c      	mov	ip, r1
 800122a:	0458      	lsls	r0, r3, #17
 800122c:	268c      	movs	r6, #140	; 0x8c
 800122e:	19b9      	adds	r1, r7, r6
 8001230:	6008      	str	r0, [r1, #0]
 8001232:	19b8      	adds	r0, r7, r6
 8001234:	6800      	ldr	r0, [r0, #0]
 8001236:	4661      	mov	r1, ip
 8001238:	4308      	orrs	r0, r1
 800123a:	19b9      	adds	r1, r7, r6
 800123c:	6008      	str	r0, [r1, #0]
 800123e:	0453      	lsls	r3, r2, #17
 8001240:	2188      	movs	r1, #136	; 0x88
 8001242:	187a      	adds	r2, r7, r1
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	197b      	adds	r3, r7, r5
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	1879      	adds	r1, r7, r1
 800124e:	6808      	ldr	r0, [r1, #0]
 8001250:	6849      	ldr	r1, [r1, #4]
 8001252:	1812      	adds	r2, r2, r0
 8001254:	414b      	adcs	r3, r1
 8001256:	1979      	adds	r1, r7, r5
 8001258:	600a      	str	r2, [r1, #0]
 800125a:	604b      	str	r3, [r1, #4]
	var2 = var2 + (((int64_t)dig_P4)<<35);
 800125c:	4ba0      	ldr	r3, [pc, #640]	; (80014e0 <BME280_compensate_P_int64+0x338>)
 800125e:	2200      	movs	r2, #0
 8001260:	5e9b      	ldrsh	r3, [r3, r2]
 8001262:	643b      	str	r3, [r7, #64]	; 0x40
 8001264:	17db      	asrs	r3, r3, #31
 8001266:	647b      	str	r3, [r7, #68]	; 0x44
 8001268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800126e:	2300      	movs	r3, #0
 8001270:	63bb      	str	r3, [r7, #56]	; 0x38
 8001272:	197b      	adds	r3, r7, r5
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800127a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800127c:	1812      	adds	r2, r2, r0
 800127e:	414b      	adcs	r3, r1
 8001280:	1979      	adds	r1, r7, r5
 8001282:	600a      	str	r2, [r1, #0]
 8001284:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001286:	193b      	adds	r3, r7, r4
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	1939      	adds	r1, r7, r4
 800128e:	6808      	ldr	r0, [r1, #0]
 8001290:	6849      	ldr	r1, [r1, #4]
 8001292:	f7fe ffe9 	bl	8000268 <__aeabi_lmul>
 8001296:	0002      	movs	r2, r0
 8001298:	000b      	movs	r3, r1
 800129a:	0010      	movs	r0, r2
 800129c:	0019      	movs	r1, r3
 800129e:	4b91      	ldr	r3, [pc, #580]	; (80014e4 <BME280_compensate_P_int64+0x33c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	5e9b      	ldrsh	r3, [r3, r2]
 80012a4:	633b      	str	r3, [r7, #48]	; 0x30
 80012a6:	17db      	asrs	r3, r3, #31
 80012a8:	637b      	str	r3, [r7, #52]	; 0x34
 80012aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ae:	f7fe ffdb 	bl	8000268 <__aeabi_lmul>
 80012b2:	0002      	movs	r2, r0
 80012b4:	000b      	movs	r3, r1
 80012b6:	0619      	lsls	r1, r3, #24
 80012b8:	0a10      	lsrs	r0, r2, #8
 80012ba:	2580      	movs	r5, #128	; 0x80
 80012bc:	197e      	adds	r6, r7, r5
 80012be:	6030      	str	r0, [r6, #0]
 80012c0:	1978      	adds	r0, r7, r5
 80012c2:	6800      	ldr	r0, [r0, #0]
 80012c4:	4308      	orrs	r0, r1
 80012c6:	1979      	adds	r1, r7, r5
 80012c8:	6008      	str	r0, [r1, #0]
 80012ca:	121b      	asrs	r3, r3, #8
 80012cc:	2284      	movs	r2, #132	; 0x84
 80012ce:	18ba      	adds	r2, r7, r2
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	4b85      	ldr	r3, [pc, #532]	; (80014e8 <BME280_compensate_P_int64+0x340>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	5e9b      	ldrsh	r3, [r3, r2]
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80012da:	17db      	asrs	r3, r3, #31
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012de:	193b      	adds	r3, r7, r4
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80012e8:	f7fe ffbe 	bl	8000268 <__aeabi_lmul>
 80012ec:	0002      	movs	r2, r0
 80012ee:	000b      	movs	r3, r1
 80012f0:	0d11      	lsrs	r1, r2, #20
 80012f2:	0318      	lsls	r0, r3, #12
 80012f4:	67f8      	str	r0, [r7, #124]	; 0x7c
 80012f6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80012f8:	4308      	orrs	r0, r1
 80012fa:	67f8      	str	r0, [r7, #124]	; 0x7c
 80012fc:	0313      	lsls	r3, r2, #12
 80012fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8001300:	197b      	adds	r3, r7, r5
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001308:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800130a:	1812      	adds	r2, r2, r0
 800130c:	414b      	adcs	r3, r1
 800130e:	1939      	adds	r1, r7, r4
 8001310:	600a      	str	r2, [r1, #0]
 8001312:	604b      	str	r3, [r1, #4]
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001314:	193b      	adds	r3, r7, r4
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	6859      	ldr	r1, [r3, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	1880      	adds	r0, r0, r2
 8001322:	4159      	adcs	r1, r3
 8001324:	4b71      	ldr	r3, [pc, #452]	; (80014ec <BME280_compensate_P_int64+0x344>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	623b      	str	r3, [r7, #32]
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
 800132e:	6a3a      	ldr	r2, [r7, #32]
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	f7fe ff99 	bl	8000268 <__aeabi_lmul>
 8001336:	0002      	movs	r2, r0
 8001338:	000b      	movs	r3, r1
 800133a:	1059      	asrs	r1, r3, #1
 800133c:	1938      	adds	r0, r7, r4
 800133e:	6001      	str	r1, [r0, #0]
 8001340:	17db      	asrs	r3, r3, #31
 8001342:	21ac      	movs	r1, #172	; 0xac
 8001344:	187a      	adds	r2, r7, r1
 8001346:	6013      	str	r3, [r2, #0]
	if (var1 == 0)
 8001348:	193b      	adds	r3, r7, r4
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	187b      	adds	r3, r7, r1
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	431a      	orrs	r2, r3
 8001352:	d101      	bne.n	8001358 <BME280_compensate_P_int64+0x1b0>
	{
		return 0; // avoid exception caused by division by zero
 8001354:	2300      	movs	r3, #0
 8001356:	e0b6      	b.n	80014c6 <BME280_compensate_P_int64+0x31e>
	}
	p = 1048576-adc_P;
 8001358:	2394      	movs	r3, #148	; 0x94
 800135a:	18fb      	adds	r3, r7, r3
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	035b      	lsls	r3, r3, #13
 8001362:	1a9b      	subs	r3, r3, r2
 8001364:	2498      	movs	r4, #152	; 0x98
 8001366:	193a      	adds	r2, r7, r4
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	17db      	asrs	r3, r3, #31
 800136c:	259c      	movs	r5, #156	; 0x9c
 800136e:	197a      	adds	r2, r7, r5
 8001370:	6013      	str	r3, [r2, #0]
	p = (((p<<31)-var2)*3125)/var1;
 8001372:	193b      	adds	r3, r7, r4
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	105b      	asrs	r3, r3, #1
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	193b      	adds	r3, r7, r4
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	07db      	lsls	r3, r3, #31
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	23a0      	movs	r3, #160	; 0xa0
 8001384:	18fa      	adds	r2, r7, r3
 8001386:	6853      	ldr	r3, [r2, #4]
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	69b8      	ldr	r0, [r7, #24]
 800138c:	69f9      	ldr	r1, [r7, #28]
 800138e:	1a80      	subs	r0, r0, r2
 8001390:	4199      	sbcs	r1, r3
 8001392:	4a57      	ldr	r2, [pc, #348]	; (80014f0 <BME280_compensate_P_int64+0x348>)
 8001394:	2300      	movs	r3, #0
 8001396:	f7fe ff67 	bl	8000268 <__aeabi_lmul>
 800139a:	0002      	movs	r2, r0
 800139c:	000b      	movs	r3, r1
 800139e:	0010      	movs	r0, r2
 80013a0:	0019      	movs	r1, r3
 80013a2:	26a8      	movs	r6, #168	; 0xa8
 80013a4:	19ba      	adds	r2, r7, r6
 80013a6:	6853      	ldr	r3, [r2, #4]
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	f7fe ff39 	bl	8000220 <__aeabi_ldivmod>
 80013ae:	0002      	movs	r2, r0
 80013b0:	000b      	movs	r3, r1
 80013b2:	1939      	adds	r1, r7, r4
 80013b4:	600a      	str	r2, [r1, #0]
 80013b6:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80013b8:	4b4e      	ldr	r3, [pc, #312]	; (80014f4 <BME280_compensate_P_int64+0x34c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	5e9b      	ldrsh	r3, [r3, r2]
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	17db      	asrs	r3, r3, #31
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	197a      	adds	r2, r7, r5
 80013c6:	6813      	ldr	r3, [r2, #0]
 80013c8:	04da      	lsls	r2, r3, #19
 80013ca:	1939      	adds	r1, r7, r4
 80013cc:	680b      	ldr	r3, [r1, #0]
 80013ce:	0b5b      	lsrs	r3, r3, #13
 80013d0:	673b      	str	r3, [r7, #112]	; 0x70
 80013d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013d4:	4313      	orrs	r3, r2
 80013d6:	673b      	str	r3, [r7, #112]	; 0x70
 80013d8:	197a      	adds	r2, r7, r5
 80013da:	6813      	ldr	r3, [r2, #0]
 80013dc:	135b      	asrs	r3, r3, #13
 80013de:	677b      	str	r3, [r7, #116]	; 0x74
 80013e0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80013e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013e4:	6938      	ldr	r0, [r7, #16]
 80013e6:	6979      	ldr	r1, [r7, #20]
 80013e8:	f7fe ff3e 	bl	8000268 <__aeabi_lmul>
 80013ec:	0002      	movs	r2, r0
 80013ee:	000b      	movs	r3, r1
 80013f0:	0010      	movs	r0, r2
 80013f2:	0019      	movs	r1, r3
 80013f4:	197a      	adds	r2, r7, r5
 80013f6:	6813      	ldr	r3, [r2, #0]
 80013f8:	04da      	lsls	r2, r3, #19
 80013fa:	193b      	adds	r3, r7, r4
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	0b5b      	lsrs	r3, r3, #13
 8001400:	66bb      	str	r3, [r7, #104]	; 0x68
 8001402:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001404:	4313      	orrs	r3, r2
 8001406:	66bb      	str	r3, [r7, #104]	; 0x68
 8001408:	197a      	adds	r2, r7, r5
 800140a:	6813      	ldr	r3, [r2, #0]
 800140c:	135b      	asrs	r3, r3, #13
 800140e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001410:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001414:	f7fe ff28 	bl	8000268 <__aeabi_lmul>
 8001418:	0002      	movs	r2, r0
 800141a:	000b      	movs	r3, r1
 800141c:	01d9      	lsls	r1, r3, #7
 800141e:	0e50      	lsrs	r0, r2, #25
 8001420:	4301      	orrs	r1, r0
 8001422:	19b8      	adds	r0, r7, r6
 8001424:	6001      	str	r1, [r0, #0]
 8001426:	165b      	asrs	r3, r3, #25
 8001428:	22ac      	movs	r2, #172	; 0xac
 800142a:	18ba      	adds	r2, r7, r2
 800142c:	6013      	str	r3, [r2, #0]
	var2 = (((int64_t)dig_P8) * p) >> 19;
 800142e:	4b32      	ldr	r3, [pc, #200]	; (80014f8 <BME280_compensate_P_int64+0x350>)
 8001430:	2200      	movs	r2, #0
 8001432:	5e9b      	ldrsh	r3, [r3, r2]
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	17db      	asrs	r3, r3, #31
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	193a      	adds	r2, r7, r4
 800143c:	6853      	ldr	r3, [r2, #4]
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	68f9      	ldr	r1, [r7, #12]
 8001444:	f7fe ff10 	bl	8000268 <__aeabi_lmul>
 8001448:	0002      	movs	r2, r0
 800144a:	000b      	movs	r3, r1
 800144c:	0359      	lsls	r1, r3, #13
 800144e:	0cd0      	lsrs	r0, r2, #19
 8001450:	4301      	orrs	r1, r0
 8001452:	25a0      	movs	r5, #160	; 0xa0
 8001454:	1978      	adds	r0, r7, r5
 8001456:	6001      	str	r1, [r0, #0]
 8001458:	14db      	asrs	r3, r3, #19
 800145a:	22a4      	movs	r2, #164	; 0xa4
 800145c:	18ba      	adds	r2, r7, r2
 800145e:	6013      	str	r3, [r2, #0]
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001460:	193b      	adds	r3, r7, r4
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	6859      	ldr	r1, [r3, #4]
 8001466:	19bb      	adds	r3, r7, r6
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	1880      	adds	r0, r0, r2
 800146e:	4159      	adcs	r1, r3
 8001470:	197b      	adds	r3, r7, r5
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	1812      	adds	r2, r2, r0
 8001478:	414b      	adcs	r3, r1
 800147a:	0619      	lsls	r1, r3, #24
 800147c:	0a10      	lsrs	r0, r2, #8
 800147e:	6638      	str	r0, [r7, #96]	; 0x60
 8001480:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001482:	4308      	orrs	r0, r1
 8001484:	6638      	str	r0, [r7, #96]	; 0x60
 8001486:	121b      	asrs	r3, r3, #8
 8001488:	667b      	str	r3, [r7, #100]	; 0x64
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <BME280_compensate_P_int64+0x354>)
 800148c:	2200      	movs	r2, #0
 800148e:	5e9b      	ldrsh	r3, [r3, r2]
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	17db      	asrs	r3, r3, #31
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	000b      	movs	r3, r1
 800149c:	0f1b      	lsrs	r3, r3, #28
 800149e:	0010      	movs	r0, r2
 80014a0:	0100      	lsls	r0, r0, #4
 80014a2:	65f8      	str	r0, [r7, #92]	; 0x5c
 80014a4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80014a6:	4318      	orrs	r0, r3
 80014a8:	65f8      	str	r0, [r7, #92]	; 0x5c
 80014aa:	000b      	movs	r3, r1
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80014b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014b4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80014b6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80014b8:	1812      	adds	r2, r2, r0
 80014ba:	414b      	adcs	r3, r1
 80014bc:	1939      	adds	r1, r7, r4
 80014be:	600a      	str	r2, [r1, #0]
 80014c0:	604b      	str	r3, [r1, #4]
	return (uint32_t)p;
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	681b      	ldr	r3, [r3, #0]
}
 80014c6:	0018      	movs	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b02d      	add	sp, #180	; 0xb4
 80014cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	20000080 	.word	0x20000080
 80014d4:	fffe0c00 	.word	0xfffe0c00
 80014d8:	20000074 	.word	0x20000074
 80014dc:	20000038 	.word	0x20000038
 80014e0:	20000034 	.word	0x20000034
 80014e4:	20000042 	.word	0x20000042
 80014e8:	20000032 	.word	0x20000032
 80014ec:	20000040 	.word	0x20000040
 80014f0:	00000c35 	.word	0x00000c35
 80014f4:	2000004c 	.word	0x2000004c
 80014f8:	20000044 	.word	0x20000044
 80014fc:	20000028 	.word	0x20000028

08001500 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001508:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <bme280_compensate_H_int32+0xc0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a2d      	ldr	r2, [pc, #180]	; (80015c4 <bme280_compensate_H_int32+0xc4>)
 800150e:	4694      	mov	ip, r2
 8001510:	4463      	add	r3, ip
 8001512:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	039a      	lsls	r2, r3, #14
 8001518:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <bme280_compensate_H_int32+0xc8>)
 800151a:	2100      	movs	r1, #0
 800151c:	5e5b      	ldrsh	r3, [r3, r1]
 800151e:	051b      	lsls	r3, r3, #20
 8001520:	1ad2      	subs	r2, r2, r3
 8001522:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <bme280_compensate_H_int32+0xcc>)
 8001524:	2100      	movs	r1, #0
 8001526:	5e5b      	ldrsh	r3, [r3, r1]
 8001528:	0019      	movs	r1, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	434b      	muls	r3, r1
 800152e:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001530:	2280      	movs	r2, #128	; 0x80
 8001532:	01d2      	lsls	r2, r2, #7
 8001534:	4694      	mov	ip, r2
 8001536:	4463      	add	r3, ip
 8001538:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 800153a:	4a25      	ldr	r2, [pc, #148]	; (80015d0 <bme280_compensate_H_int32+0xd0>)
 800153c:	2100      	movs	r1, #0
 800153e:	5e52      	ldrsh	r2, [r2, r1]
 8001540:	0011      	movs	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	434a      	muls	r2, r1
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001546:	1292      	asrs	r2, r2, #10
 8001548:	4922      	ldr	r1, [pc, #136]	; (80015d4 <bme280_compensate_H_int32+0xd4>)
 800154a:	8809      	ldrh	r1, [r1, #0]
 800154c:	0008      	movs	r0, r1
 800154e:	68f9      	ldr	r1, [r7, #12]
 8001550:	4341      	muls	r1, r0
 8001552:	12c9      	asrs	r1, r1, #11
 8001554:	2080      	movs	r0, #128	; 0x80
 8001556:	0200      	lsls	r0, r0, #8
 8001558:	4684      	mov	ip, r0
 800155a:	4461      	add	r1, ip
 800155c:	434a      	muls	r2, r1
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 800155e:	1292      	asrs	r2, r2, #10
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	0389      	lsls	r1, r1, #14
 8001564:	468c      	mov	ip, r1
 8001566:	4462      	add	r2, ip
 8001568:	491b      	ldr	r1, [pc, #108]	; (80015d8 <bme280_compensate_H_int32+0xd8>)
 800156a:	2000      	movs	r0, #0
 800156c:	5e09      	ldrsh	r1, [r1, r0]
 800156e:	434a      	muls	r2, r1
 8001570:	2180      	movs	r1, #128	; 0x80
 8001572:	0189      	lsls	r1, r1, #6
 8001574:	468c      	mov	ip, r1
 8001576:	4462      	add	r2, ip
					8192) >> 14));
 8001578:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 800157a:	4353      	muls	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	13db      	asrs	r3, r3, #15
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	13d2      	asrs	r2, r2, #15
 8001586:	4353      	muls	r3, r2
 8001588:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 800158a:	4a14      	ldr	r2, [pc, #80]	; (80015dc <bme280_compensate_H_int32+0xdc>)
 800158c:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 800158e:	4353      	muls	r3, r2
			((int32_t)dig_H1)) >> 4));
 8001590:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	da00      	bge.n	80015a0 <bme280_compensate_H_int32+0xa0>
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	22c8      	movs	r2, #200	; 0xc8
 80015a6:	0552      	lsls	r2, r2, #21
 80015a8:	4293      	cmp	r3, r2
 80015aa:	dd01      	ble.n	80015b0 <bme280_compensate_H_int32+0xb0>
 80015ac:	23c8      	movs	r3, #200	; 0xc8
 80015ae:	055b      	lsls	r3, r3, #21
 80015b0:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	131b      	asrs	r3, r3, #12
}
 80015b6:	0018      	movs	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b004      	add	sp, #16
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	20000080 	.word	0x20000080
 80015c4:	fffed400 	.word	0xfffed400
 80015c8:	2000002c 	.word	0x2000002c
 80015cc:	20000046 	.word	0x20000046
 80015d0:	20000036 	.word	0x20000036
 80015d4:	2000004a 	.word	0x2000004a
 80015d8:	2000007c 	.word	0x2000007c
 80015dc:	20000030 	.word	0x20000030

080015e0 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 80015e4:	f7ff fd4c 	bl	8001080 <BMEReadRaw>
 80015e8:	1e03      	subs	r3, r0, #0
 80015ea:	d160      	bne.n	80016ae <BME280_Measure+0xce>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 80015ec:	4b37      	ldr	r3, [pc, #220]	; (80016cc <BME280_Measure+0xec>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	041b      	lsls	r3, r3, #16
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d103      	bne.n	8001600 <BME280_Measure+0x20>
 80015f8:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <BME280_Measure+0xf0>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	e015      	b.n	800162c <BME280_Measure+0x4c>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001600:	4b32      	ldr	r3, [pc, #200]	; (80016cc <BME280_Measure+0xec>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	0018      	movs	r0, r3
 8001606:	f7ff fd93 	bl	8001130 <BME280_compensate_T_int32>
 800160a:	0003      	movs	r3, r0
 800160c:	0018      	movs	r0, r3
 800160e:	f7ff f959 	bl	80008c4 <__aeabi_i2d>
 8001612:	2200      	movs	r2, #0
 8001614:	4b2f      	ldr	r3, [pc, #188]	; (80016d4 <BME280_Measure+0xf4>)
 8001616:	f7fe fe6d 	bl	80002f4 <__aeabi_ddiv>
 800161a:	0002      	movs	r2, r0
 800161c:	000b      	movs	r3, r1
 800161e:	0010      	movs	r0, r2
 8001620:	0019      	movs	r1, r3
 8001622:	f7ff f9a5 	bl	8000970 <__aeabi_d2f>
 8001626:	1c02      	adds	r2, r0, #0
 8001628:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <BME280_Measure+0xf0>)
 800162a:	601a      	str	r2, [r3, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <BME280_Measure+0xf8>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	041b      	lsls	r3, r3, #16
 8001634:	429a      	cmp	r2, r3
 8001636:	d103      	bne.n	8001640 <BME280_Measure+0x60>
 8001638:	4b28      	ldr	r3, [pc, #160]	; (80016dc <BME280_Measure+0xfc>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	e015      	b.n	800166c <BME280_Measure+0x8c>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <BME280_Measure+0xf8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	0018      	movs	r0, r3
 8001646:	f7ff fdaf 	bl	80011a8 <BME280_compensate_P_int64>
 800164a:	0003      	movs	r3, r0
 800164c:	0018      	movs	r0, r3
 800164e:	f7ff f969 	bl	8000924 <__aeabi_ui2d>
 8001652:	2200      	movs	r2, #0
 8001654:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <BME280_Measure+0x100>)
 8001656:	f7fe fe4d 	bl	80002f4 <__aeabi_ddiv>
 800165a:	0002      	movs	r2, r0
 800165c:	000b      	movs	r3, r1
 800165e:	0010      	movs	r0, r2
 8001660:	0019      	movs	r1, r3
 8001662:	f7ff f985 	bl	8000970 <__aeabi_d2f>
 8001666:	1c02      	adds	r2, r0, #0
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <BME280_Measure+0xfc>)
 800166a:	601a      	str	r2, [r3, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <BME280_Measure+0x104>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	429a      	cmp	r2, r3
 8001676:	d103      	bne.n	8001680 <BME280_Measure+0xa0>
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <BME280_Measure+0x108>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 800167e:	e021      	b.n	80016c4 <BME280_Measure+0xe4>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <BME280_Measure+0x104>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	0018      	movs	r0, r3
 8001686:	f7ff ff3b 	bl	8001500 <bme280_compensate_H_int32>
 800168a:	0003      	movs	r3, r0
 800168c:	0018      	movs	r0, r3
 800168e:	f7ff f949 	bl	8000924 <__aeabi_ui2d>
 8001692:	2200      	movs	r2, #0
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <BME280_Measure+0x10c>)
 8001696:	f7fe fe2d 	bl	80002f4 <__aeabi_ddiv>
 800169a:	0002      	movs	r2, r0
 800169c:	000b      	movs	r3, r1
 800169e:	0010      	movs	r0, r2
 80016a0:	0019      	movs	r1, r3
 80016a2:	f7ff f965 	bl	8000970 <__aeabi_d2f>
 80016a6:	1c02      	adds	r2, r0, #0
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <BME280_Measure+0x108>)
 80016aa:	601a      	str	r2, [r3, #0]
}
 80016ac:	e00a      	b.n	80016c4 <BME280_Measure+0xe4>
		Temperature = Pressure = Humidity = 0;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <BME280_Measure+0x108>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <BME280_Measure+0x108>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <BME280_Measure+0xfc>)
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <BME280_Measure+0xfc>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <BME280_Measure+0xf0>)
 80016c2:	601a      	str	r2, [r3, #0]
}
 80016c4:	46c0      	nop			; (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	2000003c 	.word	0x2000003c
 80016d0:	20000088 	.word	0x20000088
 80016d4:	40590000 	.word	0x40590000
 80016d8:	20000078 	.word	0x20000078
 80016dc:	2000015c 	.word	0x2000015c
 80016e0:	40700000 	.word	0x40700000
 80016e4:	20000084 	.word	0x20000084
 80016e8:	20000160 	.word	0x20000160
 80016ec:	40900000 	.word	0x40900000

080016f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f6:	f000 fa6f 	bl	8001bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fa:	f000 f818 	bl	800172e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016fe:	f000 f8e9 	bl	80018d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001702:	f000 f8b7 	bl	8001874 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001706:	f000 f875 	bl	80017f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 800170a:	2304      	movs	r3, #4
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	2300      	movs	r3, #0
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2303      	movs	r3, #3
 8001714:	2201      	movs	r2, #1
 8001716:	2105      	movs	r1, #5
 8001718:	2002      	movs	r0, #2
 800171a:	f7ff fbc5 	bl	8000ea8 <BME280_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    BME280_Measure();
 800171e:	f7ff ff5f 	bl	80015e0 <BME280_Measure>
    HAL_Delay (500);
 8001722:	23fa      	movs	r3, #250	; 0xfa
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	0018      	movs	r0, r3
 8001728:	f000 faba 	bl	8001ca0 <HAL_Delay>
    BME280_Measure();
 800172c:	e7f7      	b.n	800171e <main+0x2e>

0800172e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800172e:	b590      	push	{r4, r7, lr}
 8001730:	b097      	sub	sp, #92	; 0x5c
 8001732:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001734:	2428      	movs	r4, #40	; 0x28
 8001736:	193b      	adds	r3, r7, r4
 8001738:	0018      	movs	r0, r3
 800173a:	2330      	movs	r3, #48	; 0x30
 800173c:	001a      	movs	r2, r3
 800173e:	2100      	movs	r1, #0
 8001740:	f002 fbd6 	bl	8003ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001744:	2318      	movs	r3, #24
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	0018      	movs	r0, r3
 800174a:	2310      	movs	r3, #16
 800174c:	001a      	movs	r2, r3
 800174e:	2100      	movs	r1, #0
 8001750:	f002 fbce 	bl	8003ef0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	0018      	movs	r0, r3
 8001758:	2314      	movs	r3, #20
 800175a:	001a      	movs	r2, r3
 800175c:	2100      	movs	r1, #0
 800175e:	f002 fbc7 	bl	8003ef0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001762:	0021      	movs	r1, r4
 8001764:	187b      	adds	r3, r7, r1
 8001766:	2202      	movs	r2, #2
 8001768:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800176a:	187b      	adds	r3, r7, r1
 800176c:	2201      	movs	r2, #1
 800176e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001770:	187b      	adds	r3, r7, r1
 8001772:	2210      	movs	r2, #16
 8001774:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001776:	187b      	adds	r3, r7, r1
 8001778:	2202      	movs	r2, #2
 800177a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800177c:	187b      	adds	r3, r7, r1
 800177e:	2280      	movs	r2, #128	; 0x80
 8001780:	0212      	lsls	r2, r2, #8
 8001782:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001784:	187b      	adds	r3, r7, r1
 8001786:	2280      	movs	r2, #128	; 0x80
 8001788:	0352      	lsls	r2, r2, #13
 800178a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800178c:	187b      	adds	r3, r7, r1
 800178e:	2200      	movs	r2, #0
 8001790:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001792:	187b      	adds	r3, r7, r1
 8001794:	0018      	movs	r0, r3
 8001796:	f001 facb 	bl	8002d30 <HAL_RCC_OscConfig>
 800179a:	1e03      	subs	r3, r0, #0
 800179c:	d001      	beq.n	80017a2 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800179e:	f000 f911 	bl	80019c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a2:	2118      	movs	r1, #24
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	2207      	movs	r2, #7
 80017a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017aa:	187b      	adds	r3, r7, r1
 80017ac:	2202      	movs	r2, #2
 80017ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	2200      	movs	r2, #0
 80017ba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	2101      	movs	r1, #1
 80017c0:	0018      	movs	r0, r3
 80017c2:	f001 fdd3 	bl	800336c <HAL_RCC_ClockConfig>
 80017c6:	1e03      	subs	r3, r0, #0
 80017c8:	d001      	beq.n	80017ce <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80017ca:	f000 f8fb 	bl	80019c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	2220      	movs	r2, #32
 80017d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	0018      	movs	r0, r3
 80017de:	f001 ff19 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 80017e2:	1e03      	subs	r3, r0, #0
 80017e4:	d001      	beq.n	80017ea <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80017e6:	f000 f8ed 	bl	80019c4 <Error_Handler>
  }
}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b017      	add	sp, #92	; 0x5c
 80017f0:	bd90      	pop	{r4, r7, pc}
	...

080017f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017f8:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <MX_I2C1_Init+0x74>)
 80017fa:	4a1c      	ldr	r2, [pc, #112]	; (800186c <MX_I2C1_Init+0x78>)
 80017fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80017fe:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <MX_I2C1_Init+0x74>)
 8001800:	4a1b      	ldr	r2, [pc, #108]	; (8001870 <MX_I2C1_Init+0x7c>)
 8001802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <MX_I2C1_Init+0x74>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <MX_I2C1_Init+0x74>)
 800180c:	2201      	movs	r2, #1
 800180e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001810:	4b15      	ldr	r3, [pc, #84]	; (8001868 <MX_I2C1_Init+0x74>)
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001816:	4b14      	ldr	r3, [pc, #80]	; (8001868 <MX_I2C1_Init+0x74>)
 8001818:	2200      	movs	r2, #0
 800181a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <MX_I2C1_Init+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <MX_I2C1_Init+0x74>)
 8001824:	2200      	movs	r2, #0
 8001826:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <MX_I2C1_Init+0x74>)
 800182a:	2200      	movs	r2, #0
 800182c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <MX_I2C1_Init+0x74>)
 8001830:	0018      	movs	r0, r3
 8001832:	f000 fc9b 	bl	800216c <HAL_I2C_Init>
 8001836:	1e03      	subs	r3, r0, #0
 8001838:	d001      	beq.n	800183e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800183a:	f000 f8c3 	bl	80019c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <MX_I2C1_Init+0x74>)
 8001840:	2100      	movs	r1, #0
 8001842:	0018      	movs	r0, r3
 8001844:	f001 f9dc 	bl	8002c00 <HAL_I2CEx_ConfigAnalogFilter>
 8001848:	1e03      	subs	r3, r0, #0
 800184a:	d001      	beq.n	8001850 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800184c:	f000 f8ba 	bl	80019c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <MX_I2C1_Init+0x74>)
 8001852:	2100      	movs	r1, #0
 8001854:	0018      	movs	r0, r3
 8001856:	f001 fa1f 	bl	8002c98 <HAL_I2CEx_ConfigDigitalFilter>
 800185a:	1e03      	subs	r3, r0, #0
 800185c:	d001      	beq.n	8001862 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800185e:	f000 f8b1 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	2000008c 	.word	0x2000008c
 800186c:	40005400 	.word	0x40005400
 8001870:	2000090e 	.word	0x2000090e

08001874 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <MX_USART2_UART_Init+0x58>)
 800187a:	4a15      	ldr	r2, [pc, #84]	; (80018d0 <MX_USART2_UART_Init+0x5c>)
 800187c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <MX_USART2_UART_Init+0x58>)
 8001880:	2296      	movs	r2, #150	; 0x96
 8001882:	0212      	lsls	r2, r2, #8
 8001884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_USART2_UART_Init+0x58>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <MX_USART2_UART_Init+0x58>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_USART2_UART_Init+0x58>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_USART2_UART_Init+0x58>)
 800189a:	220c      	movs	r2, #12
 800189c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <MX_USART2_UART_Init+0x58>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_USART2_UART_Init+0x58>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <MX_USART2_UART_Init+0x58>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_USART2_UART_Init+0x58>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <MX_USART2_UART_Init+0x58>)
 80018b8:	0018      	movs	r0, r3
 80018ba:	f001 ff89 	bl	80037d0 <HAL_UART_Init>
 80018be:	1e03      	subs	r3, r0, #0
 80018c0:	d001      	beq.n	80018c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018c2:	f000 f87f 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200000d8 	.word	0x200000d8
 80018d0:	40004400 	.word	0x40004400

080018d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b08b      	sub	sp, #44	; 0x2c
 80018d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018da:	2414      	movs	r4, #20
 80018dc:	193b      	adds	r3, r7, r4
 80018de:	0018      	movs	r0, r3
 80018e0:	2314      	movs	r3, #20
 80018e2:	001a      	movs	r2, r3
 80018e4:	2100      	movs	r1, #0
 80018e6:	f002 fb03 	bl	8003ef0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	4b34      	ldr	r3, [pc, #208]	; (80019bc <MX_GPIO_Init+0xe8>)
 80018ec:	695a      	ldr	r2, [r3, #20]
 80018ee:	4b33      	ldr	r3, [pc, #204]	; (80019bc <MX_GPIO_Init+0xe8>)
 80018f0:	2180      	movs	r1, #128	; 0x80
 80018f2:	0309      	lsls	r1, r1, #12
 80018f4:	430a      	orrs	r2, r1
 80018f6:	615a      	str	r2, [r3, #20]
 80018f8:	4b30      	ldr	r3, [pc, #192]	; (80019bc <MX_GPIO_Init+0xe8>)
 80018fa:	695a      	ldr	r2, [r3, #20]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	031b      	lsls	r3, r3, #12
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001906:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <MX_GPIO_Init+0xe8>)
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	4b2c      	ldr	r3, [pc, #176]	; (80019bc <MX_GPIO_Init+0xe8>)
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	03c9      	lsls	r1, r1, #15
 8001910:	430a      	orrs	r2, r1
 8001912:	615a      	str	r2, [r3, #20]
 8001914:	4b29      	ldr	r3, [pc, #164]	; (80019bc <MX_GPIO_Init+0xe8>)
 8001916:	695a      	ldr	r2, [r3, #20]
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	03db      	lsls	r3, r3, #15
 800191c:	4013      	ands	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	4b26      	ldr	r3, [pc, #152]	; (80019bc <MX_GPIO_Init+0xe8>)
 8001924:	695a      	ldr	r2, [r3, #20]
 8001926:	4b25      	ldr	r3, [pc, #148]	; (80019bc <MX_GPIO_Init+0xe8>)
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	0289      	lsls	r1, r1, #10
 800192c:	430a      	orrs	r2, r1
 800192e:	615a      	str	r2, [r3, #20]
 8001930:	4b22      	ldr	r3, [pc, #136]	; (80019bc <MX_GPIO_Init+0xe8>)
 8001932:	695a      	ldr	r2, [r3, #20]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	029b      	lsls	r3, r3, #10
 8001938:	4013      	ands	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <MX_GPIO_Init+0xe8>)
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <MX_GPIO_Init+0xe8>)
 8001944:	2180      	movs	r1, #128	; 0x80
 8001946:	02c9      	lsls	r1, r1, #11
 8001948:	430a      	orrs	r2, r1
 800194a:	615a      	str	r2, [r3, #20]
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <MX_GPIO_Init+0xe8>)
 800194e:	695a      	ldr	r2, [r3, #20]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	02db      	lsls	r3, r3, #11
 8001954:	4013      	ands	r3, r2
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800195a:	2390      	movs	r3, #144	; 0x90
 800195c:	05db      	lsls	r3, r3, #23
 800195e:	2200      	movs	r2, #0
 8001960:	2120      	movs	r1, #32
 8001962:	0018      	movs	r0, r3
 8001964:	f000 fbe4 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001968:	193b      	adds	r3, r7, r4
 800196a:	2280      	movs	r2, #128	; 0x80
 800196c:	0192      	lsls	r2, r2, #6
 800196e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001970:	193b      	adds	r3, r7, r4
 8001972:	2284      	movs	r2, #132	; 0x84
 8001974:	0392      	lsls	r2, r2, #14
 8001976:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	193b      	adds	r3, r7, r4
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197e:	193b      	adds	r3, r7, r4
 8001980:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <MX_GPIO_Init+0xec>)
 8001982:	0019      	movs	r1, r3
 8001984:	0010      	movs	r0, r2
 8001986:	f000 fa63 	bl	8001e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800198a:	0021      	movs	r1, r4
 800198c:	187b      	adds	r3, r7, r1
 800198e:	2220      	movs	r2, #32
 8001990:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001992:	187b      	adds	r3, r7, r1
 8001994:	2201      	movs	r2, #1
 8001996:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	187b      	adds	r3, r7, r1
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	187b      	adds	r3, r7, r1
 80019a0:	2200      	movs	r2, #0
 80019a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a4:	187a      	adds	r2, r7, r1
 80019a6:	2390      	movs	r3, #144	; 0x90
 80019a8:	05db      	lsls	r3, r3, #23
 80019aa:	0011      	movs	r1, r2
 80019ac:	0018      	movs	r0, r3
 80019ae:	f000 fa4f 	bl	8001e50 <HAL_GPIO_Init>

}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b00b      	add	sp, #44	; 0x2c
 80019b8:	bd90      	pop	{r4, r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	40021000 	.word	0x40021000
 80019c0:	48000800 	.word	0x48000800

080019c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c8:	b672      	cpsid	i
}
 80019ca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019cc:	e7fe      	b.n	80019cc <Error_Handler+0x8>
	...

080019d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <HAL_MspInit+0x44>)
 80019d8:	699a      	ldr	r2, [r3, #24]
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <HAL_MspInit+0x44>)
 80019dc:	2101      	movs	r1, #1
 80019de:	430a      	orrs	r2, r1
 80019e0:	619a      	str	r2, [r3, #24]
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <HAL_MspInit+0x44>)
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	2201      	movs	r2, #1
 80019e8:	4013      	ands	r3, r2
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_MspInit+0x44>)
 80019f0:	69da      	ldr	r2, [r3, #28]
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_MspInit+0x44>)
 80019f4:	2180      	movs	r1, #128	; 0x80
 80019f6:	0549      	lsls	r1, r1, #21
 80019f8:	430a      	orrs	r2, r1
 80019fa:	61da      	str	r2, [r3, #28]
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <HAL_MspInit+0x44>)
 80019fe:	69da      	ldr	r2, [r3, #28]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	055b      	lsls	r3, r3, #21
 8001a04:	4013      	ands	r3, r2
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b002      	add	sp, #8
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	40021000 	.word	0x40021000

08001a18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b08b      	sub	sp, #44	; 0x2c
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	2414      	movs	r4, #20
 8001a22:	193b      	adds	r3, r7, r4
 8001a24:	0018      	movs	r0, r3
 8001a26:	2314      	movs	r3, #20
 8001a28:	001a      	movs	r2, r3
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	f002 fa60 	bl	8003ef0 <memset>
  if(hi2c->Instance==I2C1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <HAL_I2C_MspInit+0x90>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d131      	bne.n	8001a9e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <HAL_I2C_MspInit+0x94>)
 8001a3c:	695a      	ldr	r2, [r3, #20]
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_I2C_MspInit+0x94>)
 8001a40:	2180      	movs	r1, #128	; 0x80
 8001a42:	02c9      	lsls	r1, r1, #11
 8001a44:	430a      	orrs	r2, r1
 8001a46:	615a      	str	r2, [r3, #20]
 8001a48:	4b18      	ldr	r3, [pc, #96]	; (8001aac <HAL_I2C_MspInit+0x94>)
 8001a4a:	695a      	ldr	r2, [r3, #20]
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	02db      	lsls	r3, r3, #11
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a56:	0021      	movs	r1, r4
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	22c0      	movs	r2, #192	; 0xc0
 8001a5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a5e:	187b      	adds	r3, r7, r1
 8001a60:	2212      	movs	r2, #18
 8001a62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a6a:	187b      	adds	r3, r7, r1
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001a70:	187b      	adds	r3, r7, r1
 8001a72:	2201      	movs	r2, #1
 8001a74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <HAL_I2C_MspInit+0x98>)
 8001a7a:	0019      	movs	r1, r3
 8001a7c:	0010      	movs	r0, r2
 8001a7e:	f000 f9e7 	bl	8001e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_I2C_MspInit+0x94>)
 8001a84:	69da      	ldr	r2, [r3, #28]
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_I2C_MspInit+0x94>)
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	0389      	lsls	r1, r1, #14
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	61da      	str	r2, [r3, #28]
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_I2C_MspInit+0x94>)
 8001a92:	69da      	ldr	r2, [r3, #28]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	039b      	lsls	r3, r3, #14
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b00b      	add	sp, #44	; 0x2c
 8001aa4:	bd90      	pop	{r4, r7, pc}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	48000400 	.word	0x48000400

08001ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b08b      	sub	sp, #44	; 0x2c
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	2414      	movs	r4, #20
 8001abe:	193b      	adds	r3, r7, r4
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	2314      	movs	r3, #20
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	f002 fa12 	bl	8003ef0 <memset>
  if(huart->Instance==USART2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <HAL_UART_MspInit+0x90>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d132      	bne.n	8001b3c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <HAL_UART_MspInit+0x94>)
 8001ad8:	69da      	ldr	r2, [r3, #28]
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <HAL_UART_MspInit+0x94>)
 8001adc:	2180      	movs	r1, #128	; 0x80
 8001ade:	0289      	lsls	r1, r1, #10
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	61da      	str	r2, [r3, #28]
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_UART_MspInit+0x94>)
 8001ae6:	69da      	ldr	r2, [r3, #28]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	029b      	lsls	r3, r3, #10
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_UART_MspInit+0x94>)
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <HAL_UART_MspInit+0x94>)
 8001af8:	2180      	movs	r1, #128	; 0x80
 8001afa:	0289      	lsls	r1, r1, #10
 8001afc:	430a      	orrs	r2, r1
 8001afe:	615a      	str	r2, [r3, #20]
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_UART_MspInit+0x94>)
 8001b02:	695a      	ldr	r2, [r3, #20]
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	029b      	lsls	r3, r3, #10
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b0e:	0021      	movs	r1, r4
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	220c      	movs	r2, #12
 8001b14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	2202      	movs	r2, #2
 8001b1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	187b      	adds	r3, r7, r1
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b22:	187b      	adds	r3, r7, r1
 8001b24:	2203      	movs	r2, #3
 8001b26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001b28:	187b      	adds	r3, r7, r1
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	187a      	adds	r2, r7, r1
 8001b30:	2390      	movs	r3, #144	; 0x90
 8001b32:	05db      	lsls	r3, r3, #23
 8001b34:	0011      	movs	r1, r2
 8001b36:	0018      	movs	r0, r3
 8001b38:	f000 f98a 	bl	8001e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b3c:	46c0      	nop			; (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b00b      	add	sp, #44	; 0x2c
 8001b42:	bd90      	pop	{r4, r7, pc}
 8001b44:	40004400 	.word	0x40004400
 8001b48:	40021000 	.word	0x40021000

08001b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <NMI_Handler+0x4>

08001b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <HardFault_Handler+0x4>

08001b58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b5c:	46c0      	nop			; (mov r8, r8)
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b70:	f000 f87a 	bl	8001c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b84:	480d      	ldr	r0, [pc, #52]	; (8001bbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b88:	480d      	ldr	r0, [pc, #52]	; (8001bc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b8a:	490e      	ldr	r1, [pc, #56]	; (8001bc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b8c:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <LoopForever+0xe>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b90:	e002      	b.n	8001b98 <LoopCopyDataInit>

08001b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b96:	3304      	adds	r3, #4

08001b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b9c:	d3f9      	bcc.n	8001b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9e:	4a0b      	ldr	r2, [pc, #44]	; (8001bcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ba0:	4c0b      	ldr	r4, [pc, #44]	; (8001bd0 <LoopForever+0x16>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba4:	e001      	b.n	8001baa <LoopFillZerobss>

08001ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba8:	3204      	adds	r2, #4

08001baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bac:	d3fb      	bcc.n	8001ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001bae:	f7ff ffe4 	bl	8001b7a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001bb2:	f002 f979 	bl	8003ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bb6:	f7ff fd9b 	bl	80016f0 <main>

08001bba <LoopForever>:

LoopForever:
    b LoopForever
 8001bba:	e7fe      	b.n	8001bba <LoopForever>
  ldr   r0, =_estack
 8001bbc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001bc8:	08003fa0 	.word	0x08003fa0
  ldr r2, =_sbss
 8001bcc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001bd0:	20000168 	.word	0x20000168

08001bd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bd4:	e7fe      	b.n	8001bd4 <ADC1_IRQHandler>
	...

08001bd8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <HAL_Init+0x24>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_Init+0x24>)
 8001be2:	2110      	movs	r1, #16
 8001be4:	430a      	orrs	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001be8:	2000      	movs	r0, #0
 8001bea:	f000 f809 	bl	8001c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bee:	f7ff feef 	bl	80019d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	40022000 	.word	0x40022000

08001c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c00:	b590      	push	{r4, r7, lr}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <HAL_InitTick+0x5c>)
 8001c0a:	681c      	ldr	r4, [r3, #0]
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_InitTick+0x60>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	0019      	movs	r1, r3
 8001c12:	23fa      	movs	r3, #250	; 0xfa
 8001c14:	0098      	lsls	r0, r3, #2
 8001c16:	f7fe fa77 	bl	8000108 <__udivsi3>
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	0020      	movs	r0, r4
 8001c20:	f7fe fa72 	bl	8000108 <__udivsi3>
 8001c24:	0003      	movs	r3, r0
 8001c26:	0018      	movs	r0, r3
 8001c28:	f000 f905 	bl	8001e36 <HAL_SYSTICK_Config>
 8001c2c:	1e03      	subs	r3, r0, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e00f      	b.n	8001c54 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d80b      	bhi.n	8001c52 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	425b      	negs	r3, r3
 8001c40:	2200      	movs	r2, #0
 8001c42:	0018      	movs	r0, r3
 8001c44:	f000 f8e2 	bl	8001e0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_InitTick+0x64>)
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e000      	b.n	8001c54 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	0018      	movs	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b003      	add	sp, #12
 8001c5a:	bd90      	pop	{r4, r7, pc}
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000008 	.word	0x20000008
 8001c64:	20000004 	.word	0x20000004

08001c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_IncTick+0x1c>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	001a      	movs	r2, r3
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_IncTick+0x20>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	18d2      	adds	r2, r2, r3
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <HAL_IncTick+0x20>)
 8001c7a:	601a      	str	r2, [r3, #0]
}
 8001c7c:	46c0      	nop			; (mov r8, r8)
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	20000008 	.word	0x20000008
 8001c88:	20000164 	.word	0x20000164

08001c8c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c90:	4b02      	ldr	r3, [pc, #8]	; (8001c9c <HAL_GetTick+0x10>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	0018      	movs	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	20000164 	.word	0x20000164

08001ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca8:	f7ff fff0 	bl	8001c8c <HAL_GetTick>
 8001cac:	0003      	movs	r3, r0
 8001cae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	d005      	beq.n	8001cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_Delay+0x44>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	001a      	movs	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	189b      	adds	r3, r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	f7ff ffe0 	bl	8001c8c <HAL_GetTick>
 8001ccc:	0002      	movs	r2, r0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d8f7      	bhi.n	8001cc8 <HAL_Delay+0x28>
  {
  }
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	b004      	add	sp, #16
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	20000008 	.word	0x20000008

08001ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	0002      	movs	r2, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	1dfb      	adds	r3, r7, #7
 8001cf4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cf6:	1dfb      	adds	r3, r7, #7
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8001cfc:	d828      	bhi.n	8001d50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cfe:	4a2f      	ldr	r2, [pc, #188]	; (8001dbc <__NVIC_SetPriority+0xd4>)
 8001d00:	1dfb      	adds	r3, r7, #7
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	b25b      	sxtb	r3, r3
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	33c0      	adds	r3, #192	; 0xc0
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	589b      	ldr	r3, [r3, r2]
 8001d0e:	1dfa      	adds	r2, r7, #7
 8001d10:	7812      	ldrb	r2, [r2, #0]
 8001d12:	0011      	movs	r1, r2
 8001d14:	2203      	movs	r2, #3
 8001d16:	400a      	ands	r2, r1
 8001d18:	00d2      	lsls	r2, r2, #3
 8001d1a:	21ff      	movs	r1, #255	; 0xff
 8001d1c:	4091      	lsls	r1, r2
 8001d1e:	000a      	movs	r2, r1
 8001d20:	43d2      	mvns	r2, r2
 8001d22:	401a      	ands	r2, r3
 8001d24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	019b      	lsls	r3, r3, #6
 8001d2a:	22ff      	movs	r2, #255	; 0xff
 8001d2c:	401a      	ands	r2, r3
 8001d2e:	1dfb      	adds	r3, r7, #7
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	0018      	movs	r0, r3
 8001d34:	2303      	movs	r3, #3
 8001d36:	4003      	ands	r3, r0
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d3c:	481f      	ldr	r0, [pc, #124]	; (8001dbc <__NVIC_SetPriority+0xd4>)
 8001d3e:	1dfb      	adds	r3, r7, #7
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b25b      	sxtb	r3, r3
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	430a      	orrs	r2, r1
 8001d48:	33c0      	adds	r3, #192	; 0xc0
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d4e:	e031      	b.n	8001db4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d50:	4a1b      	ldr	r2, [pc, #108]	; (8001dc0 <__NVIC_SetPriority+0xd8>)
 8001d52:	1dfb      	adds	r3, r7, #7
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	0019      	movs	r1, r3
 8001d58:	230f      	movs	r3, #15
 8001d5a:	400b      	ands	r3, r1
 8001d5c:	3b08      	subs	r3, #8
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	3306      	adds	r3, #6
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	18d3      	adds	r3, r2, r3
 8001d66:	3304      	adds	r3, #4
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	1dfa      	adds	r2, r7, #7
 8001d6c:	7812      	ldrb	r2, [r2, #0]
 8001d6e:	0011      	movs	r1, r2
 8001d70:	2203      	movs	r2, #3
 8001d72:	400a      	ands	r2, r1
 8001d74:	00d2      	lsls	r2, r2, #3
 8001d76:	21ff      	movs	r1, #255	; 0xff
 8001d78:	4091      	lsls	r1, r2
 8001d7a:	000a      	movs	r2, r1
 8001d7c:	43d2      	mvns	r2, r2
 8001d7e:	401a      	ands	r2, r3
 8001d80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	019b      	lsls	r3, r3, #6
 8001d86:	22ff      	movs	r2, #255	; 0xff
 8001d88:	401a      	ands	r2, r3
 8001d8a:	1dfb      	adds	r3, r7, #7
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	0018      	movs	r0, r3
 8001d90:	2303      	movs	r3, #3
 8001d92:	4003      	ands	r3, r0
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d98:	4809      	ldr	r0, [pc, #36]	; (8001dc0 <__NVIC_SetPriority+0xd8>)
 8001d9a:	1dfb      	adds	r3, r7, #7
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	001c      	movs	r4, r3
 8001da0:	230f      	movs	r3, #15
 8001da2:	4023      	ands	r3, r4
 8001da4:	3b08      	subs	r3, #8
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	430a      	orrs	r2, r1
 8001daa:	3306      	adds	r3, #6
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	18c3      	adds	r3, r0, r3
 8001db0:	3304      	adds	r3, #4
 8001db2:	601a      	str	r2, [r3, #0]
}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b003      	add	sp, #12
 8001dba:	bd90      	pop	{r4, r7, pc}
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	1e5a      	subs	r2, r3, #1
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	045b      	lsls	r3, r3, #17
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d301      	bcc.n	8001ddc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e010      	b.n	8001dfe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <SysTick_Config+0x44>)
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	3a01      	subs	r2, #1
 8001de2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de4:	2301      	movs	r3, #1
 8001de6:	425b      	negs	r3, r3
 8001de8:	2103      	movs	r1, #3
 8001dea:	0018      	movs	r0, r3
 8001dec:	f7ff ff7c 	bl	8001ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <SysTick_Config+0x44>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <SysTick_Config+0x44>)
 8001df8:	2207      	movs	r2, #7
 8001dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	0018      	movs	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b002      	add	sp, #8
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	e000e010 	.word	0xe000e010

08001e0c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	210f      	movs	r1, #15
 8001e18:	187b      	adds	r3, r7, r1
 8001e1a:	1c02      	adds	r2, r0, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	187b      	adds	r3, r7, r1
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	b25b      	sxtb	r3, r3
 8001e26:	0011      	movs	r1, r2
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f7ff ff5d 	bl	8001ce8 <__NVIC_SetPriority>
}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b004      	add	sp, #16
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	0018      	movs	r0, r3
 8001e42:	f7ff ffbf 	bl	8001dc4 <SysTick_Config>
 8001e46:	0003      	movs	r3, r0
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5e:	e14f      	b.n	8002100 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2101      	movs	r1, #1
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4091      	lsls	r1, r2
 8001e6a:	000a      	movs	r2, r1
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d100      	bne.n	8001e78 <HAL_GPIO_Init+0x28>
 8001e76:	e140      	b.n	80020fa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d005      	beq.n	8001e90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2203      	movs	r2, #3
 8001e8a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d130      	bne.n	8001ef2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	0013      	movs	r3, r2
 8001ea0:	43da      	mvns	r2, r3
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	0013      	movs	r3, r2
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	0013      	movs	r3, r2
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	091b      	lsrs	r3, r3, #4
 8001edc:	2201      	movs	r2, #1
 8001ede:	401a      	ands	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	0013      	movs	r3, r2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d017      	beq.n	8001f2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	0013      	movs	r3, r2
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	0013      	movs	r3, r2
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2203      	movs	r2, #3
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d123      	bne.n	8001f82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	08da      	lsrs	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3208      	adds	r2, #8
 8001f42:	0092      	lsls	r2, r2, #2
 8001f44:	58d3      	ldr	r3, [r2, r3]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2207      	movs	r2, #7
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	220f      	movs	r2, #15
 8001f52:	409a      	lsls	r2, r3
 8001f54:	0013      	movs	r3, r2
 8001f56:	43da      	mvns	r2, r3
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2107      	movs	r1, #7
 8001f66:	400b      	ands	r3, r1
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	0013      	movs	r3, r2
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	0092      	lsls	r2, r2, #2
 8001f7e:	6939      	ldr	r1, [r7, #16]
 8001f80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	0013      	movs	r3, r2
 8001f92:	43da      	mvns	r2, r3
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	401a      	ands	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	0013      	movs	r3, r2
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	23c0      	movs	r3, #192	; 0xc0
 8001fbc:	029b      	lsls	r3, r3, #10
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d100      	bne.n	8001fc4 <HAL_GPIO_Init+0x174>
 8001fc2:	e09a      	b.n	80020fa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc4:	4b54      	ldr	r3, [pc, #336]	; (8002118 <HAL_GPIO_Init+0x2c8>)
 8001fc6:	699a      	ldr	r2, [r3, #24]
 8001fc8:	4b53      	ldr	r3, [pc, #332]	; (8002118 <HAL_GPIO_Init+0x2c8>)
 8001fca:	2101      	movs	r1, #1
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	619a      	str	r2, [r3, #24]
 8001fd0:	4b51      	ldr	r3, [pc, #324]	; (8002118 <HAL_GPIO_Init+0x2c8>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fdc:	4a4f      	ldr	r2, [pc, #316]	; (800211c <HAL_GPIO_Init+0x2cc>)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	589b      	ldr	r3, [r3, r2]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2203      	movs	r2, #3
 8001fee:	4013      	ands	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	220f      	movs	r2, #15
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	0013      	movs	r3, r2
 8001ff8:	43da      	mvns	r2, r3
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	2390      	movs	r3, #144	; 0x90
 8002004:	05db      	lsls	r3, r3, #23
 8002006:	429a      	cmp	r2, r3
 8002008:	d013      	beq.n	8002032 <HAL_GPIO_Init+0x1e2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a44      	ldr	r2, [pc, #272]	; (8002120 <HAL_GPIO_Init+0x2d0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00d      	beq.n	800202e <HAL_GPIO_Init+0x1de>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a43      	ldr	r2, [pc, #268]	; (8002124 <HAL_GPIO_Init+0x2d4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d007      	beq.n	800202a <HAL_GPIO_Init+0x1da>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a42      	ldr	r2, [pc, #264]	; (8002128 <HAL_GPIO_Init+0x2d8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_GPIO_Init+0x1d6>
 8002022:	2303      	movs	r3, #3
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x1e4>
 8002026:	2305      	movs	r3, #5
 8002028:	e004      	b.n	8002034 <HAL_GPIO_Init+0x1e4>
 800202a:	2302      	movs	r3, #2
 800202c:	e002      	b.n	8002034 <HAL_GPIO_Init+0x1e4>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_GPIO_Init+0x1e4>
 8002032:	2300      	movs	r3, #0
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	2103      	movs	r1, #3
 8002038:	400a      	ands	r2, r1
 800203a:	0092      	lsls	r2, r2, #2
 800203c:	4093      	lsls	r3, r2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002044:	4935      	ldr	r1, [pc, #212]	; (800211c <HAL_GPIO_Init+0x2cc>)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	3302      	adds	r3, #2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002052:	4b36      	ldr	r3, [pc, #216]	; (800212c <HAL_GPIO_Init+0x2dc>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	43da      	mvns	r2, r3
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	025b      	lsls	r3, r3, #9
 800206a:	4013      	ands	r3, r2
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002076:	4b2d      	ldr	r3, [pc, #180]	; (800212c <HAL_GPIO_Init+0x2dc>)
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800207c:	4b2b      	ldr	r3, [pc, #172]	; (800212c <HAL_GPIO_Init+0x2dc>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	43da      	mvns	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	029b      	lsls	r3, r3, #10
 8002094:	4013      	ands	r3, r2
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020a0:	4b22      	ldr	r3, [pc, #136]	; (800212c <HAL_GPIO_Init+0x2dc>)
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020a6:	4b21      	ldr	r3, [pc, #132]	; (800212c <HAL_GPIO_Init+0x2dc>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	43da      	mvns	r2, r3
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	035b      	lsls	r3, r3, #13
 80020be:	4013      	ands	r3, r2
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020ca:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_GPIO_Init+0x2dc>)
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80020d0:	4b16      	ldr	r3, [pc, #88]	; (800212c <HAL_GPIO_Init+0x2dc>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	43da      	mvns	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	039b      	lsls	r3, r3, #14
 80020e8:	4013      	ands	r3, r2
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020f4:	4b0d      	ldr	r3, [pc, #52]	; (800212c <HAL_GPIO_Init+0x2dc>)
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3301      	adds	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	40da      	lsrs	r2, r3
 8002108:	1e13      	subs	r3, r2, #0
 800210a:	d000      	beq.n	800210e <HAL_GPIO_Init+0x2be>
 800210c:	e6a8      	b.n	8001e60 <HAL_GPIO_Init+0x10>
  } 
}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	46c0      	nop			; (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b006      	add	sp, #24
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000
 800211c:	40010000 	.word	0x40010000
 8002120:	48000400 	.word	0x48000400
 8002124:	48000800 	.word	0x48000800
 8002128:	48000c00 	.word	0x48000c00
 800212c:	40010400 	.word	0x40010400

08002130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	0008      	movs	r0, r1
 800213a:	0011      	movs	r1, r2
 800213c:	1cbb      	adds	r3, r7, #2
 800213e:	1c02      	adds	r2, r0, #0
 8002140:	801a      	strh	r2, [r3, #0]
 8002142:	1c7b      	adds	r3, r7, #1
 8002144:	1c0a      	adds	r2, r1, #0
 8002146:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002148:	1c7b      	adds	r3, r7, #1
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d004      	beq.n	800215a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002150:	1cbb      	adds	r3, r7, #2
 8002152:	881a      	ldrh	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002158:	e003      	b.n	8002162 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800215a:	1cbb      	adds	r3, r7, #2
 800215c:	881a      	ldrh	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	46bd      	mov	sp, r7
 8002166:	b002      	add	sp, #8
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e082      	b.n	8002284 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2241      	movs	r2, #65	; 0x41
 8002182:	5c9b      	ldrb	r3, [r3, r2]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d107      	bne.n	800219a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2240      	movs	r2, #64	; 0x40
 800218e:	2100      	movs	r1, #0
 8002190:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	0018      	movs	r0, r3
 8002196:	f7ff fc3f 	bl	8001a18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2241      	movs	r2, #65	; 0x41
 800219e:	2124      	movs	r1, #36	; 0x24
 80021a0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2101      	movs	r1, #1
 80021ae:	438a      	bics	r2, r1
 80021b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4934      	ldr	r1, [pc, #208]	; (800228c <HAL_I2C_Init+0x120>)
 80021bc:	400a      	ands	r2, r1
 80021be:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4931      	ldr	r1, [pc, #196]	; (8002290 <HAL_I2C_Init+0x124>)
 80021cc:	400a      	ands	r2, r1
 80021ce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d108      	bne.n	80021ea <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2180      	movs	r1, #128	; 0x80
 80021e2:	0209      	lsls	r1, r1, #8
 80021e4:	430a      	orrs	r2, r1
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	e007      	b.n	80021fa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2184      	movs	r1, #132	; 0x84
 80021f4:	0209      	lsls	r1, r1, #8
 80021f6:	430a      	orrs	r2, r1
 80021f8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d104      	bne.n	800220c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2280      	movs	r2, #128	; 0x80
 8002208:	0112      	lsls	r2, r2, #4
 800220a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	491f      	ldr	r1, [pc, #124]	; (8002294 <HAL_I2C_Init+0x128>)
 8002218:	430a      	orrs	r2, r1
 800221a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	491a      	ldr	r1, [pc, #104]	; (8002290 <HAL_I2C_Init+0x124>)
 8002228:	400a      	ands	r2, r1
 800222a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	431a      	orrs	r2, r3
 8002236:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69d9      	ldr	r1, [r3, #28]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1a      	ldr	r2, [r3, #32]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2101      	movs	r1, #1
 8002262:	430a      	orrs	r2, r1
 8002264:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2241      	movs	r2, #65	; 0x41
 8002270:	2120      	movs	r1, #32
 8002272:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2242      	movs	r2, #66	; 0x42
 800227e:	2100      	movs	r1, #0
 8002280:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	0018      	movs	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	b002      	add	sp, #8
 800228a:	bd80      	pop	{r7, pc}
 800228c:	f0ffffff 	.word	0xf0ffffff
 8002290:	ffff7fff 	.word	0xffff7fff
 8002294:	02008000 	.word	0x02008000

08002298 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b089      	sub	sp, #36	; 0x24
 800229c:	af02      	add	r7, sp, #8
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	000c      	movs	r4, r1
 80022a2:	0010      	movs	r0, r2
 80022a4:	0019      	movs	r1, r3
 80022a6:	230a      	movs	r3, #10
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	1c22      	adds	r2, r4, #0
 80022ac:	801a      	strh	r2, [r3, #0]
 80022ae:	2308      	movs	r3, #8
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	1c02      	adds	r2, r0, #0
 80022b4:	801a      	strh	r2, [r3, #0]
 80022b6:	1dbb      	adds	r3, r7, #6
 80022b8:	1c0a      	adds	r2, r1, #0
 80022ba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2241      	movs	r2, #65	; 0x41
 80022c0:	5c9b      	ldrb	r3, [r3, r2]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b20      	cmp	r3, #32
 80022c6:	d000      	beq.n	80022ca <HAL_I2C_Mem_Write+0x32>
 80022c8:	e10c      	b.n	80024e4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d004      	beq.n	80022da <HAL_I2C_Mem_Write+0x42>
 80022d0:	232c      	movs	r3, #44	; 0x2c
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2280      	movs	r2, #128	; 0x80
 80022de:	0092      	lsls	r2, r2, #2
 80022e0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e0ff      	b.n	80024e6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2240      	movs	r2, #64	; 0x40
 80022ea:	5c9b      	ldrb	r3, [r3, r2]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_I2C_Mem_Write+0x5c>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e0f8      	b.n	80024e6 <HAL_I2C_Mem_Write+0x24e>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2240      	movs	r2, #64	; 0x40
 80022f8:	2101      	movs	r1, #1
 80022fa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022fc:	f7ff fcc6 	bl	8001c8c <HAL_GetTick>
 8002300:	0003      	movs	r3, r0
 8002302:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	0219      	lsls	r1, r3, #8
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	2319      	movs	r3, #25
 8002310:	2201      	movs	r2, #1
 8002312:	f000 fb0b 	bl	800292c <I2C_WaitOnFlagUntilTimeout>
 8002316:	1e03      	subs	r3, r0, #0
 8002318:	d001      	beq.n	800231e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e0e3      	b.n	80024e6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2241      	movs	r2, #65	; 0x41
 8002322:	2121      	movs	r1, #33	; 0x21
 8002324:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2242      	movs	r2, #66	; 0x42
 800232a:	2140      	movs	r1, #64	; 0x40
 800232c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002338:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	222c      	movs	r2, #44	; 0x2c
 800233e:	18ba      	adds	r2, r7, r2
 8002340:	8812      	ldrh	r2, [r2, #0]
 8002342:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800234a:	1dbb      	adds	r3, r7, #6
 800234c:	881c      	ldrh	r4, [r3, #0]
 800234e:	2308      	movs	r3, #8
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	881a      	ldrh	r2, [r3, #0]
 8002354:	230a      	movs	r3, #10
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	8819      	ldrh	r1, [r3, #0]
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	0023      	movs	r3, r4
 8002366:	f000 f9f9 	bl	800275c <I2C_RequestMemoryWrite>
 800236a:	1e03      	subs	r3, r0, #0
 800236c:	d005      	beq.n	800237a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2240      	movs	r2, #64	; 0x40
 8002372:	2100      	movs	r1, #0
 8002374:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e0b5      	b.n	80024e6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	2bff      	cmp	r3, #255	; 0xff
 8002382:	d911      	bls.n	80023a8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	22ff      	movs	r2, #255	; 0xff
 8002388:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238e:	b2da      	uxtb	r2, r3
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	045c      	lsls	r4, r3, #17
 8002394:	230a      	movs	r3, #10
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	8819      	ldrh	r1, [r3, #0]
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	2300      	movs	r3, #0
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	0023      	movs	r3, r4
 80023a2:	f000 fbf7 	bl	8002b94 <I2C_TransferConfig>
 80023a6:	e012      	b.n	80023ce <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	049c      	lsls	r4, r3, #18
 80023bc:	230a      	movs	r3, #10
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	8819      	ldrh	r1, [r3, #0]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	2300      	movs	r3, #0
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	0023      	movs	r3, r4
 80023ca:	f000 fbe3 	bl	8002b94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	0018      	movs	r0, r3
 80023d6:	f000 fae8 	bl	80029aa <I2C_WaitOnTXISFlagUntilTimeout>
 80023da:	1e03      	subs	r3, r0, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e081      	b.n	80024e6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	781a      	ldrb	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002416:	b29b      	uxth	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d03a      	beq.n	8002492 <HAL_I2C_Mem_Write+0x1fa>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002420:	2b00      	cmp	r3, #0
 8002422:	d136      	bne.n	8002492 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	0013      	movs	r3, r2
 800242e:	2200      	movs	r2, #0
 8002430:	2180      	movs	r1, #128	; 0x80
 8002432:	f000 fa7b 	bl	800292c <I2C_WaitOnFlagUntilTimeout>
 8002436:	1e03      	subs	r3, r0, #0
 8002438:	d001      	beq.n	800243e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e053      	b.n	80024e6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002442:	b29b      	uxth	r3, r3
 8002444:	2bff      	cmp	r3, #255	; 0xff
 8002446:	d911      	bls.n	800246c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	22ff      	movs	r2, #255	; 0xff
 800244c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002452:	b2da      	uxtb	r2, r3
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	045c      	lsls	r4, r3, #17
 8002458:	230a      	movs	r3, #10
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	8819      	ldrh	r1, [r3, #0]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	2300      	movs	r3, #0
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	0023      	movs	r3, r4
 8002466:	f000 fb95 	bl	8002b94 <I2C_TransferConfig>
 800246a:	e012      	b.n	8002492 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247a:	b2da      	uxtb	r2, r3
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	049c      	lsls	r4, r3, #18
 8002480:	230a      	movs	r3, #10
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	8819      	ldrh	r1, [r3, #0]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	2300      	movs	r3, #0
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	0023      	movs	r3, r4
 800248e:	f000 fb81 	bl	8002b94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d198      	bne.n	80023ce <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 fac0 	bl	8002a28 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024a8:	1e03      	subs	r3, r0, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e01a      	b.n	80024e6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2220      	movs	r2, #32
 80024b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	490b      	ldr	r1, [pc, #44]	; (80024f0 <HAL_I2C_Mem_Write+0x258>)
 80024c4:	400a      	ands	r2, r1
 80024c6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2241      	movs	r2, #65	; 0x41
 80024cc:	2120      	movs	r1, #32
 80024ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2242      	movs	r2, #66	; 0x42
 80024d4:	2100      	movs	r1, #0
 80024d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2240      	movs	r2, #64	; 0x40
 80024dc:	2100      	movs	r1, #0
 80024de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	e000      	b.n	80024e6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80024e4:	2302      	movs	r3, #2
  }
}
 80024e6:	0018      	movs	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b007      	add	sp, #28
 80024ec:	bd90      	pop	{r4, r7, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	fe00e800 	.word	0xfe00e800

080024f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b089      	sub	sp, #36	; 0x24
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	000c      	movs	r4, r1
 80024fe:	0010      	movs	r0, r2
 8002500:	0019      	movs	r1, r3
 8002502:	230a      	movs	r3, #10
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	1c22      	adds	r2, r4, #0
 8002508:	801a      	strh	r2, [r3, #0]
 800250a:	2308      	movs	r3, #8
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	1c02      	adds	r2, r0, #0
 8002510:	801a      	strh	r2, [r3, #0]
 8002512:	1dbb      	adds	r3, r7, #6
 8002514:	1c0a      	adds	r2, r1, #0
 8002516:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2241      	movs	r2, #65	; 0x41
 800251c:	5c9b      	ldrb	r3, [r3, r2]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b20      	cmp	r3, #32
 8002522:	d000      	beq.n	8002526 <HAL_I2C_Mem_Read+0x32>
 8002524:	e110      	b.n	8002748 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	2b00      	cmp	r3, #0
 800252a:	d004      	beq.n	8002536 <HAL_I2C_Mem_Read+0x42>
 800252c:	232c      	movs	r3, #44	; 0x2c
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d105      	bne.n	8002542 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2280      	movs	r2, #128	; 0x80
 800253a:	0092      	lsls	r2, r2, #2
 800253c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e103      	b.n	800274a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2240      	movs	r2, #64	; 0x40
 8002546:	5c9b      	ldrb	r3, [r3, r2]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_I2C_Mem_Read+0x5c>
 800254c:	2302      	movs	r3, #2
 800254e:	e0fc      	b.n	800274a <HAL_I2C_Mem_Read+0x256>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2240      	movs	r2, #64	; 0x40
 8002554:	2101      	movs	r1, #1
 8002556:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002558:	f7ff fb98 	bl	8001c8c <HAL_GetTick>
 800255c:	0003      	movs	r3, r0
 800255e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	0219      	lsls	r1, r3, #8
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	2319      	movs	r3, #25
 800256c:	2201      	movs	r2, #1
 800256e:	f000 f9dd 	bl	800292c <I2C_WaitOnFlagUntilTimeout>
 8002572:	1e03      	subs	r3, r0, #0
 8002574:	d001      	beq.n	800257a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e0e7      	b.n	800274a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2241      	movs	r2, #65	; 0x41
 800257e:	2122      	movs	r1, #34	; 0x22
 8002580:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2242      	movs	r2, #66	; 0x42
 8002586:	2140      	movs	r1, #64	; 0x40
 8002588:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002594:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	222c      	movs	r2, #44	; 0x2c
 800259a:	18ba      	adds	r2, r7, r2
 800259c:	8812      	ldrh	r2, [r2, #0]
 800259e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025a6:	1dbb      	adds	r3, r7, #6
 80025a8:	881c      	ldrh	r4, [r3, #0]
 80025aa:	2308      	movs	r3, #8
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	881a      	ldrh	r2, [r3, #0]
 80025b0:	230a      	movs	r3, #10
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	8819      	ldrh	r1, [r3, #0]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	0023      	movs	r3, r4
 80025c2:	f000 f92f 	bl	8002824 <I2C_RequestMemoryRead>
 80025c6:	1e03      	subs	r3, r0, #0
 80025c8:	d005      	beq.n	80025d6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2240      	movs	r2, #64	; 0x40
 80025ce:	2100      	movs	r1, #0
 80025d0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0b9      	b.n	800274a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2bff      	cmp	r3, #255	; 0xff
 80025de:	d911      	bls.n	8002604 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	22ff      	movs	r2, #255	; 0xff
 80025e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	045c      	lsls	r4, r3, #17
 80025f0:	230a      	movs	r3, #10
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	8819      	ldrh	r1, [r3, #0]
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	4b56      	ldr	r3, [pc, #344]	; (8002754 <HAL_I2C_Mem_Read+0x260>)
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	0023      	movs	r3, r4
 80025fe:	f000 fac9 	bl	8002b94 <I2C_TransferConfig>
 8002602:	e012      	b.n	800262a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002612:	b2da      	uxtb	r2, r3
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	049c      	lsls	r4, r3, #18
 8002618:	230a      	movs	r3, #10
 800261a:	18fb      	adds	r3, r7, r3
 800261c:	8819      	ldrh	r1, [r3, #0]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	4b4c      	ldr	r3, [pc, #304]	; (8002754 <HAL_I2C_Mem_Read+0x260>)
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	0023      	movs	r3, r4
 8002626:	f000 fab5 	bl	8002b94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800262a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	0013      	movs	r3, r2
 8002634:	2200      	movs	r2, #0
 8002636:	2104      	movs	r1, #4
 8002638:	f000 f978 	bl	800292c <I2C_WaitOnFlagUntilTimeout>
 800263c:	1e03      	subs	r3, r0, #0
 800263e:	d001      	beq.n	8002644 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e082      	b.n	800274a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d03a      	beq.n	80026f6 <HAL_I2C_Mem_Read+0x202>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002684:	2b00      	cmp	r3, #0
 8002686:	d136      	bne.n	80026f6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	0013      	movs	r3, r2
 8002692:	2200      	movs	r2, #0
 8002694:	2180      	movs	r1, #128	; 0x80
 8002696:	f000 f949 	bl	800292c <I2C_WaitOnFlagUntilTimeout>
 800269a:	1e03      	subs	r3, r0, #0
 800269c:	d001      	beq.n	80026a2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e053      	b.n	800274a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2bff      	cmp	r3, #255	; 0xff
 80026aa:	d911      	bls.n	80026d0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	22ff      	movs	r2, #255	; 0xff
 80026b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	045c      	lsls	r4, r3, #17
 80026bc:	230a      	movs	r3, #10
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	8819      	ldrh	r1, [r3, #0]
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	2300      	movs	r3, #0
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	0023      	movs	r3, r4
 80026ca:	f000 fa63 	bl	8002b94 <I2C_TransferConfig>
 80026ce:	e012      	b.n	80026f6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	049c      	lsls	r4, r3, #18
 80026e4:	230a      	movs	r3, #10
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	8819      	ldrh	r1, [r3, #0]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	2300      	movs	r3, #0
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	0023      	movs	r3, r4
 80026f2:	f000 fa4f 	bl	8002b94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d194      	bne.n	800262a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	0018      	movs	r0, r3
 8002708:	f000 f98e 	bl	8002a28 <I2C_WaitOnSTOPFlagUntilTimeout>
 800270c:	1e03      	subs	r3, r0, #0
 800270e:	d001      	beq.n	8002714 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e01a      	b.n	800274a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2220      	movs	r2, #32
 800271a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	490c      	ldr	r1, [pc, #48]	; (8002758 <HAL_I2C_Mem_Read+0x264>)
 8002728:	400a      	ands	r2, r1
 800272a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2241      	movs	r2, #65	; 0x41
 8002730:	2120      	movs	r1, #32
 8002732:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2242      	movs	r2, #66	; 0x42
 8002738:	2100      	movs	r1, #0
 800273a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2240      	movs	r2, #64	; 0x40
 8002740:	2100      	movs	r1, #0
 8002742:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	e000      	b.n	800274a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002748:	2302      	movs	r3, #2
  }
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b007      	add	sp, #28
 8002750:	bd90      	pop	{r4, r7, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	80002400 	.word	0x80002400
 8002758:	fe00e800 	.word	0xfe00e800

0800275c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800275c:	b5b0      	push	{r4, r5, r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af02      	add	r7, sp, #8
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	000c      	movs	r4, r1
 8002766:	0010      	movs	r0, r2
 8002768:	0019      	movs	r1, r3
 800276a:	250a      	movs	r5, #10
 800276c:	197b      	adds	r3, r7, r5
 800276e:	1c22      	adds	r2, r4, #0
 8002770:	801a      	strh	r2, [r3, #0]
 8002772:	2308      	movs	r3, #8
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	1c02      	adds	r2, r0, #0
 8002778:	801a      	strh	r2, [r3, #0]
 800277a:	1dbb      	adds	r3, r7, #6
 800277c:	1c0a      	adds	r2, r1, #0
 800277e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002780:	1dbb      	adds	r3, r7, #6
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	b2da      	uxtb	r2, r3
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	045c      	lsls	r4, r3, #17
 800278a:	197b      	adds	r3, r7, r5
 800278c:	8819      	ldrh	r1, [r3, #0]
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	4b23      	ldr	r3, [pc, #140]	; (8002820 <I2C_RequestMemoryWrite+0xc4>)
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	0023      	movs	r3, r4
 8002796:	f000 f9fd 	bl	8002b94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800279a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279c:	6a39      	ldr	r1, [r7, #32]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	0018      	movs	r0, r3
 80027a2:	f000 f902 	bl	80029aa <I2C_WaitOnTXISFlagUntilTimeout>
 80027a6:	1e03      	subs	r3, r0, #0
 80027a8:	d001      	beq.n	80027ae <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e033      	b.n	8002816 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027ae:	1dbb      	adds	r3, r7, #6
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d107      	bne.n	80027c6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027b6:	2308      	movs	r3, #8
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28
 80027c4:	e019      	b.n	80027fa <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027c6:	2308      	movs	r3, #8
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027da:	6a39      	ldr	r1, [r7, #32]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	0018      	movs	r0, r3
 80027e0:	f000 f8e3 	bl	80029aa <I2C_WaitOnTXISFlagUntilTimeout>
 80027e4:	1e03      	subs	r3, r0, #0
 80027e6:	d001      	beq.n	80027ec <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e014      	b.n	8002816 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027ec:	2308      	movs	r3, #8
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80027fa:	6a3a      	ldr	r2, [r7, #32]
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	0013      	movs	r3, r2
 8002804:	2200      	movs	r2, #0
 8002806:	2180      	movs	r1, #128	; 0x80
 8002808:	f000 f890 	bl	800292c <I2C_WaitOnFlagUntilTimeout>
 800280c:	1e03      	subs	r3, r0, #0
 800280e:	d001      	beq.n	8002814 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	0018      	movs	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	b004      	add	sp, #16
 800281c:	bdb0      	pop	{r4, r5, r7, pc}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	80002000 	.word	0x80002000

08002824 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002824:	b5b0      	push	{r4, r5, r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	000c      	movs	r4, r1
 800282e:	0010      	movs	r0, r2
 8002830:	0019      	movs	r1, r3
 8002832:	250a      	movs	r5, #10
 8002834:	197b      	adds	r3, r7, r5
 8002836:	1c22      	adds	r2, r4, #0
 8002838:	801a      	strh	r2, [r3, #0]
 800283a:	2308      	movs	r3, #8
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	1c02      	adds	r2, r0, #0
 8002840:	801a      	strh	r2, [r3, #0]
 8002842:	1dbb      	adds	r3, r7, #6
 8002844:	1c0a      	adds	r2, r1, #0
 8002846:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002848:	1dbb      	adds	r3, r7, #6
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	197b      	adds	r3, r7, r5
 8002850:	8819      	ldrh	r1, [r3, #0]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	4b23      	ldr	r3, [pc, #140]	; (80028e4 <I2C_RequestMemoryRead+0xc0>)
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	2300      	movs	r3, #0
 800285a:	f000 f99b 	bl	8002b94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800285e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002860:	6a39      	ldr	r1, [r7, #32]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	0018      	movs	r0, r3
 8002866:	f000 f8a0 	bl	80029aa <I2C_WaitOnTXISFlagUntilTimeout>
 800286a:	1e03      	subs	r3, r0, #0
 800286c:	d001      	beq.n	8002872 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e033      	b.n	80028da <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002872:	1dbb      	adds	r3, r7, #6
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d107      	bne.n	800288a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800287a:	2308      	movs	r3, #8
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	b2da      	uxtb	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	629a      	str	r2, [r3, #40]	; 0x28
 8002888:	e019      	b.n	80028be <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800288a:	2308      	movs	r3, #8
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	0a1b      	lsrs	r3, r3, #8
 8002892:	b29b      	uxth	r3, r3
 8002894:	b2da      	uxtb	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800289c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289e:	6a39      	ldr	r1, [r7, #32]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	0018      	movs	r0, r3
 80028a4:	f000 f881 	bl	80029aa <I2C_WaitOnTXISFlagUntilTimeout>
 80028a8:	1e03      	subs	r3, r0, #0
 80028aa:	d001      	beq.n	80028b0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e014      	b.n	80028da <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028b0:	2308      	movs	r3, #8
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80028be:	6a3a      	ldr	r2, [r7, #32]
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	0013      	movs	r3, r2
 80028c8:	2200      	movs	r2, #0
 80028ca:	2140      	movs	r1, #64	; 0x40
 80028cc:	f000 f82e 	bl	800292c <I2C_WaitOnFlagUntilTimeout>
 80028d0:	1e03      	subs	r3, r0, #0
 80028d2:	d001      	beq.n	80028d8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	0018      	movs	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	b004      	add	sp, #16
 80028e0:	bdb0      	pop	{r4, r5, r7, pc}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	80002000 	.word	0x80002000

080028e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	2202      	movs	r2, #2
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d103      	bne.n	8002906 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2200      	movs	r2, #0
 8002904:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	2201      	movs	r2, #1
 800290e:	4013      	ands	r3, r2
 8002910:	2b01      	cmp	r3, #1
 8002912:	d007      	beq.n	8002924 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2101      	movs	r1, #1
 8002920:	430a      	orrs	r2, r1
 8002922:	619a      	str	r2, [r3, #24]
  }
}
 8002924:	46c0      	nop			; (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b002      	add	sp, #8
 800292a:	bd80      	pop	{r7, pc}

0800292c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	1dfb      	adds	r3, r7, #7
 800293a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800293c:	e021      	b.n	8002982 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	3301      	adds	r3, #1
 8002942:	d01e      	beq.n	8002982 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002944:	f7ff f9a2 	bl	8001c8c <HAL_GetTick>
 8002948:	0002      	movs	r2, r0
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d302      	bcc.n	800295a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d113      	bne.n	8002982 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	2220      	movs	r2, #32
 8002960:	431a      	orrs	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2241      	movs	r2, #65	; 0x41
 800296a:	2120      	movs	r1, #32
 800296c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2242      	movs	r2, #66	; 0x42
 8002972:	2100      	movs	r1, #0
 8002974:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2240      	movs	r2, #64	; 0x40
 800297a:	2100      	movs	r1, #0
 800297c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e00f      	b.n	80029a2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	4013      	ands	r3, r2
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	425a      	negs	r2, r3
 8002992:	4153      	adcs	r3, r2
 8002994:	b2db      	uxtb	r3, r3
 8002996:	001a      	movs	r2, r3
 8002998:	1dfb      	adds	r3, r7, #7
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d0ce      	beq.n	800293e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	0018      	movs	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b004      	add	sp, #16
 80029a8:	bd80      	pop	{r7, pc}

080029aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b084      	sub	sp, #16
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029b6:	e02b      	b.n	8002a10 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	0018      	movs	r0, r3
 80029c0:	f000 f86e 	bl	8002aa0 <I2C_IsAcknowledgeFailed>
 80029c4:	1e03      	subs	r3, r0, #0
 80029c6:	d001      	beq.n	80029cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e029      	b.n	8002a20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	3301      	adds	r3, #1
 80029d0:	d01e      	beq.n	8002a10 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d2:	f7ff f95b 	bl	8001c8c <HAL_GetTick>
 80029d6:	0002      	movs	r2, r0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d302      	bcc.n	80029e8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d113      	bne.n	8002a10 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ec:	2220      	movs	r2, #32
 80029ee:	431a      	orrs	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2241      	movs	r2, #65	; 0x41
 80029f8:	2120      	movs	r1, #32
 80029fa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2242      	movs	r2, #66	; 0x42
 8002a00:	2100      	movs	r1, #0
 8002a02:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2240      	movs	r2, #64	; 0x40
 8002a08:	2100      	movs	r1, #0
 8002a0a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e007      	b.n	8002a20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2202      	movs	r2, #2
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d1cc      	bne.n	80029b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	0018      	movs	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b004      	add	sp, #16
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a34:	e028      	b.n	8002a88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f000 f82f 	bl	8002aa0 <I2C_IsAcknowledgeFailed>
 8002a42:	1e03      	subs	r3, r0, #0
 8002a44:	d001      	beq.n	8002a4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e026      	b.n	8002a98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a4a:	f7ff f91f 	bl	8001c8c <HAL_GetTick>
 8002a4e:	0002      	movs	r2, r0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d302      	bcc.n	8002a60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d113      	bne.n	8002a88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	2220      	movs	r2, #32
 8002a66:	431a      	orrs	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2241      	movs	r2, #65	; 0x41
 8002a70:	2120      	movs	r1, #32
 8002a72:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2242      	movs	r2, #66	; 0x42
 8002a78:	2100      	movs	r1, #0
 8002a7a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2240      	movs	r2, #64	; 0x40
 8002a80:	2100      	movs	r1, #0
 8002a82:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e007      	b.n	8002a98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d1cf      	bne.n	8002a36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	0018      	movs	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b004      	add	sp, #16
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2210      	movs	r2, #16
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d164      	bne.n	8002b84 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	049b      	lsls	r3, r3, #18
 8002ac4:	401a      	ands	r2, r3
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	049b      	lsls	r3, r3, #18
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d02b      	beq.n	8002b26 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2180      	movs	r1, #128	; 0x80
 8002ada:	01c9      	lsls	r1, r1, #7
 8002adc:	430a      	orrs	r2, r1
 8002ade:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ae0:	e021      	b.n	8002b26 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	d01e      	beq.n	8002b26 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae8:	f7ff f8d0 	bl	8001c8c <HAL_GetTick>
 8002aec:	0002      	movs	r2, r0
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d302      	bcc.n	8002afe <I2C_IsAcknowledgeFailed+0x5e>
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d113      	bne.n	8002b26 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	2220      	movs	r2, #32
 8002b04:	431a      	orrs	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2241      	movs	r2, #65	; 0x41
 8002b0e:	2120      	movs	r1, #32
 8002b10:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2242      	movs	r2, #66	; 0x42
 8002b16:	2100      	movs	r1, #0
 8002b18:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2240      	movs	r2, #64	; 0x40
 8002b1e:	2100      	movs	r1, #0
 8002b20:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e02f      	b.n	8002b86 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d1d6      	bne.n	8002ae2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2210      	movs	r2, #16
 8002b3a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2220      	movs	r2, #32
 8002b42:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	0018      	movs	r0, r3
 8002b48:	f7ff fece 	bl	80028e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	490e      	ldr	r1, [pc, #56]	; (8002b90 <I2C_IsAcknowledgeFailed+0xf0>)
 8002b58:	400a      	ands	r2, r1
 8002b5a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b60:	2204      	movs	r2, #4
 8002b62:	431a      	orrs	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2241      	movs	r2, #65	; 0x41
 8002b6c:	2120      	movs	r1, #32
 8002b6e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2242      	movs	r2, #66	; 0x42
 8002b74:	2100      	movs	r1, #0
 8002b76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2240      	movs	r2, #64	; 0x40
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	0018      	movs	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b004      	add	sp, #16
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	fe00e800 	.word	0xfe00e800

08002b94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	0008      	movs	r0, r1
 8002b9e:	0011      	movs	r1, r2
 8002ba0:	607b      	str	r3, [r7, #4]
 8002ba2:	240a      	movs	r4, #10
 8002ba4:	193b      	adds	r3, r7, r4
 8002ba6:	1c02      	adds	r2, r0, #0
 8002ba8:	801a      	strh	r2, [r3, #0]
 8002baa:	2009      	movs	r0, #9
 8002bac:	183b      	adds	r3, r7, r0
 8002bae:	1c0a      	adds	r2, r1, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	6a3a      	ldr	r2, [r7, #32]
 8002bba:	0d51      	lsrs	r1, r2, #21
 8002bbc:	2280      	movs	r2, #128	; 0x80
 8002bbe:	00d2      	lsls	r2, r2, #3
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	490e      	ldr	r1, [pc, #56]	; (8002bfc <I2C_TransferConfig+0x68>)
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	43d2      	mvns	r2, r2
 8002bc8:	401a      	ands	r2, r3
 8002bca:	0011      	movs	r1, r2
 8002bcc:	193b      	adds	r3, r7, r4
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	059b      	lsls	r3, r3, #22
 8002bd2:	0d9a      	lsrs	r2, r3, #22
 8002bd4:	183b      	adds	r3, r7, r0
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	0418      	lsls	r0, r3, #16
 8002bda:	23ff      	movs	r3, #255	; 0xff
 8002bdc:	041b      	lsls	r3, r3, #16
 8002bde:	4003      	ands	r3, r0
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	431a      	orrs	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b005      	add	sp, #20
 8002bf8:	bd90      	pop	{r4, r7, pc}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	03ff63ff 	.word	0x03ff63ff

08002c00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2241      	movs	r2, #65	; 0x41
 8002c0e:	5c9b      	ldrb	r3, [r3, r2]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d138      	bne.n	8002c88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2240      	movs	r2, #64	; 0x40
 8002c1a:	5c9b      	ldrb	r3, [r3, r2]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e032      	b.n	8002c8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2240      	movs	r2, #64	; 0x40
 8002c28:	2101      	movs	r1, #1
 8002c2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2241      	movs	r2, #65	; 0x41
 8002c30:	2124      	movs	r1, #36	; 0x24
 8002c32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2101      	movs	r1, #1
 8002c40:	438a      	bics	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4911      	ldr	r1, [pc, #68]	; (8002c94 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002c50:	400a      	ands	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6819      	ldr	r1, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2101      	movs	r1, #1
 8002c70:	430a      	orrs	r2, r1
 8002c72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2241      	movs	r2, #65	; 0x41
 8002c78:	2120      	movs	r1, #32
 8002c7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2240      	movs	r2, #64	; 0x40
 8002c80:	2100      	movs	r1, #0
 8002c82:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	e000      	b.n	8002c8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c88:	2302      	movs	r3, #2
  }
}
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b002      	add	sp, #8
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	ffffefff 	.word	0xffffefff

08002c98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2241      	movs	r2, #65	; 0x41
 8002ca6:	5c9b      	ldrb	r3, [r3, r2]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d139      	bne.n	8002d22 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2240      	movs	r2, #64	; 0x40
 8002cb2:	5c9b      	ldrb	r3, [r3, r2]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e033      	b.n	8002d24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2240      	movs	r2, #64	; 0x40
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2241      	movs	r2, #65	; 0x41
 8002cc8:	2124      	movs	r1, #36	; 0x24
 8002cca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	438a      	bics	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4a11      	ldr	r2, [pc, #68]	; (8002d2c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	021b      	lsls	r3, r3, #8
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2241      	movs	r2, #65	; 0x41
 8002d12:	2120      	movs	r1, #32
 8002d14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2240      	movs	r2, #64	; 0x40
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e000      	b.n	8002d24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d22:	2302      	movs	r3, #2
  }
}
 8002d24:	0018      	movs	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b004      	add	sp, #16
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	fffff0ff 	.word	0xfffff0ff

08002d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e305      	b.n	800334e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2201      	movs	r2, #1
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d100      	bne.n	8002d4e <HAL_RCC_OscConfig+0x1e>
 8002d4c:	e08d      	b.n	8002e6a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d4e:	4bc5      	ldr	r3, [pc, #788]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	220c      	movs	r2, #12
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d00e      	beq.n	8002d78 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d5a:	4bc2      	ldr	r3, [pc, #776]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	220c      	movs	r2, #12
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d116      	bne.n	8002d94 <HAL_RCC_OscConfig+0x64>
 8002d66:	4bbf      	ldr	r3, [pc, #764]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	23c0      	movs	r3, #192	; 0xc0
 8002d6c:	025b      	lsls	r3, r3, #9
 8002d6e:	401a      	ands	r2, r3
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	025b      	lsls	r3, r3, #9
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d10d      	bne.n	8002d94 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d78:	4bba      	ldr	r3, [pc, #744]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	029b      	lsls	r3, r3, #10
 8002d80:	4013      	ands	r3, r2
 8002d82:	d100      	bne.n	8002d86 <HAL_RCC_OscConfig+0x56>
 8002d84:	e070      	b.n	8002e68 <HAL_RCC_OscConfig+0x138>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d000      	beq.n	8002d90 <HAL_RCC_OscConfig+0x60>
 8002d8e:	e06b      	b.n	8002e68 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e2dc      	b.n	800334e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d107      	bne.n	8002dac <HAL_RCC_OscConfig+0x7c>
 8002d9c:	4bb1      	ldr	r3, [pc, #708]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4bb0      	ldr	r3, [pc, #704]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002da2:	2180      	movs	r1, #128	; 0x80
 8002da4:	0249      	lsls	r1, r1, #9
 8002da6:	430a      	orrs	r2, r1
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	e02f      	b.n	8002e0c <HAL_RCC_OscConfig+0xdc>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10c      	bne.n	8002dce <HAL_RCC_OscConfig+0x9e>
 8002db4:	4bab      	ldr	r3, [pc, #684]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4baa      	ldr	r3, [pc, #680]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002dba:	49ab      	ldr	r1, [pc, #684]	; (8003068 <HAL_RCC_OscConfig+0x338>)
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	4ba8      	ldr	r3, [pc, #672]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4ba7      	ldr	r3, [pc, #668]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002dc6:	49a9      	ldr	r1, [pc, #676]	; (800306c <HAL_RCC_OscConfig+0x33c>)
 8002dc8:	400a      	ands	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	e01e      	b.n	8002e0c <HAL_RCC_OscConfig+0xdc>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b05      	cmp	r3, #5
 8002dd4:	d10e      	bne.n	8002df4 <HAL_RCC_OscConfig+0xc4>
 8002dd6:	4ba3      	ldr	r3, [pc, #652]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4ba2      	ldr	r3, [pc, #648]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002ddc:	2180      	movs	r1, #128	; 0x80
 8002dde:	02c9      	lsls	r1, r1, #11
 8002de0:	430a      	orrs	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	4b9f      	ldr	r3, [pc, #636]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4b9e      	ldr	r3, [pc, #632]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002dea:	2180      	movs	r1, #128	; 0x80
 8002dec:	0249      	lsls	r1, r1, #9
 8002dee:	430a      	orrs	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	e00b      	b.n	8002e0c <HAL_RCC_OscConfig+0xdc>
 8002df4:	4b9b      	ldr	r3, [pc, #620]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b9a      	ldr	r3, [pc, #616]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002dfa:	499b      	ldr	r1, [pc, #620]	; (8003068 <HAL_RCC_OscConfig+0x338>)
 8002dfc:	400a      	ands	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	4b98      	ldr	r3, [pc, #608]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4b97      	ldr	r3, [pc, #604]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002e06:	4999      	ldr	r1, [pc, #612]	; (800306c <HAL_RCC_OscConfig+0x33c>)
 8002e08:	400a      	ands	r2, r1
 8002e0a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d014      	beq.n	8002e3e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fe ff3a 	bl	8001c8c <HAL_GetTick>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e1e:	f7fe ff35 	bl	8001c8c <HAL_GetTick>
 8002e22:	0002      	movs	r2, r0
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b64      	cmp	r3, #100	; 0x64
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e28e      	b.n	800334e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e30:	4b8c      	ldr	r3, [pc, #560]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	029b      	lsls	r3, r3, #10
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0xee>
 8002e3c:	e015      	b.n	8002e6a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3e:	f7fe ff25 	bl	8001c8c <HAL_GetTick>
 8002e42:	0003      	movs	r3, r0
 8002e44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e48:	f7fe ff20 	bl	8001c8c <HAL_GetTick>
 8002e4c:	0002      	movs	r2, r0
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	; 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e279      	b.n	800334e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5a:	4b82      	ldr	r3, [pc, #520]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	029b      	lsls	r3, r3, #10
 8002e62:	4013      	ands	r3, r2
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x118>
 8002e66:	e000      	b.n	8002e6a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e68:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	4013      	ands	r3, r2
 8002e72:	d100      	bne.n	8002e76 <HAL_RCC_OscConfig+0x146>
 8002e74:	e06c      	b.n	8002f50 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e76:	4b7b      	ldr	r3, [pc, #492]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	220c      	movs	r2, #12
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d00e      	beq.n	8002e9e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e80:	4b78      	ldr	r3, [pc, #480]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	220c      	movs	r2, #12
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d11f      	bne.n	8002ecc <HAL_RCC_OscConfig+0x19c>
 8002e8c:	4b75      	ldr	r3, [pc, #468]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	23c0      	movs	r3, #192	; 0xc0
 8002e92:	025b      	lsls	r3, r3, #9
 8002e94:	401a      	ands	r2, r3
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	021b      	lsls	r3, r3, #8
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d116      	bne.n	8002ecc <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9e:	4b71      	ldr	r3, [pc, #452]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x184>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e24c      	b.n	800334e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb4:	4b6b      	ldr	r3, [pc, #428]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	22f8      	movs	r2, #248	; 0xf8
 8002eba:	4393      	bics	r3, r2
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	00da      	lsls	r2, r3, #3
 8002ec4:	4b67      	ldr	r3, [pc, #412]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eca:	e041      	b.n	8002f50 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d024      	beq.n	8002f1e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed4:	4b63      	ldr	r3, [pc, #396]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4b62      	ldr	r3, [pc, #392]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002eda:	2101      	movs	r1, #1
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7fe fed4 	bl	8001c8c <HAL_GetTick>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eea:	f7fe fecf 	bl	8001c8c <HAL_GetTick>
 8002eee:	0002      	movs	r2, r0
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e228      	b.n	800334e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efc:	4b59      	ldr	r3, [pc, #356]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2202      	movs	r2, #2
 8002f02:	4013      	ands	r3, r2
 8002f04:	d0f1      	beq.n	8002eea <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f06:	4b57      	ldr	r3, [pc, #348]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	22f8      	movs	r2, #248	; 0xf8
 8002f0c:	4393      	bics	r3, r2
 8002f0e:	0019      	movs	r1, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	00da      	lsls	r2, r3, #3
 8002f16:	4b53      	ldr	r3, [pc, #332]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	e018      	b.n	8002f50 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1e:	4b51      	ldr	r3, [pc, #324]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4b50      	ldr	r3, [pc, #320]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002f24:	2101      	movs	r1, #1
 8002f26:	438a      	bics	r2, r1
 8002f28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2a:	f7fe feaf 	bl	8001c8c <HAL_GetTick>
 8002f2e:	0003      	movs	r3, r0
 8002f30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f34:	f7fe feaa 	bl	8001c8c <HAL_GetTick>
 8002f38:	0002      	movs	r2, r0
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e203      	b.n	800334e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f46:	4b47      	ldr	r3, [pc, #284]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d1f1      	bne.n	8002f34 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2208      	movs	r2, #8
 8002f56:	4013      	ands	r3, r2
 8002f58:	d036      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d019      	beq.n	8002f96 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f62:	4b40      	ldr	r3, [pc, #256]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f66:	4b3f      	ldr	r3, [pc, #252]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002f68:	2101      	movs	r1, #1
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6e:	f7fe fe8d 	bl	8001c8c <HAL_GetTick>
 8002f72:	0003      	movs	r3, r0
 8002f74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f78:	f7fe fe88 	bl	8001c8c <HAL_GetTick>
 8002f7c:	0002      	movs	r2, r0
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e1e1      	b.n	800334e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8a:	4b36      	ldr	r3, [pc, #216]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	2202      	movs	r2, #2
 8002f90:	4013      	ands	r3, r2
 8002f92:	d0f1      	beq.n	8002f78 <HAL_RCC_OscConfig+0x248>
 8002f94:	e018      	b.n	8002fc8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f96:	4b33      	ldr	r3, [pc, #204]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f9a:	4b32      	ldr	r3, [pc, #200]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	438a      	bics	r2, r1
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa2:	f7fe fe73 	bl	8001c8c <HAL_GetTick>
 8002fa6:	0003      	movs	r3, r0
 8002fa8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fac:	f7fe fe6e 	bl	8001c8c <HAL_GetTick>
 8002fb0:	0002      	movs	r2, r0
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e1c7      	b.n	800334e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbe:	4b29      	ldr	r3, [pc, #164]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d1f1      	bne.n	8002fac <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2204      	movs	r2, #4
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d100      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x2a4>
 8002fd2:	e0b5      	b.n	8003140 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd4:	201f      	movs	r0, #31
 8002fd6:	183b      	adds	r3, r7, r0
 8002fd8:	2200      	movs	r2, #0
 8002fda:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fdc:	4b21      	ldr	r3, [pc, #132]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002fde:	69da      	ldr	r2, [r3, #28]
 8002fe0:	2380      	movs	r3, #128	; 0x80
 8002fe2:	055b      	lsls	r3, r3, #21
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d110      	bne.n	800300a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002fea:	69da      	ldr	r2, [r3, #28]
 8002fec:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002fee:	2180      	movs	r1, #128	; 0x80
 8002ff0:	0549      	lsls	r1, r1, #21
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	61da      	str	r2, [r3, #28]
 8002ff6:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8002ff8:	69da      	ldr	r2, [r3, #28]
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	055b      	lsls	r3, r3, #21
 8002ffe:	4013      	ands	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003004:	183b      	adds	r3, r7, r0
 8003006:	2201      	movs	r2, #1
 8003008:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300a:	4b19      	ldr	r3, [pc, #100]	; (8003070 <HAL_RCC_OscConfig+0x340>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	2380      	movs	r3, #128	; 0x80
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	4013      	ands	r3, r2
 8003014:	d11a      	bne.n	800304c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003016:	4b16      	ldr	r3, [pc, #88]	; (8003070 <HAL_RCC_OscConfig+0x340>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	4b15      	ldr	r3, [pc, #84]	; (8003070 <HAL_RCC_OscConfig+0x340>)
 800301c:	2180      	movs	r1, #128	; 0x80
 800301e:	0049      	lsls	r1, r1, #1
 8003020:	430a      	orrs	r2, r1
 8003022:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003024:	f7fe fe32 	bl	8001c8c <HAL_GetTick>
 8003028:	0003      	movs	r3, r0
 800302a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302e:	f7fe fe2d 	bl	8001c8c <HAL_GetTick>
 8003032:	0002      	movs	r2, r0
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b64      	cmp	r3, #100	; 0x64
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e186      	b.n	800334e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_RCC_OscConfig+0x340>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4013      	ands	r3, r2
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d10f      	bne.n	8003074 <HAL_RCC_OscConfig+0x344>
 8003054:	4b03      	ldr	r3, [pc, #12]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 8003056:	6a1a      	ldr	r2, [r3, #32]
 8003058:	4b02      	ldr	r3, [pc, #8]	; (8003064 <HAL_RCC_OscConfig+0x334>)
 800305a:	2101      	movs	r1, #1
 800305c:	430a      	orrs	r2, r1
 800305e:	621a      	str	r2, [r3, #32]
 8003060:	e036      	b.n	80030d0 <HAL_RCC_OscConfig+0x3a0>
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	40021000 	.word	0x40021000
 8003068:	fffeffff 	.word	0xfffeffff
 800306c:	fffbffff 	.word	0xfffbffff
 8003070:	40007000 	.word	0x40007000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10c      	bne.n	8003096 <HAL_RCC_OscConfig+0x366>
 800307c:	4bb6      	ldr	r3, [pc, #728]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 800307e:	6a1a      	ldr	r2, [r3, #32]
 8003080:	4bb5      	ldr	r3, [pc, #724]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 8003082:	2101      	movs	r1, #1
 8003084:	438a      	bics	r2, r1
 8003086:	621a      	str	r2, [r3, #32]
 8003088:	4bb3      	ldr	r3, [pc, #716]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 800308a:	6a1a      	ldr	r2, [r3, #32]
 800308c:	4bb2      	ldr	r3, [pc, #712]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 800308e:	2104      	movs	r1, #4
 8003090:	438a      	bics	r2, r1
 8003092:	621a      	str	r2, [r3, #32]
 8003094:	e01c      	b.n	80030d0 <HAL_RCC_OscConfig+0x3a0>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b05      	cmp	r3, #5
 800309c:	d10c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x388>
 800309e:	4bae      	ldr	r3, [pc, #696]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80030a0:	6a1a      	ldr	r2, [r3, #32]
 80030a2:	4bad      	ldr	r3, [pc, #692]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80030a4:	2104      	movs	r1, #4
 80030a6:	430a      	orrs	r2, r1
 80030a8:	621a      	str	r2, [r3, #32]
 80030aa:	4bab      	ldr	r3, [pc, #684]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80030ac:	6a1a      	ldr	r2, [r3, #32]
 80030ae:	4baa      	ldr	r3, [pc, #680]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80030b0:	2101      	movs	r1, #1
 80030b2:	430a      	orrs	r2, r1
 80030b4:	621a      	str	r2, [r3, #32]
 80030b6:	e00b      	b.n	80030d0 <HAL_RCC_OscConfig+0x3a0>
 80030b8:	4ba7      	ldr	r3, [pc, #668]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80030ba:	6a1a      	ldr	r2, [r3, #32]
 80030bc:	4ba6      	ldr	r3, [pc, #664]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80030be:	2101      	movs	r1, #1
 80030c0:	438a      	bics	r2, r1
 80030c2:	621a      	str	r2, [r3, #32]
 80030c4:	4ba4      	ldr	r3, [pc, #656]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80030c6:	6a1a      	ldr	r2, [r3, #32]
 80030c8:	4ba3      	ldr	r3, [pc, #652]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80030ca:	2104      	movs	r1, #4
 80030cc:	438a      	bics	r2, r1
 80030ce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d014      	beq.n	8003102 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d8:	f7fe fdd8 	bl	8001c8c <HAL_GetTick>
 80030dc:	0003      	movs	r3, r0
 80030de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e0:	e009      	b.n	80030f6 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e2:	f7fe fdd3 	bl	8001c8c <HAL_GetTick>
 80030e6:	0002      	movs	r2, r0
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	4a9b      	ldr	r2, [pc, #620]	; (800335c <HAL_RCC_OscConfig+0x62c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e12b      	b.n	800334e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f6:	4b98      	ldr	r3, [pc, #608]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	2202      	movs	r2, #2
 80030fc:	4013      	ands	r3, r2
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0x3b2>
 8003100:	e013      	b.n	800312a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003102:	f7fe fdc3 	bl	8001c8c <HAL_GetTick>
 8003106:	0003      	movs	r3, r0
 8003108:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310a:	e009      	b.n	8003120 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800310c:	f7fe fdbe 	bl	8001c8c <HAL_GetTick>
 8003110:	0002      	movs	r2, r0
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	4a91      	ldr	r2, [pc, #580]	; (800335c <HAL_RCC_OscConfig+0x62c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e116      	b.n	800334e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003120:	4b8d      	ldr	r3, [pc, #564]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	2202      	movs	r2, #2
 8003126:	4013      	ands	r3, r2
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800312a:	231f      	movs	r3, #31
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d105      	bne.n	8003140 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003134:	4b88      	ldr	r3, [pc, #544]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 8003136:	69da      	ldr	r2, [r3, #28]
 8003138:	4b87      	ldr	r3, [pc, #540]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 800313a:	4989      	ldr	r1, [pc, #548]	; (8003360 <HAL_RCC_OscConfig+0x630>)
 800313c:	400a      	ands	r2, r1
 800313e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2210      	movs	r2, #16
 8003146:	4013      	ands	r3, r2
 8003148:	d063      	beq.n	8003212 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d12a      	bne.n	80031a8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003152:	4b81      	ldr	r3, [pc, #516]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 8003154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003156:	4b80      	ldr	r3, [pc, #512]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 8003158:	2104      	movs	r1, #4
 800315a:	430a      	orrs	r2, r1
 800315c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800315e:	4b7e      	ldr	r3, [pc, #504]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 8003160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003162:	4b7d      	ldr	r3, [pc, #500]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 8003164:	2101      	movs	r1, #1
 8003166:	430a      	orrs	r2, r1
 8003168:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316a:	f7fe fd8f 	bl	8001c8c <HAL_GetTick>
 800316e:	0003      	movs	r3, r0
 8003170:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003174:	f7fe fd8a 	bl	8001c8c <HAL_GetTick>
 8003178:	0002      	movs	r2, r0
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e0e3      	b.n	800334e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003186:	4b74      	ldr	r3, [pc, #464]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 8003188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318a:	2202      	movs	r2, #2
 800318c:	4013      	ands	r3, r2
 800318e:	d0f1      	beq.n	8003174 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003190:	4b71      	ldr	r3, [pc, #452]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 8003192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003194:	22f8      	movs	r2, #248	; 0xf8
 8003196:	4393      	bics	r3, r2
 8003198:	0019      	movs	r1, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	00da      	lsls	r2, r3, #3
 80031a0:	4b6d      	ldr	r3, [pc, #436]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80031a2:	430a      	orrs	r2, r1
 80031a4:	635a      	str	r2, [r3, #52]	; 0x34
 80031a6:	e034      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	3305      	adds	r3, #5
 80031ae:	d111      	bne.n	80031d4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80031b0:	4b69      	ldr	r3, [pc, #420]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80031b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b4:	4b68      	ldr	r3, [pc, #416]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80031b6:	2104      	movs	r1, #4
 80031b8:	438a      	bics	r2, r1
 80031ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80031bc:	4b66      	ldr	r3, [pc, #408]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80031be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c0:	22f8      	movs	r2, #248	; 0xf8
 80031c2:	4393      	bics	r3, r2
 80031c4:	0019      	movs	r1, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	00da      	lsls	r2, r3, #3
 80031cc:	4b62      	ldr	r3, [pc, #392]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80031ce:	430a      	orrs	r2, r1
 80031d0:	635a      	str	r2, [r3, #52]	; 0x34
 80031d2:	e01e      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80031d4:	4b60      	ldr	r3, [pc, #384]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80031d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d8:	4b5f      	ldr	r3, [pc, #380]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80031da:	2104      	movs	r1, #4
 80031dc:	430a      	orrs	r2, r1
 80031de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80031e0:	4b5d      	ldr	r3, [pc, #372]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80031e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031e4:	4b5c      	ldr	r3, [pc, #368]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80031e6:	2101      	movs	r1, #1
 80031e8:	438a      	bics	r2, r1
 80031ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ec:	f7fe fd4e 	bl	8001c8c <HAL_GetTick>
 80031f0:	0003      	movs	r3, r0
 80031f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80031f6:	f7fe fd49 	bl	8001c8c <HAL_GetTick>
 80031fa:	0002      	movs	r2, r0
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e0a2      	b.n	800334e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003208:	4b53      	ldr	r3, [pc, #332]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	2202      	movs	r2, #2
 800320e:	4013      	ands	r3, r2
 8003210:	d1f1      	bne.n	80031f6 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d100      	bne.n	800321c <HAL_RCC_OscConfig+0x4ec>
 800321a:	e097      	b.n	800334c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800321c:	4b4e      	ldr	r3, [pc, #312]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	220c      	movs	r2, #12
 8003222:	4013      	ands	r3, r2
 8003224:	2b08      	cmp	r3, #8
 8003226:	d100      	bne.n	800322a <HAL_RCC_OscConfig+0x4fa>
 8003228:	e06b      	b.n	8003302 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d14c      	bne.n	80032cc <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003232:	4b49      	ldr	r3, [pc, #292]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	4b48      	ldr	r3, [pc, #288]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 8003238:	494a      	ldr	r1, [pc, #296]	; (8003364 <HAL_RCC_OscConfig+0x634>)
 800323a:	400a      	ands	r2, r1
 800323c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323e:	f7fe fd25 	bl	8001c8c <HAL_GetTick>
 8003242:	0003      	movs	r3, r0
 8003244:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003248:	f7fe fd20 	bl	8001c8c <HAL_GetTick>
 800324c:	0002      	movs	r2, r0
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e079      	b.n	800334e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800325a:	4b3f      	ldr	r3, [pc, #252]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	049b      	lsls	r3, r3, #18
 8003262:	4013      	ands	r3, r2
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003266:	4b3c      	ldr	r3, [pc, #240]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	220f      	movs	r2, #15
 800326c:	4393      	bics	r3, r2
 800326e:	0019      	movs	r1, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003274:	4b38      	ldr	r3, [pc, #224]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 8003276:	430a      	orrs	r2, r1
 8003278:	62da      	str	r2, [r3, #44]	; 0x2c
 800327a:	4b37      	ldr	r3, [pc, #220]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4a3a      	ldr	r2, [pc, #232]	; (8003368 <HAL_RCC_OscConfig+0x638>)
 8003280:	4013      	ands	r3, r2
 8003282:	0019      	movs	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	431a      	orrs	r2, r3
 800328e:	4b32      	ldr	r3, [pc, #200]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 8003290:	430a      	orrs	r2, r1
 8003292:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003294:	4b30      	ldr	r3, [pc, #192]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4b2f      	ldr	r3, [pc, #188]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 800329a:	2180      	movs	r1, #128	; 0x80
 800329c:	0449      	lsls	r1, r1, #17
 800329e:	430a      	orrs	r2, r1
 80032a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a2:	f7fe fcf3 	bl	8001c8c <HAL_GetTick>
 80032a6:	0003      	movs	r3, r0
 80032a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ac:	f7fe fcee 	bl	8001c8c <HAL_GetTick>
 80032b0:	0002      	movs	r2, r0
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e047      	b.n	800334e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032be:	4b26      	ldr	r3, [pc, #152]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	049b      	lsls	r3, r3, #18
 80032c6:	4013      	ands	r3, r2
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0x57c>
 80032ca:	e03f      	b.n	800334c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032cc:	4b22      	ldr	r3, [pc, #136]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4b21      	ldr	r3, [pc, #132]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80032d2:	4924      	ldr	r1, [pc, #144]	; (8003364 <HAL_RCC_OscConfig+0x634>)
 80032d4:	400a      	ands	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d8:	f7fe fcd8 	bl	8001c8c <HAL_GetTick>
 80032dc:	0003      	movs	r3, r0
 80032de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e2:	f7fe fcd3 	bl	8001c8c <HAL_GetTick>
 80032e6:	0002      	movs	r2, r0
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e02c      	b.n	800334e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f4:	4b18      	ldr	r3, [pc, #96]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	2380      	movs	r3, #128	; 0x80
 80032fa:	049b      	lsls	r3, r3, #18
 80032fc:	4013      	ands	r3, r2
 80032fe:	d1f0      	bne.n	80032e2 <HAL_RCC_OscConfig+0x5b2>
 8003300:	e024      	b.n	800334c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e01f      	b.n	800334e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800330e:	4b12      	ldr	r3, [pc, #72]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003314:	4b10      	ldr	r3, [pc, #64]	; (8003358 <HAL_RCC_OscConfig+0x628>)
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	23c0      	movs	r3, #192	; 0xc0
 800331e:	025b      	lsls	r3, r3, #9
 8003320:	401a      	ands	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	429a      	cmp	r2, r3
 8003328:	d10e      	bne.n	8003348 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	220f      	movs	r2, #15
 800332e:	401a      	ands	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d107      	bne.n	8003348 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	23f0      	movs	r3, #240	; 0xf0
 800333c:	039b      	lsls	r3, r3, #14
 800333e:	401a      	ands	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	0018      	movs	r0, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	b008      	add	sp, #32
 8003354:	bd80      	pop	{r7, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	40021000 	.word	0x40021000
 800335c:	00001388 	.word	0x00001388
 8003360:	efffffff 	.word	0xefffffff
 8003364:	feffffff 	.word	0xfeffffff
 8003368:	ffc27fff 	.word	0xffc27fff

0800336c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0b3      	b.n	80034e8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003380:	4b5b      	ldr	r3, [pc, #364]	; (80034f0 <HAL_RCC_ClockConfig+0x184>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2201      	movs	r2, #1
 8003386:	4013      	ands	r3, r2
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d911      	bls.n	80033b2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b58      	ldr	r3, [pc, #352]	; (80034f0 <HAL_RCC_ClockConfig+0x184>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2201      	movs	r2, #1
 8003394:	4393      	bics	r3, r2
 8003396:	0019      	movs	r1, r3
 8003398:	4b55      	ldr	r3, [pc, #340]	; (80034f0 <HAL_RCC_ClockConfig+0x184>)
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a0:	4b53      	ldr	r3, [pc, #332]	; (80034f0 <HAL_RCC_ClockConfig+0x184>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2201      	movs	r2, #1
 80033a6:	4013      	ands	r3, r2
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d001      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e09a      	b.n	80034e8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2202      	movs	r2, #2
 80033b8:	4013      	ands	r3, r2
 80033ba:	d015      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2204      	movs	r2, #4
 80033c2:	4013      	ands	r3, r2
 80033c4:	d006      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80033c6:	4b4b      	ldr	r3, [pc, #300]	; (80034f4 <HAL_RCC_ClockConfig+0x188>)
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	4b4a      	ldr	r3, [pc, #296]	; (80034f4 <HAL_RCC_ClockConfig+0x188>)
 80033cc:	21e0      	movs	r1, #224	; 0xe0
 80033ce:	00c9      	lsls	r1, r1, #3
 80033d0:	430a      	orrs	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d4:	4b47      	ldr	r3, [pc, #284]	; (80034f4 <HAL_RCC_ClockConfig+0x188>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	22f0      	movs	r2, #240	; 0xf0
 80033da:	4393      	bics	r3, r2
 80033dc:	0019      	movs	r1, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	4b44      	ldr	r3, [pc, #272]	; (80034f4 <HAL_RCC_ClockConfig+0x188>)
 80033e4:	430a      	orrs	r2, r1
 80033e6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2201      	movs	r2, #1
 80033ee:	4013      	ands	r3, r2
 80033f0:	d040      	beq.n	8003474 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d107      	bne.n	800340a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	4b3e      	ldr	r3, [pc, #248]	; (80034f4 <HAL_RCC_ClockConfig+0x188>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	029b      	lsls	r3, r3, #10
 8003402:	4013      	ands	r3, r2
 8003404:	d114      	bne.n	8003430 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e06e      	b.n	80034e8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d107      	bne.n	8003422 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003412:	4b38      	ldr	r3, [pc, #224]	; (80034f4 <HAL_RCC_ClockConfig+0x188>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	049b      	lsls	r3, r3, #18
 800341a:	4013      	ands	r3, r2
 800341c:	d108      	bne.n	8003430 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e062      	b.n	80034e8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003422:	4b34      	ldr	r3, [pc, #208]	; (80034f4 <HAL_RCC_ClockConfig+0x188>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2202      	movs	r2, #2
 8003428:	4013      	ands	r3, r2
 800342a:	d101      	bne.n	8003430 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e05b      	b.n	80034e8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003430:	4b30      	ldr	r3, [pc, #192]	; (80034f4 <HAL_RCC_ClockConfig+0x188>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2203      	movs	r2, #3
 8003436:	4393      	bics	r3, r2
 8003438:	0019      	movs	r1, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	4b2d      	ldr	r3, [pc, #180]	; (80034f4 <HAL_RCC_ClockConfig+0x188>)
 8003440:	430a      	orrs	r2, r1
 8003442:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003444:	f7fe fc22 	bl	8001c8c <HAL_GetTick>
 8003448:	0003      	movs	r3, r0
 800344a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344c:	e009      	b.n	8003462 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800344e:	f7fe fc1d 	bl	8001c8c <HAL_GetTick>
 8003452:	0002      	movs	r2, r0
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	4a27      	ldr	r2, [pc, #156]	; (80034f8 <HAL_RCC_ClockConfig+0x18c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e042      	b.n	80034e8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003462:	4b24      	ldr	r3, [pc, #144]	; (80034f4 <HAL_RCC_ClockConfig+0x188>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	220c      	movs	r2, #12
 8003468:	401a      	ands	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	429a      	cmp	r2, r3
 8003472:	d1ec      	bne.n	800344e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003474:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <HAL_RCC_ClockConfig+0x184>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2201      	movs	r2, #1
 800347a:	4013      	ands	r3, r2
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d211      	bcs.n	80034a6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003482:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <HAL_RCC_ClockConfig+0x184>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2201      	movs	r2, #1
 8003488:	4393      	bics	r3, r2
 800348a:	0019      	movs	r1, r3
 800348c:	4b18      	ldr	r3, [pc, #96]	; (80034f0 <HAL_RCC_ClockConfig+0x184>)
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003494:	4b16      	ldr	r3, [pc, #88]	; (80034f0 <HAL_RCC_ClockConfig+0x184>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2201      	movs	r2, #1
 800349a:	4013      	ands	r3, r2
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d001      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e020      	b.n	80034e8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2204      	movs	r2, #4
 80034ac:	4013      	ands	r3, r2
 80034ae:	d009      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80034b0:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <HAL_RCC_ClockConfig+0x188>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4a11      	ldr	r2, [pc, #68]	; (80034fc <HAL_RCC_ClockConfig+0x190>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	0019      	movs	r1, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <HAL_RCC_ClockConfig+0x188>)
 80034c0:	430a      	orrs	r2, r1
 80034c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034c4:	f000 f820 	bl	8003508 <HAL_RCC_GetSysClockFreq>
 80034c8:	0001      	movs	r1, r0
 80034ca:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <HAL_RCC_ClockConfig+0x188>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	091b      	lsrs	r3, r3, #4
 80034d0:	220f      	movs	r2, #15
 80034d2:	4013      	ands	r3, r2
 80034d4:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <HAL_RCC_ClockConfig+0x194>)
 80034d6:	5cd3      	ldrb	r3, [r2, r3]
 80034d8:	000a      	movs	r2, r1
 80034da:	40da      	lsrs	r2, r3
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <HAL_RCC_ClockConfig+0x198>)
 80034de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80034e0:	2000      	movs	r0, #0
 80034e2:	f7fe fb8d 	bl	8001c00 <HAL_InitTick>
  
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	0018      	movs	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b004      	add	sp, #16
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40022000 	.word	0x40022000
 80034f4:	40021000 	.word	0x40021000
 80034f8:	00001388 	.word	0x00001388
 80034fc:	fffff8ff 	.word	0xfffff8ff
 8003500:	08003f78 	.word	0x08003f78
 8003504:	20000000 	.word	0x20000000

08003508 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b08f      	sub	sp, #60	; 0x3c
 800350c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800350e:	2314      	movs	r3, #20
 8003510:	18fb      	adds	r3, r7, r3
 8003512:	4a2c      	ldr	r2, [pc, #176]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003514:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003516:	c313      	stmia	r3!, {r0, r1, r4}
 8003518:	6812      	ldr	r2, [r2, #0]
 800351a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800351c:	1d3b      	adds	r3, r7, #4
 800351e:	4a2a      	ldr	r2, [pc, #168]	; (80035c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003520:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003522:	c313      	stmia	r3!, {r0, r1, r4}
 8003524:	6812      	ldr	r2, [r2, #0]
 8003526:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352c:	2300      	movs	r3, #0
 800352e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003530:	2300      	movs	r3, #0
 8003532:	637b      	str	r3, [r7, #52]	; 0x34
 8003534:	2300      	movs	r3, #0
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800353c:	4b23      	ldr	r3, [pc, #140]	; (80035cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003544:	220c      	movs	r2, #12
 8003546:	4013      	ands	r3, r2
 8003548:	2b04      	cmp	r3, #4
 800354a:	d002      	beq.n	8003552 <HAL_RCC_GetSysClockFreq+0x4a>
 800354c:	2b08      	cmp	r3, #8
 800354e:	d003      	beq.n	8003558 <HAL_RCC_GetSysClockFreq+0x50>
 8003550:	e02f      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003552:	4b1f      	ldr	r3, [pc, #124]	; (80035d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003554:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003556:	e02f      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355a:	0c9b      	lsrs	r3, r3, #18
 800355c:	220f      	movs	r2, #15
 800355e:	4013      	ands	r3, r2
 8003560:	2214      	movs	r2, #20
 8003562:	18ba      	adds	r2, r7, r2
 8003564:	5cd3      	ldrb	r3, [r2, r3]
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003568:	4b18      	ldr	r3, [pc, #96]	; (80035cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	220f      	movs	r2, #15
 800356e:	4013      	ands	r3, r2
 8003570:	1d3a      	adds	r2, r7, #4
 8003572:	5cd3      	ldrb	r3, [r2, r3]
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003578:	23c0      	movs	r3, #192	; 0xc0
 800357a:	025b      	lsls	r3, r3, #9
 800357c:	401a      	ands	r2, r3
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	025b      	lsls	r3, r3, #9
 8003582:	429a      	cmp	r2, r3
 8003584:	d109      	bne.n	800359a <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003586:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003588:	4811      	ldr	r0, [pc, #68]	; (80035d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800358a:	f7fc fdbd 	bl	8000108 <__udivsi3>
 800358e:	0003      	movs	r3, r0
 8003590:	001a      	movs	r2, r3
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	4353      	muls	r3, r2
 8003596:	637b      	str	r3, [r7, #52]	; 0x34
 8003598:	e008      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800359a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800359c:	480c      	ldr	r0, [pc, #48]	; (80035d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800359e:	f7fc fdb3 	bl	8000108 <__udivsi3>
 80035a2:	0003      	movs	r3, r0
 80035a4:	001a      	movs	r2, r3
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	4353      	muls	r3, r2
 80035aa:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80035ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035b0:	e002      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035b2:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035b6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80035b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80035ba:	0018      	movs	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	b00f      	add	sp, #60	; 0x3c
 80035c0:	bd90      	pop	{r4, r7, pc}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	08003f18 	.word	0x08003f18
 80035c8:	08003f28 	.word	0x08003f28
 80035cc:	40021000 	.word	0x40021000
 80035d0:	007a1200 	.word	0x007a1200

080035d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d8:	4b02      	ldr	r3, [pc, #8]	; (80035e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80035da:	681b      	ldr	r3, [r3, #0]
}
 80035dc:	0018      	movs	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	20000000 	.word	0x20000000

080035e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80035ec:	f7ff fff2 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 80035f0:	0001      	movs	r1, r0
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_RCC_GetPCLK1Freq+0x24>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	0a1b      	lsrs	r3, r3, #8
 80035f8:	2207      	movs	r2, #7
 80035fa:	4013      	ands	r3, r2
 80035fc:	4a04      	ldr	r2, [pc, #16]	; (8003610 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035fe:	5cd3      	ldrb	r3, [r2, r3]
 8003600:	40d9      	lsrs	r1, r3
 8003602:	000b      	movs	r3, r1
}    
 8003604:	0018      	movs	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	40021000 	.word	0x40021000
 8003610:	08003f88 	.word	0x08003f88

08003614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	025b      	lsls	r3, r3, #9
 800362c:	4013      	ands	r3, r2
 800362e:	d100      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003630:	e08e      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003632:	2017      	movs	r0, #23
 8003634:	183b      	adds	r3, r7, r0
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800363a:	4b5f      	ldr	r3, [pc, #380]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800363c:	69da      	ldr	r2, [r3, #28]
 800363e:	2380      	movs	r3, #128	; 0x80
 8003640:	055b      	lsls	r3, r3, #21
 8003642:	4013      	ands	r3, r2
 8003644:	d110      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003646:	4b5c      	ldr	r3, [pc, #368]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003648:	69da      	ldr	r2, [r3, #28]
 800364a:	4b5b      	ldr	r3, [pc, #364]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800364c:	2180      	movs	r1, #128	; 0x80
 800364e:	0549      	lsls	r1, r1, #21
 8003650:	430a      	orrs	r2, r1
 8003652:	61da      	str	r2, [r3, #28]
 8003654:	4b58      	ldr	r3, [pc, #352]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	055b      	lsls	r3, r3, #21
 800365c:	4013      	ands	r3, r2
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003662:	183b      	adds	r3, r7, r0
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003668:	4b54      	ldr	r3, [pc, #336]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	2380      	movs	r3, #128	; 0x80
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4013      	ands	r3, r2
 8003672:	d11a      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003674:	4b51      	ldr	r3, [pc, #324]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b50      	ldr	r3, [pc, #320]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800367a:	2180      	movs	r1, #128	; 0x80
 800367c:	0049      	lsls	r1, r1, #1
 800367e:	430a      	orrs	r2, r1
 8003680:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003682:	f7fe fb03 	bl	8001c8c <HAL_GetTick>
 8003686:	0003      	movs	r3, r0
 8003688:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368a:	e008      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368c:	f7fe fafe 	bl	8001c8c <HAL_GetTick>
 8003690:	0002      	movs	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	; 0x64
 8003698:	d901      	bls.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e087      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369e:	4b47      	ldr	r3, [pc, #284]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4013      	ands	r3, r2
 80036a8:	d0f0      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036aa:	4b43      	ldr	r3, [pc, #268]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036ac:	6a1a      	ldr	r2, [r3, #32]
 80036ae:	23c0      	movs	r3, #192	; 0xc0
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4013      	ands	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d034      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	23c0      	movs	r3, #192	; 0xc0
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4013      	ands	r3, r2
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d02c      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036cc:	4b3a      	ldr	r3, [pc, #232]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	4a3b      	ldr	r2, [pc, #236]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036d6:	4b38      	ldr	r3, [pc, #224]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036d8:	6a1a      	ldr	r2, [r3, #32]
 80036da:	4b37      	ldr	r3, [pc, #220]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036dc:	2180      	movs	r1, #128	; 0x80
 80036de:	0249      	lsls	r1, r1, #9
 80036e0:	430a      	orrs	r2, r1
 80036e2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036e4:	4b34      	ldr	r3, [pc, #208]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036e6:	6a1a      	ldr	r2, [r3, #32]
 80036e8:	4b33      	ldr	r3, [pc, #204]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036ea:	4936      	ldr	r1, [pc, #216]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036ec:	400a      	ands	r2, r1
 80036ee:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036f0:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2201      	movs	r2, #1
 80036fa:	4013      	ands	r3, r2
 80036fc:	d013      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fe:	f7fe fac5 	bl	8001c8c <HAL_GetTick>
 8003702:	0003      	movs	r3, r0
 8003704:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003706:	e009      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003708:	f7fe fac0 	bl	8001c8c <HAL_GetTick>
 800370c:	0002      	movs	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	4a2d      	ldr	r2, [pc, #180]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e048      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371c:	4b26      	ldr	r3, [pc, #152]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	2202      	movs	r2, #2
 8003722:	4013      	ands	r3, r2
 8003724:	d0f0      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003726:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	4a25      	ldr	r2, [pc, #148]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800372c:	4013      	ands	r3, r2
 800372e:	0019      	movs	r1, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003736:	430a      	orrs	r2, r1
 8003738:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800373a:	2317      	movs	r3, #23
 800373c:	18fb      	adds	r3, r7, r3
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d105      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003744:	4b1c      	ldr	r3, [pc, #112]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003746:	69da      	ldr	r2, [r3, #28]
 8003748:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800374a:	4920      	ldr	r1, [pc, #128]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800374c:	400a      	ands	r2, r1
 800374e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2201      	movs	r2, #1
 8003756:	4013      	ands	r3, r2
 8003758:	d009      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800375a:	4b17      	ldr	r3, [pc, #92]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	2203      	movs	r2, #3
 8003760:	4393      	bics	r3, r2
 8003762:	0019      	movs	r1, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800376a:	430a      	orrs	r2, r1
 800376c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2220      	movs	r2, #32
 8003774:	4013      	ands	r3, r2
 8003776:	d009      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003778:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	2210      	movs	r2, #16
 800377e:	4393      	bics	r3, r2
 8003780:	0019      	movs	r1, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003788:	430a      	orrs	r2, r1
 800378a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	2380      	movs	r3, #128	; 0x80
 8003792:	029b      	lsls	r3, r3, #10
 8003794:	4013      	ands	r3, r2
 8003796:	d009      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003798:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	2280      	movs	r2, #128	; 0x80
 800379e:	4393      	bics	r3, r2
 80037a0:	0019      	movs	r1, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037a8:	430a      	orrs	r2, r1
 80037aa:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	0018      	movs	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b006      	add	sp, #24
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	40021000 	.word	0x40021000
 80037bc:	40007000 	.word	0x40007000
 80037c0:	fffffcff 	.word	0xfffffcff
 80037c4:	fffeffff 	.word	0xfffeffff
 80037c8:	00001388 	.word	0x00001388
 80037cc:	efffffff 	.word	0xefffffff

080037d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e044      	b.n	800386c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d107      	bne.n	80037fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2274      	movs	r2, #116	; 0x74
 80037ee:	2100      	movs	r1, #0
 80037f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	0018      	movs	r0, r3
 80037f6:	f7fe f95d 	bl	8001ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2224      	movs	r2, #36	; 0x24
 80037fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2101      	movs	r1, #1
 800380c:	438a      	bics	r2, r1
 800380e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	0018      	movs	r0, r3
 8003814:	f000 f830 	bl	8003878 <UART_SetConfig>
 8003818:	0003      	movs	r3, r0
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e024      	b.n	800386c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	0018      	movs	r0, r3
 800382e:	f000 f97b 	bl	8003b28 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	490d      	ldr	r1, [pc, #52]	; (8003874 <HAL_UART_Init+0xa4>)
 800383e:	400a      	ands	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2108      	movs	r1, #8
 800384e:	438a      	bics	r2, r1
 8003850:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2101      	movs	r1, #1
 800385e:	430a      	orrs	r2, r1
 8003860:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	0018      	movs	r0, r3
 8003866:	f000 fa13 	bl	8003c90 <UART_CheckIdleState>
 800386a:	0003      	movs	r3, r0
}
 800386c:	0018      	movs	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	b002      	add	sp, #8
 8003872:	bd80      	pop	{r7, pc}
 8003874:	fffff7ff 	.word	0xfffff7ff

08003878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003880:	231e      	movs	r3, #30
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	4313      	orrs	r3, r2
 800389e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a97      	ldr	r2, [pc, #604]	; (8003b04 <UART_SetConfig+0x28c>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	0019      	movs	r1, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4a92      	ldr	r2, [pc, #584]	; (8003b08 <UART_SetConfig+0x290>)
 80038be:	4013      	ands	r3, r2
 80038c0:	0019      	movs	r1, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	4a89      	ldr	r2, [pc, #548]	; (8003b0c <UART_SetConfig+0x294>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	0019      	movs	r1, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a85      	ldr	r2, [pc, #532]	; (8003b10 <UART_SetConfig+0x298>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d127      	bne.n	800394e <UART_SetConfig+0xd6>
 80038fe:	4b85      	ldr	r3, [pc, #532]	; (8003b14 <UART_SetConfig+0x29c>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	2203      	movs	r2, #3
 8003904:	4013      	ands	r3, r2
 8003906:	2b03      	cmp	r3, #3
 8003908:	d00d      	beq.n	8003926 <UART_SetConfig+0xae>
 800390a:	d81b      	bhi.n	8003944 <UART_SetConfig+0xcc>
 800390c:	2b02      	cmp	r3, #2
 800390e:	d014      	beq.n	800393a <UART_SetConfig+0xc2>
 8003910:	d818      	bhi.n	8003944 <UART_SetConfig+0xcc>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <UART_SetConfig+0xa4>
 8003916:	2b01      	cmp	r3, #1
 8003918:	d00a      	beq.n	8003930 <UART_SetConfig+0xb8>
 800391a:	e013      	b.n	8003944 <UART_SetConfig+0xcc>
 800391c:	231f      	movs	r3, #31
 800391e:	18fb      	adds	r3, r7, r3
 8003920:	2200      	movs	r2, #0
 8003922:	701a      	strb	r2, [r3, #0]
 8003924:	e035      	b.n	8003992 <UART_SetConfig+0x11a>
 8003926:	231f      	movs	r3, #31
 8003928:	18fb      	adds	r3, r7, r3
 800392a:	2202      	movs	r2, #2
 800392c:	701a      	strb	r2, [r3, #0]
 800392e:	e030      	b.n	8003992 <UART_SetConfig+0x11a>
 8003930:	231f      	movs	r3, #31
 8003932:	18fb      	adds	r3, r7, r3
 8003934:	2204      	movs	r2, #4
 8003936:	701a      	strb	r2, [r3, #0]
 8003938:	e02b      	b.n	8003992 <UART_SetConfig+0x11a>
 800393a:	231f      	movs	r3, #31
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	2208      	movs	r2, #8
 8003940:	701a      	strb	r2, [r3, #0]
 8003942:	e026      	b.n	8003992 <UART_SetConfig+0x11a>
 8003944:	231f      	movs	r3, #31
 8003946:	18fb      	adds	r3, r7, r3
 8003948:	2210      	movs	r2, #16
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	e021      	b.n	8003992 <UART_SetConfig+0x11a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a71      	ldr	r2, [pc, #452]	; (8003b18 <UART_SetConfig+0x2a0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d104      	bne.n	8003962 <UART_SetConfig+0xea>
 8003958:	231f      	movs	r3, #31
 800395a:	18fb      	adds	r3, r7, r3
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
 8003960:	e017      	b.n	8003992 <UART_SetConfig+0x11a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a6d      	ldr	r2, [pc, #436]	; (8003b1c <UART_SetConfig+0x2a4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d104      	bne.n	8003976 <UART_SetConfig+0xfe>
 800396c:	231f      	movs	r3, #31
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]
 8003974:	e00d      	b.n	8003992 <UART_SetConfig+0x11a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a69      	ldr	r2, [pc, #420]	; (8003b20 <UART_SetConfig+0x2a8>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d104      	bne.n	800398a <UART_SetConfig+0x112>
 8003980:	231f      	movs	r3, #31
 8003982:	18fb      	adds	r3, r7, r3
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]
 8003988:	e003      	b.n	8003992 <UART_SetConfig+0x11a>
 800398a:	231f      	movs	r3, #31
 800398c:	18fb      	adds	r3, r7, r3
 800398e:	2210      	movs	r2, #16
 8003990:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69da      	ldr	r2, [r3, #28]
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	429a      	cmp	r2, r3
 800399c:	d15d      	bne.n	8003a5a <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 800399e:	231f      	movs	r3, #31
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d015      	beq.n	80039d4 <UART_SetConfig+0x15c>
 80039a8:	dc18      	bgt.n	80039dc <UART_SetConfig+0x164>
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d00d      	beq.n	80039ca <UART_SetConfig+0x152>
 80039ae:	dc15      	bgt.n	80039dc <UART_SetConfig+0x164>
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <UART_SetConfig+0x142>
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d005      	beq.n	80039c4 <UART_SetConfig+0x14c>
 80039b8:	e010      	b.n	80039dc <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039ba:	f7ff fe15 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 80039be:	0003      	movs	r3, r0
 80039c0:	61bb      	str	r3, [r7, #24]
        break;
 80039c2:	e012      	b.n	80039ea <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039c4:	4b57      	ldr	r3, [pc, #348]	; (8003b24 <UART_SetConfig+0x2ac>)
 80039c6:	61bb      	str	r3, [r7, #24]
        break;
 80039c8:	e00f      	b.n	80039ea <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ca:	f7ff fd9d 	bl	8003508 <HAL_RCC_GetSysClockFreq>
 80039ce:	0003      	movs	r3, r0
 80039d0:	61bb      	str	r3, [r7, #24]
        break;
 80039d2:	e00a      	b.n	80039ea <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039d4:	2380      	movs	r3, #128	; 0x80
 80039d6:	021b      	lsls	r3, r3, #8
 80039d8:	61bb      	str	r3, [r7, #24]
        break;
 80039da:	e006      	b.n	80039ea <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039e0:	231e      	movs	r3, #30
 80039e2:	18fb      	adds	r3, r7, r3
 80039e4:	2201      	movs	r2, #1
 80039e6:	701a      	strb	r2, [r3, #0]
        break;
 80039e8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d100      	bne.n	80039f2 <UART_SetConfig+0x17a>
 80039f0:	e07b      	b.n	8003aea <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	005a      	lsls	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	18d2      	adds	r2, r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	0019      	movs	r1, r3
 8003a04:	0010      	movs	r0, r2
 8003a06:	f7fc fb7f 	bl	8000108 <__udivsi3>
 8003a0a:	0003      	movs	r3, r0
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	2b0f      	cmp	r3, #15
 8003a14:	d91c      	bls.n	8003a50 <UART_SetConfig+0x1d8>
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	2380      	movs	r3, #128	; 0x80
 8003a1a:	025b      	lsls	r3, r3, #9
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d217      	bcs.n	8003a50 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	200e      	movs	r0, #14
 8003a26:	183b      	adds	r3, r7, r0
 8003a28:	210f      	movs	r1, #15
 8003a2a:	438a      	bics	r2, r1
 8003a2c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	085b      	lsrs	r3, r3, #1
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2207      	movs	r2, #7
 8003a36:	4013      	ands	r3, r2
 8003a38:	b299      	uxth	r1, r3
 8003a3a:	183b      	adds	r3, r7, r0
 8003a3c:	183a      	adds	r2, r7, r0
 8003a3e:	8812      	ldrh	r2, [r2, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	183a      	adds	r2, r7, r0
 8003a4a:	8812      	ldrh	r2, [r2, #0]
 8003a4c:	60da      	str	r2, [r3, #12]
 8003a4e:	e04c      	b.n	8003aea <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8003a50:	231e      	movs	r3, #30
 8003a52:	18fb      	adds	r3, r7, r3
 8003a54:	2201      	movs	r2, #1
 8003a56:	701a      	strb	r2, [r3, #0]
 8003a58:	e047      	b.n	8003aea <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a5a:	231f      	movs	r3, #31
 8003a5c:	18fb      	adds	r3, r7, r3
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d015      	beq.n	8003a90 <UART_SetConfig+0x218>
 8003a64:	dc18      	bgt.n	8003a98 <UART_SetConfig+0x220>
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d00d      	beq.n	8003a86 <UART_SetConfig+0x20e>
 8003a6a:	dc15      	bgt.n	8003a98 <UART_SetConfig+0x220>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <UART_SetConfig+0x1fe>
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d005      	beq.n	8003a80 <UART_SetConfig+0x208>
 8003a74:	e010      	b.n	8003a98 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a76:	f7ff fdb7 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8003a7a:	0003      	movs	r3, r0
 8003a7c:	61bb      	str	r3, [r7, #24]
        break;
 8003a7e:	e012      	b.n	8003aa6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a80:	4b28      	ldr	r3, [pc, #160]	; (8003b24 <UART_SetConfig+0x2ac>)
 8003a82:	61bb      	str	r3, [r7, #24]
        break;
 8003a84:	e00f      	b.n	8003aa6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a86:	f7ff fd3f 	bl	8003508 <HAL_RCC_GetSysClockFreq>
 8003a8a:	0003      	movs	r3, r0
 8003a8c:	61bb      	str	r3, [r7, #24]
        break;
 8003a8e:	e00a      	b.n	8003aa6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a90:	2380      	movs	r3, #128	; 0x80
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	61bb      	str	r3, [r7, #24]
        break;
 8003a96:	e006      	b.n	8003aa6 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a9c:	231e      	movs	r3, #30
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	701a      	strb	r2, [r3, #0]
        break;
 8003aa4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d01e      	beq.n	8003aea <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	085a      	lsrs	r2, r3, #1
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	18d2      	adds	r2, r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	0019      	movs	r1, r3
 8003abc:	0010      	movs	r0, r2
 8003abe:	f7fc fb23 	bl	8000108 <__udivsi3>
 8003ac2:	0003      	movs	r3, r0
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	2b0f      	cmp	r3, #15
 8003acc:	d909      	bls.n	8003ae2 <UART_SetConfig+0x26a>
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	2380      	movs	r3, #128	; 0x80
 8003ad2:	025b      	lsls	r3, r3, #9
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d204      	bcs.n	8003ae2 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	60da      	str	r2, [r3, #12]
 8003ae0:	e003      	b.n	8003aea <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8003ae2:	231e      	movs	r3, #30
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003af6:	231e      	movs	r3, #30
 8003af8:	18fb      	adds	r3, r7, r3
 8003afa:	781b      	ldrb	r3, [r3, #0]
}
 8003afc:	0018      	movs	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b008      	add	sp, #32
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	efff69f3 	.word	0xefff69f3
 8003b08:	ffffcfff 	.word	0xffffcfff
 8003b0c:	fffff4ff 	.word	0xfffff4ff
 8003b10:	40013800 	.word	0x40013800
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40004400 	.word	0x40004400
 8003b1c:	40004800 	.word	0x40004800
 8003b20:	40004c00 	.word	0x40004c00
 8003b24:	007a1200 	.word	0x007a1200

08003b28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	2201      	movs	r2, #1
 8003b36:	4013      	ands	r3, r2
 8003b38:	d00b      	beq.n	8003b52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a4a      	ldr	r2, [pc, #296]	; (8003c6c <UART_AdvFeatureConfig+0x144>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	0019      	movs	r1, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	2202      	movs	r2, #2
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d00b      	beq.n	8003b74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4a43      	ldr	r2, [pc, #268]	; (8003c70 <UART_AdvFeatureConfig+0x148>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	0019      	movs	r1, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	2204      	movs	r2, #4
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d00b      	beq.n	8003b96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	4a3b      	ldr	r2, [pc, #236]	; (8003c74 <UART_AdvFeatureConfig+0x14c>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	0019      	movs	r1, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d00b      	beq.n	8003bb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	4a34      	ldr	r2, [pc, #208]	; (8003c78 <UART_AdvFeatureConfig+0x150>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	0019      	movs	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	2210      	movs	r2, #16
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d00b      	beq.n	8003bda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4a2c      	ldr	r2, [pc, #176]	; (8003c7c <UART_AdvFeatureConfig+0x154>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	0019      	movs	r1, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	2220      	movs	r2, #32
 8003be0:	4013      	ands	r3, r2
 8003be2:	d00b      	beq.n	8003bfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	4a25      	ldr	r2, [pc, #148]	; (8003c80 <UART_AdvFeatureConfig+0x158>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	0019      	movs	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	2240      	movs	r2, #64	; 0x40
 8003c02:	4013      	ands	r3, r2
 8003c04:	d01d      	beq.n	8003c42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4a1d      	ldr	r2, [pc, #116]	; (8003c84 <UART_AdvFeatureConfig+0x15c>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	0019      	movs	r1, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c22:	2380      	movs	r3, #128	; 0x80
 8003c24:	035b      	lsls	r3, r3, #13
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d10b      	bne.n	8003c42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	4a15      	ldr	r2, [pc, #84]	; (8003c88 <UART_AdvFeatureConfig+0x160>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	0019      	movs	r1, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	2280      	movs	r2, #128	; 0x80
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d00b      	beq.n	8003c64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4a0e      	ldr	r2, [pc, #56]	; (8003c8c <UART_AdvFeatureConfig+0x164>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	0019      	movs	r1, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	605a      	str	r2, [r3, #4]
  }
}
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b002      	add	sp, #8
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	fffdffff 	.word	0xfffdffff
 8003c70:	fffeffff 	.word	0xfffeffff
 8003c74:	fffbffff 	.word	0xfffbffff
 8003c78:	ffff7fff 	.word	0xffff7fff
 8003c7c:	ffffefff 	.word	0xffffefff
 8003c80:	ffffdfff 	.word	0xffffdfff
 8003c84:	ffefffff 	.word	0xffefffff
 8003c88:	ff9fffff 	.word	0xff9fffff
 8003c8c:	fff7ffff 	.word	0xfff7ffff

08003c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2280      	movs	r2, #128	; 0x80
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ca0:	f7fd fff4 	bl	8001c8c <HAL_GetTick>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2208      	movs	r2, #8
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d10c      	bne.n	8003cd0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2280      	movs	r2, #128	; 0x80
 8003cba:	0391      	lsls	r1, r2, #14
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	4a17      	ldr	r2, [pc, #92]	; (8003d1c <UART_CheckIdleState+0x8c>)
 8003cc0:	9200      	str	r2, [sp, #0]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f000 f82c 	bl	8003d20 <UART_WaitOnFlagUntilTimeout>
 8003cc8:	1e03      	subs	r3, r0, #0
 8003cca:	d001      	beq.n	8003cd0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e021      	b.n	8003d14 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d10c      	bne.n	8003cf8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2280      	movs	r2, #128	; 0x80
 8003ce2:	03d1      	lsls	r1, r2, #15
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4a0d      	ldr	r2, [pc, #52]	; (8003d1c <UART_CheckIdleState+0x8c>)
 8003ce8:	9200      	str	r2, [sp, #0]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f000 f818 	bl	8003d20 <UART_WaitOnFlagUntilTimeout>
 8003cf0:	1e03      	subs	r3, r0, #0
 8003cf2:	d001      	beq.n	8003cf8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e00d      	b.n	8003d14 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2274      	movs	r2, #116	; 0x74
 8003d0e:	2100      	movs	r1, #0
 8003d10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	0018      	movs	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	b004      	add	sp, #16
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	01ffffff 	.word	0x01ffffff

08003d20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b094      	sub	sp, #80	; 0x50
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	1dfb      	adds	r3, r7, #7
 8003d2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d30:	e0a3      	b.n	8003e7a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d34:	3301      	adds	r3, #1
 8003d36:	d100      	bne.n	8003d3a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003d38:	e09f      	b.n	8003e7a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3a:	f7fd ffa7 	bl	8001c8c <HAL_GetTick>
 8003d3e:	0002      	movs	r2, r0
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d302      	bcc.n	8003d50 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d13d      	bne.n	8003dcc <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d50:	f3ef 8310 	mrs	r3, PRIMASK
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d58:	647b      	str	r3, [r7, #68]	; 0x44
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d60:	f383 8810 	msr	PRIMASK, r3
}
 8003d64:	46c0      	nop			; (mov r8, r8)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	494c      	ldr	r1, [pc, #304]	; (8003ea4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003d72:	400a      	ands	r2, r1
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d78:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	f383 8810 	msr	PRIMASK, r3
}
 8003d80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d82:	f3ef 8310 	mrs	r3, PRIMASK
 8003d86:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8a:	643b      	str	r3, [r7, #64]	; 0x40
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d92:	f383 8810 	msr	PRIMASK, r3
}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2101      	movs	r1, #1
 8003da4:	438a      	bics	r2, r1
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dae:	f383 8810 	msr	PRIMASK, r3
}
 8003db2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2274      	movs	r2, #116	; 0x74
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e067      	b.n	8003e9c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d050      	beq.n	8003e7a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	69da      	ldr	r2, [r3, #28]
 8003dde:	2380      	movs	r3, #128	; 0x80
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	401a      	ands	r2, r3
 8003de4:	2380      	movs	r3, #128	; 0x80
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d146      	bne.n	8003e7a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2280      	movs	r2, #128	; 0x80
 8003df2:	0112      	lsls	r2, r2, #4
 8003df4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df6:	f3ef 8310 	mrs	r3, PRIMASK
 8003dfa:	613b      	str	r3, [r7, #16]
  return(result);
 8003dfc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e00:	2301      	movs	r3, #1
 8003e02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f383 8810 	msr	PRIMASK, r3
}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4923      	ldr	r1, [pc, #140]	; (8003ea4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003e18:	400a      	ands	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	f383 8810 	msr	PRIMASK, r3
}
 8003e26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e28:	f3ef 8310 	mrs	r3, PRIMASK
 8003e2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e2e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e30:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e32:	2301      	movs	r3, #1
 8003e34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	f383 8810 	msr	PRIMASK, r3
}
 8003e3c:	46c0      	nop			; (mov r8, r8)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2101      	movs	r1, #1
 8003e4a:	438a      	bics	r2, r1
 8003e4c:	609a      	str	r2, [r3, #8]
 8003e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	f383 8810 	msr	PRIMASK, r3
}
 8003e58:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2220      	movs	r2, #32
 8003e64:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2280      	movs	r2, #128	; 0x80
 8003e6a:	2120      	movs	r1, #32
 8003e6c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2274      	movs	r2, #116	; 0x74
 8003e72:	2100      	movs	r1, #0
 8003e74:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e010      	b.n	8003e9c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	4013      	ands	r3, r2
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	425a      	negs	r2, r3
 8003e8a:	4153      	adcs	r3, r2
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	001a      	movs	r2, r3
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d100      	bne.n	8003e9a <UART_WaitOnFlagUntilTimeout+0x17a>
 8003e98:	e74b      	b.n	8003d32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	b014      	add	sp, #80	; 0x50
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	fffffe5f 	.word	0xfffffe5f

08003ea8 <__libc_init_array>:
 8003ea8:	b570      	push	{r4, r5, r6, lr}
 8003eaa:	2600      	movs	r6, #0
 8003eac:	4d0c      	ldr	r5, [pc, #48]	; (8003ee0 <__libc_init_array+0x38>)
 8003eae:	4c0d      	ldr	r4, [pc, #52]	; (8003ee4 <__libc_init_array+0x3c>)
 8003eb0:	1b64      	subs	r4, r4, r5
 8003eb2:	10a4      	asrs	r4, r4, #2
 8003eb4:	42a6      	cmp	r6, r4
 8003eb6:	d109      	bne.n	8003ecc <__libc_init_array+0x24>
 8003eb8:	2600      	movs	r6, #0
 8003eba:	f000 f821 	bl	8003f00 <_init>
 8003ebe:	4d0a      	ldr	r5, [pc, #40]	; (8003ee8 <__libc_init_array+0x40>)
 8003ec0:	4c0a      	ldr	r4, [pc, #40]	; (8003eec <__libc_init_array+0x44>)
 8003ec2:	1b64      	subs	r4, r4, r5
 8003ec4:	10a4      	asrs	r4, r4, #2
 8003ec6:	42a6      	cmp	r6, r4
 8003ec8:	d105      	bne.n	8003ed6 <__libc_init_array+0x2e>
 8003eca:	bd70      	pop	{r4, r5, r6, pc}
 8003ecc:	00b3      	lsls	r3, r6, #2
 8003ece:	58eb      	ldr	r3, [r5, r3]
 8003ed0:	4798      	blx	r3
 8003ed2:	3601      	adds	r6, #1
 8003ed4:	e7ee      	b.n	8003eb4 <__libc_init_array+0xc>
 8003ed6:	00b3      	lsls	r3, r6, #2
 8003ed8:	58eb      	ldr	r3, [r5, r3]
 8003eda:	4798      	blx	r3
 8003edc:	3601      	adds	r6, #1
 8003ede:	e7f2      	b.n	8003ec6 <__libc_init_array+0x1e>
 8003ee0:	08003f98 	.word	0x08003f98
 8003ee4:	08003f98 	.word	0x08003f98
 8003ee8:	08003f98 	.word	0x08003f98
 8003eec:	08003f9c 	.word	0x08003f9c

08003ef0 <memset>:
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	1882      	adds	r2, r0, r2
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d100      	bne.n	8003efa <memset+0xa>
 8003ef8:	4770      	bx	lr
 8003efa:	7019      	strb	r1, [r3, #0]
 8003efc:	3301      	adds	r3, #1
 8003efe:	e7f9      	b.n	8003ef4 <memset+0x4>

08003f00 <_init>:
 8003f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f06:	bc08      	pop	{r3}
 8003f08:	469e      	mov	lr, r3
 8003f0a:	4770      	bx	lr

08003f0c <_fini>:
 8003f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f12:	bc08      	pop	{r3}
 8003f14:	469e      	mov	lr, r3
 8003f16:	4770      	bx	lr
